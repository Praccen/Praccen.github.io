{"version":3,"sources":["../node_modules/gl-matrix/esm/common.js","../node_modules/gl-matrix/esm/mat3.js","../node_modules/gl-matrix/esm/mat4.js","../node_modules/gl-matrix/esm/quat.js","../node_modules/gl-matrix/esm/vec3.js","../node_modules/gl-matrix/esm/vec4.js","../node_modules/gl-matrix/esm/vec2.js","../src/Engine/Rendering/Renderer/Framebuffers/Framebuffer.ts","../src/Engine/Rendering/AssetHandling/Textures/Texture.ts","../src/Engine/Rendering/Objects/GraphicsObjects/GraphicsObject.ts","../src/Engine/Rendering/Objects/GraphicsObjects/ScreenQuad.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/ShaderProgram.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/ScreenQuadShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/ScreenQuadRenderPass.ts","../src/Engine/Rendering/Objects/GraphicsObjects/Skybox.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/Skybox/SkyboxShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/SkyboxRenderPass.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/DeferredRendering/GeometryPassShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/DefferedRendering/GeometryRenderPass.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/DeferredRendering/LightingPassShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/DefferedRendering/LightingRenderPass.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/ShadowMapping/DirectionalShadowShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/ShadowPasses/DirectionalShadowRenderPass.ts","../src/Engine/Rendering/Objects/Camera.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/ShadowMapping/PointShadowShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/ShadowPasses/PointShadowRenderPass.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/Volumetric/VolumetricLightingShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/Volumetric/VolumetricLightingPass.ts","../src/Engine/Rendering/Renderer/ShaderPrograms/Particles/ParticleShaderProgram.ts","../src/Engine/Rendering/Renderer/RenderPasses/Particles/ParticleRenderPass.ts","../src/Engine/Rendering/Renderer/Renderer.ts","../src/Engine/Rendering/Objects/Lighting/DirectionalLight.ts","../src/Engine/Rendering/AssetHandling/Textures/CubeMap.ts","../src/Engine/Rendering/Objects/Lighting/PointLight.ts","../src/Engine/Shared/Transform.ts","../src/Engine/Rendering/Objects/GraphicsBundle.ts","../src/Engine/Rendering/Objects/GraphicsObjects/ParticleSpawner.ts","../src/Engine/Rendering/Renderer/Scene.ts","../src/Engine/Rendering/AssetHandling/TextureStore.ts","../src/Engine/Rendering/Objects/GraphicsObjects/Mesh.ts","../src/Engine/Rendering/AssetHandling/MeshStore.ts","../src/Engine/Rendering/GUI/Objects/GuiObject.ts","../src/Engine/Rendering/GUI/Objects/Button.ts","../src/Engine/Rendering/GUI/Objects/Checkbox.ts","../src/Engine/Rendering/GUI/Objects/Div.ts","../src/Engine/Rendering/GUI/Objects/Progress.ts","../src/Engine/Rendering/GUI/Objects/Slider.ts","../src/Engine/Rendering/GUI/Objects/Text/EditText.ts","../src/Engine/Rendering/GUI/Objects/Text/TextObject2D.ts","../src/Engine/Rendering/GUI/Objects/Text/TextObject3D.ts","../src/Engine/Rendering/GUI/GUIRenderer.ts","../src/Engine/Physics/Physics/CollisionSolver.ts","../src/Engine/Physics/Maths/SAT.ts","../src/Engine/Physics/Physics/IntersectionTester.ts","../src/Engine/Physics/Physics/Shapes/Shape.ts","../src/Engine/Physics/Physics/Shapes/OBB.ts","../src/Engine/Physics/Physics/Objects/PhysicsObject.ts","../src/Engine/Physics/Physics/PhysicsScene.ts","../src/Engine/Physics/Physics/Shapes/Ray.ts","../src/Engine/Physics/Maths/MousePicking.ts","../src/Engine.ts"],"sourcesContent":["/**\n * Common utilities\n * @module glMatrix\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {ReadonlyMat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the source matrix\n * @returns {mat3} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\n * Calculates the determinant of a mat3\n *\n * @param {ReadonlyMat3} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to translate\n * @param {ReadonlyVec2} v vector to translate by\n * @returns {mat3} out\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to rotate\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Translation vector\n * @returns {mat3} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyVec2} v Scaling vector\n * @returns {mat3} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat2d} a the matrix to copy\n * @returns {mat3} out\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat3\n *\n * @param {ReadonlyMat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @returns {mat3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {ReadonlyMat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {ReadonlyMat3} a the first operand\n * @param {ReadonlyMat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat3} a The first matrix.\n * @param {ReadonlyMat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveNO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\n * Alias for {@link mat4.perspectiveNO}\n * @function\n */\n\nexport var perspective = perspectiveNO;\n/**\n * Generates a perspective projection matrix suitable for WebGPU with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\n\nexport function perspectiveZO(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = far * nf;\n    out[14] = far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -near;\n  }\n\n  return out;\n}\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],\n * which matches WebGL/OpenGL's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoNO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Alias for {@link mat4.orthoNO}\n * @function\n */\n\nexport var ortho = orthoNO;\n/**\n * Generates a orthogonal projection matrix with the given bounds.\n * The near/far clip planes correspond to a normalized device coordinate Z range of [0, 1],\n * which matches WebGPU/Vulkan/DirectX/Metal's clip volume.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\n\nexport function orthoZO(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = near * nf;\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyVec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\n * Gets the angular distance between two unit quaternions\n *\n * @param  {ReadonlyQuat} a     Origin unit quaternion\n * @param  {ReadonlyQuat} b     Destination unit quaternion\n * @return {Number}     Angle, in radians, between the two quaternions\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {ReadonlyQuat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate W component of\n * @returns {quat} out\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\n * Calculate the exponential of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\n * Calculate the natural logarithm of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @returns {quat} out\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\n * Calculate the scalar power of a unit quaternion.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate the exponential of\n * @param {Number} b amount to scale the quaternion by\n * @returns {quat} out\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\n * Generates a random unit quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate inverse of\n * @returns {quat} out\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quat to calculate conjugate of\n * @returns {quat} out\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyMat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\n * Returns a string representation of a quatenion\n *\n * @param {ReadonlyQuat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {ReadonlyQuat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var clone = vec4.clone;\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\n\nexport var fromValues = vec4.fromValues;\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the source quaternion\n * @returns {quat} out\n * @function\n */\n\nexport var copy = vec4.copy;\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\n\nexport var set = vec4.set;\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {quat} out\n * @function\n */\n\nexport var add = vec4.add;\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {ReadonlyQuat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\n\nexport var scale = vec4.scale;\n/**\n * Calculates the dot product of two quat's\n *\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\n\nexport var dot = vec4.dot;\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n * @function\n */\n\nexport var lerp = vec4.lerp;\n/**\n * Calculates the length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport var length = vec4.length;\n/**\n * Alias for {@link quat.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Calculates the squared length of a quat\n *\n * @param {ReadonlyQuat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\n\nexport var normalize = vec4.normalize;\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyQuat} a The first quaternion.\n * @param {ReadonlyQuat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {ReadonlyQuat} a The first vector.\n * @param {ReadonlyQuat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport var equals = vec4.equals;\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {ReadonlyVec3} a the initial vector\n * @param {ReadonlyVec3} b the destination vector\n * @returns {quat} out\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {ReadonlyQuat} a the first operand\n * @param {ReadonlyQuat} b the second operand\n * @param {ReadonlyQuat} c the third operand\n * @param {ReadonlyQuat} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {quat} out\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {ReadonlyVec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Calculates the length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the source vector\n * @returns {vec3} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to ceil\n * @returns {vec3} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to floor\n * @returns {vec3} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to round\n * @returns {vec3} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Calculates the squared length of a vec3\n *\n * @param {ReadonlyVec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to negate\n * @returns {vec3} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to invert\n * @returns {vec3} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a vector to normalize\n * @returns {vec3} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the first operand\n * @param {ReadonlyVec3} b the second operand\n * @param {ReadonlyVec3} c the third operand\n * @param {ReadonlyVec3} d the fourth operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec3} out\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\n * Transforms the vec3 with a quat\n * Can also be used for dual quaternions. (Multiply it with the real part)\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec3} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec3} out\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {ReadonlyVec3} a The vec3 point to rotate\n * @param {ReadonlyVec3} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec3} out\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\n * Get the angle between two 3D vectors\n * @param {ReadonlyVec3} a The first operand\n * @param {ReadonlyVec3} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec3 to zero\n *\n * @param {vec3} out the receiving vector\n * @returns {vec3} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec3} a The first vector.\n * @param {ReadonlyVec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec3.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {ReadonlyVec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the source vector\n * @returns {vec4} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to ceil\n * @returns {vec4} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to floor\n * @returns {vec4} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {vec4} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to round\n * @returns {vec4} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Calculates the length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\n * Calculates the squared length of a vec4\n *\n * @param {ReadonlyVec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to negate\n * @returns {vec4} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to invert\n * @returns {vec4} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a vector to normalize\n * @returns {vec4} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\n * Returns the cross-product of three vectors in a 4-dimensional space\n *\n * @param {ReadonlyVec4} result the receiving vector\n * @param {ReadonlyVec4} U the first vector\n * @param {ReadonlyVec4} V the second vector\n * @param {ReadonlyVec4} W the third vector\n * @returns {vec4} result\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the first operand\n * @param {ReadonlyVec4} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec4} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec4} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {ReadonlyVec4} a the vector to transform\n * @param {ReadonlyQuat} q quaternion to transform with\n * @returns {vec4} out\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\n * Set the components of a vec4 to zero\n *\n * @param {vec4} out the receiving vector\n * @returns {vec4} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec4} a The first vector.\n * @param {ReadonlyVec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec4.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {ReadonlyVec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the source vector\n * @returns {vec2} out\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to ceil\n * @returns {vec2} out\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to floor\n * @returns {vec2} out\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec2} out\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to round\n * @returns {vec2} out\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} distance between a and b\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\n * Calculates the length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate length of\n * @returns {Number} length of a\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\n * Calculates the squared length of a vec2\n *\n * @param {ReadonlyVec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to negate\n * @returns {vec2} out\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to invert\n * @returns {vec2} out\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a vector to normalize\n * @returns {vec2} out\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {Number} dot product of a and b\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @returns {vec3} out\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the first operand\n * @param {ReadonlyVec2} b the second operand\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\n * @returns {vec2} out\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat2d} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat3} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {ReadonlyVec2} a the vector to transform\n * @param {ReadonlyMat4} m matrix to transform with\n * @returns {vec2} out\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\n * Rotate a 2D vector\n * @param {vec2} out The receiving vec2\n * @param {ReadonlyVec2} a The vec2 point to rotate\n * @param {ReadonlyVec2} b The origin of the rotation\n * @param {Number} rad The angle of rotation in radians\n * @returns {vec2} out\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\n * Get the angle between two 2D vectors\n * @param {ReadonlyVec2} a The first operand\n * @param {ReadonlyVec2} b The second operand\n * @returns {Number} The angle in radians\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\n * Set the components of a vec2 to zero\n *\n * @param {vec2} out the receiving vector\n * @returns {vec2} out\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\n * Returns a string representation of a vector\n *\n * @param {ReadonlyVec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {ReadonlyVec2} a The first vector.\n * @param {ReadonlyVec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\n * Alias for {@link vec2.length}\n * @function\n */\n\nexport var len = length;\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\n\nexport var sub = subtract;\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\n\nexport var mul = multiply;\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\n\nexport var div = divide;\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\n\nexport var dist = distance;\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\n\nexport var sqrDist = squaredDistance;\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\n\nexport var sqrLen = squaredLength;\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import { gl } from \"../Renderer\";\nimport Texture from \"../../AssetHandling/Textures/Texture\";\n\nexport default class Framebuffer {\n\t// Public\n\ttextures: Array<Texture>;\n\tdepthTexture: Texture;\n\n\t// Protected\n\tprotected rbo: WebGLRenderbuffer;\n\tprotected fbo: WebGLFramebuffer;\n\tprotected width: number;\n\tprotected height: number;\n\n\t/**\n\t * @param width - width of framebuffer textures\n\t * @param height - height of framebuffer textures\n\t * @param textures - colour attachment textures, send empty array if no colour attachments should be used\n\t * @param depthTexture - depth attachment texture, send null if no depth attachment (an rbo will be created instead)\n\t */\n\tconstructor(width: number, height: number, textures: Array<Texture>, depthTexture: Texture) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\n\t\tthis.textures = textures;\n\t\tthis.depthTexture = depthTexture;\n\n\t\tthis.fbo = gl.createFramebuffer();\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\n\n\t\tthis.setupAttachments();\n\n\t\tif (gl.checkFramebufferStatus(gl.FRAMEBUFFER) != gl.FRAMEBUFFER_COMPLETE) {\n\t\t\tconsole.warn(\"ERROR::FRAMEBUFFER:: Framebuffer is not complete!\");\n\t\t}\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t}\n\n\tprotected setupAttachments() {\n\t\tlet attachments = new Array<number>();\n\t\tfor (let i = 0; i < this.textures.length; i++) {\n\t\t\tthis.textures[i].setTextureData(null, this.width, this.height);\n\t\t\tif (this.textures[i].textureTarget == gl.TEXTURE_CUBE_MAP) {\n\t\t\t\t// This is a cube map, set the positive x as target and rendering loop will take care of switching target to the correct side\n\t\t\t\tgl.framebufferTexture2D(\n\t\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\t\tgl.COLOR_ATTACHMENT0 + i,\n\t\t\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t\t\t\t\tthis.textures[i].texture,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tattachments.push(gl.COLOR_ATTACHMENT0 + i);\n\t\t\t} else {\n\t\t\t\t// This is a normal 2D texture, set TexParameters to something fitting for a framebuffer target, and set up the target.\n\t\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\t\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\t\tthis.textures[i].setTexParameterI(gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t\t\tgl.framebufferTexture2D(\n\t\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\t\tgl.COLOR_ATTACHMENT0 + i,\n\t\t\t\t\tgl.TEXTURE_2D,\n\t\t\t\t\tthis.textures[i].texture,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t\tattachments.push(gl.COLOR_ATTACHMENT0 + i);\n\t\t\t}\n\t\t}\n\n\t\t// Attach drawing targets\n\t\tgl.drawBuffers(attachments);\n\n\t\tif (this.depthTexture != undefined) {\n\t\t\t// There is a defined depth texture, null it's content with the correct width and height\n\t\t\tthis.depthTexture.setTextureData(null, this.width, this.height);\n\n\t\t\tif (this.depthTexture.textureTarget == gl.TEXTURE_CUBE_MAP) {\n\t\t\t\t// The depth texture is a cube map, set the positive x as target and rendering loop will take care of switching target to the correct side\n\t\t\t\tgl.framebufferTexture2D(\n\t\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\t\tgl.DEPTH_ATTACHMENT,\n\t\t\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X,\n\t\t\t\t\tthis.depthTexture.texture,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// The depth texture is a normal 2D texture, set up the appropriate target\n\t\t\t\tgl.framebufferTexture2D(\n\t\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\t\tgl.DEPTH_ATTACHMENT,\n\t\t\t\t\tgl.TEXTURE_2D,\n\t\t\t\t\tthis.depthTexture.texture,\n\t\t\t\t\t0\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// We have no defined depth texture, use a render buffer instead\n\t\t\tthis.rbo = gl.createRenderbuffer();\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this.rbo);\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, this.width, this.height);\n\n\t\t\tgl.framebufferRenderbuffer(\n\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\tgl.DEPTH_STENCIL_ATTACHMENT,\n\t\t\t\tgl.RENDERBUFFER,\n\t\t\t\tthis.rbo\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Will setup the framebuffer to the given width and height, including resizing (and clearing) all textures (both normal render textures and depth texture)\n\t * For cubemaps all sides will be cleared and resized\n\t * @param width New width of the framebuffer\n\t * @param height New height of the framebuffer\n\t */\n\tsetProportions(width: number, height: number) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tfor (let texture of this.textures) {\n\t\t\ttexture.setTextureData(null, this.width, this.height);\n\t\t}\n\t\tif (this.depthTexture) {\n\t\t\tthis.depthTexture.setTextureData(null, this.width, this.height);\n\t\t}\n\n\t\tif (this.rbo) {\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.fbo);\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, this.rbo);\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH24_STENCIL8, width, height);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t}\n\t}\n\n\tgetWidth(): number {\n\t\treturn this.width;\n\t}\n\n\tgetHeight(): number {\n\t\treturn this.height;\n\t}\n\n\t/**\n\t * Bind this framebuffer to the sent in target\n\t * @param target framebuffer target (for example gl.FRAMEBUFFER, gl.DRAW_FRAMEBUFFER, gl.READ_FRAMEBUFFER)\n\t */\n\tbind(target: number) {\n\t\tgl.bindFramebuffer(target, this.fbo);\n\t}\n}\n","import { gl } from \"../../Renderer/Renderer\";\n\nexport default class Texture {\n\t// Public\n\twidth: number;\n\theight: number;\n\ttexture: WebGLTexture;\n\n\tloadedFromFile: boolean;\n\n\tprotected useMipMap: boolean;\n\n\tprotected internalFormat: number;\n\tprotected format: number;\n\tprotected dataStorageType: number;\n\ttextureTarget: number;\n\n\tconstructor(\n\t\tuseMipMap: boolean = true,\n\t\tinternalFormat: number = gl.RGBA,\n\t\tformat: number = gl.RGBA,\n\t\tdataStorageType: number = gl.UNSIGNED_BYTE,\n\t\ttextureTarget: number = gl.TEXTURE_2D\n\t) {\n\t\tthis.useMipMap = useMipMap;\n\n\t\tthis.internalFormat = internalFormat;\n\t\tthis.format = format;\n\t\tthis.dataStorageType = dataStorageType;\n\t\tthis.textureTarget = textureTarget;\n\n\t\t// Generate texture\n\t\tthis.texture = gl.createTexture();\n\t\tgl.bindTexture(this.textureTarget, this.texture);\n\n\t\t// Set texture parameters\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\tgl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\n\n\t\t// Make a 1 by 1 checkers texture\n\t\tthis.setTextureData(null, 1, 1);\n\n\t\tgl.bindTexture(this.textureTarget, null);\n\t}\n\n\tsetTextureData(data: Uint8Array, width: number, height: number) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tgl.bindTexture(this.textureTarget, this.texture);\n\t\tgl.texImage2D(\n\t\t\tthis.textureTarget,\n\t\t\t0,\n\t\t\tthis.internalFormat,\n\t\t\twidth,\n\t\t\theight,\n\t\t\t0,\n\t\t\tthis.format,\n\t\t\tthis.dataStorageType,\n\t\t\tdata\n\t\t);\n\t\tif (this.useMipMap) {\n\t\t\tgl.generateMipmap(this.textureTarget);\n\t\t\tgl.texParameteri(this.textureTarget, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n\t\t}\n\t\tgl.bindTexture(this.textureTarget, null);\n\n\t\tthis.loadedFromFile = false;\n\t}\n\n\tbind(textureIndex: number = 0) {\n\t\tgl.activeTexture(gl.TEXTURE0 + textureIndex);\n\t\tgl.bindTexture(this.textureTarget, this.texture);\n\t}\n\n\tloadFromFile(URL: string) {\n\t\tlet image = new Image();\n\t\timage.crossOrigin = \"\";\n\t\timage.src = URL;\n\t\tlet self = this;\n\t\timage.addEventListener(\"load\", function () {\n\t\t\t// Now that the image has loaded copy it to the texture and save the width/height.\n\t\t\tself.width = image.width;\n\t\t\tself.height = image.height;\n\t\t\tgl.bindTexture(self.textureTarget, self.texture);\n\t\t\tgl.texImage2D(\n\t\t\t\tself.textureTarget,\n\t\t\t\t0,\n\t\t\t\tself.internalFormat,\n\t\t\t\tself.format,\n\t\t\t\tself.dataStorageType,\n\t\t\t\timage\n\t\t\t);\n\t\t\tif (self.useMipMap) {\n\t\t\t\tgl.generateMipmap(self.textureTarget);\n\t\t\t\tgl.texParameteri(self.textureTarget, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n\t\t\t}\n\t\t\tself.loadedFromFile = true;\n\t\t});\n\t}\n\n\tcreateFromCSSColorValue(colorValue: string) {\n\t\tlet r = 0;\n\t\tlet g = 0;\n\t\tlet b = 0;\n\t\tlet a = 255;\n\t\tif (colorValue.startsWith(\"#\")) {\n\t\t\t// Hex\n\t\t\tif (colorValue.length >= 7) {\n\t\t\t\tr = parseInt(colorValue.slice(1, 3), 16);\n\t\t\t\tg = parseInt(colorValue.slice(3, 5), 16);\n\t\t\t\tb = parseInt(colorValue.slice(5, 7), 16);\n\t\t\t\tif (colorValue.length == 9) {\n\t\t\t\t\ta = parseInt(colorValue.slice(7, 9), 16);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (colorValue.startsWith(\"rgba(\")) {\n\t\t\tlet rfindResult = colorValue.lastIndexOf(\")\");\n\t\t\tlet values = colorValue\n\t\t\t\t.substring(\"rgba(\".length, rfindResult)\n\t\t\t\t.split(\",\")\n\t\t\t\t.map((value) => {\n\t\t\t\t\treturn parseFloat(value);\n\t\t\t\t});\n\t\t\tr = values[0];\n\t\t\tg = values[1];\n\t\t\tb = values[2];\n\t\t\ta = values[3] * 255;\n\t\t} else if (colorValue.startsWith(\"rgb(\")) {\n\t\t\tlet rfindResult = colorValue.lastIndexOf(\")\");\n\t\t\tlet values = colorValue\n\t\t\t\t.substring(\"rgb(\".length, rfindResult)\n\t\t\t\t.split(\",\")\n\t\t\t\t.map((value) => {\n\t\t\t\t\treturn parseInt(value);\n\t\t\t\t});\n\t\t\tr = values[0];\n\t\t\tg = values[1];\n\t\t\tb = values[2];\n\t\t}\n\n\t\tthis.setTextureData(new Uint8Array([r, g, b, a]), 1, 1);\n\t}\n\n\tsetTexParameterI(a: number, b: number) {\n\t\tgl.bindTexture(this.textureTarget, this.texture);\n\t\tgl.texParameteri(this.textureTarget, a, b);\n\t\tgl.bindTexture(this.textureTarget, null);\n\t}\n}\n","import { vec3 } from \"gl-matrix\";\nimport { gl } from \"../../Renderer/Renderer\";\nimport ShaderProgram from \"../../Renderer/ShaderPrograms/ShaderProgram\";\n\nexport default class GraphicsObject {\n\tshaderProgram: ShaderProgram;\n\n\t// Private\n\tprivate VAO: WebGLVertexArrayObject;\n\tprivate VBO: WebGLBuffer;\n\tprivate EBO: WebGLBuffer;\n\n\tconstructor(shaderProgram: ShaderProgram) {\n\t\tthis.shaderProgram = shaderProgram;\n\n\t\tthis.VAO = null;\n\t\tthis.VBO = null;\n\t\tthis.EBO = null; // Optional\n\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\t// Create buffers\n\t\tthis.VAO = gl.createVertexArray();\n\t\tthis.VBO = gl.createBuffer();\n\t\tthis.EBO = gl.createBuffer();\n\n\t\t// Bind buffers\n\t\tgl.bindVertexArray(this.VAO);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\n\n\t\tthis.shaderProgram.setupVertexAttributePointers();\n\n\t\tgl.bindVertexArray(null);\n\t}\n\n\tbindVAO() {\n\t\tgl.bindVertexArray(this.VAO);\n\t}\n\n\tunbindVAO() {\n\t\tgl.bindVertexArray(null);\n\t}\n\n\tsetVertexData(data: Float32Array) {\n\t\tif (data == undefined || data.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tgl.bindVertexArray(this.VAO);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\n\t\tgl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\t\tgl.bindVertexArray(null);\n\t}\n\n\tsetIndexData(data: Int32Array) {\n\t\tgl.bindVertexArray(this.VAO);\n\n\t\tgl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.EBO);\n\t\tgl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, gl.STATIC_DRAW);\n\n\t\tgl.bindVertexArray(null);\n\t}\n\n\tgetVertexPositions(): Array<vec3> {\n\t\treturn null;\n\t}\n\n\tdraw() {\n\t}\n}\n","import GraphicsObject from \"./GraphicsObject\";\nimport Texture from \"../../AssetHandling/Textures/Texture\";\nimport ShaderProgram from \"../../Renderer/ShaderPrograms/ShaderProgram\";\nimport { gl } from \"../../Renderer/Renderer\";\n\nexport default class ScreenQuad extends GraphicsObject {\n\ttextures: Array<Texture>;\n\n\t// Private\n\tprivate vertices: Float32Array;\n\tprivate indices: Int32Array;\n\n\tconstructor(shaderProgram: ShaderProgram, textures: Array<Texture>) {\n\t\tsuper(shaderProgram);\n\n\t\t// prettier-ignore\n\t\tthis.vertices = new Float32Array([ \n            // positions        // uv\n            -1.0,  1.0,     0.0, 1.0,\n            -1.0, -1.0,     0.0, 0.0,\n             1.0, -1.0,     1.0, 0.0,\n             1.0,  1.0,     1.0, 1.0,\n        ]);\n\n\t\t// prettier-ignore\n\t\tthis.indices = new Int32Array([\n            0, 1, 2,\n            0, 2, 3,\n        ]);\n\n\t\tthis.setVertexData(this.vertices);\n\t\tthis.setIndexData(this.indices);\n\n\t\tthis.textures = textures;\n\n\t\tfor (let texture of this.textures) {\n\t\t\ttexture.setTexParameterI(gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\t\ttexture.setTexParameterI(gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\t}\n\t}\n\n\tdraw(bindTextures: boolean = true) {\n\t\tthis.bindVAO();\n\n\t\tif (bindTextures) {\n\t\t\tfor (let i = 0; i < this.textures.length; i++) {\n\t\t\t\tthis.textures[i].bind(i);\n\t\t\t}\n\t\t}\n\n\t\tgl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0);\n\t}\n}\n","import { gl } from \"../Renderer\";\n\nexport default class ShaderProgram {\n\t// Protected\n\tprotected shaderProgram: WebGLProgram;\n\tprotected uniformBindings: Map<string, WebGLUniformLocation>;\n\n\tconstructor(\n\t\tshaderProgramName: string,\n\t\tvertexShaderName: string,\n\t\tfragmentShaderName: string,\n\t\tdebugShaderCompilation: boolean = false\n\t) {\n\t\tthis.shaderProgram = null;\n\t\tthis.loadShaders(\n\t\t\tshaderProgramName,\n\t\t\tvertexShaderName,\n\t\t\tfragmentShaderName,\n\t\t\tdebugShaderCompilation\n\t\t);\n\t\tthis.uniformBindings = new Map<string, WebGLUniformLocation>();\n\t}\n\n\tloadShaders(\n\t\tshaderProgramName: string,\n\t\tvertexShaderString: string,\n\t\tfragmentShaderString: string,\n\t\tdebugShaderCompilation: boolean\n\t) {\n\t\t// link shaders\n\t\tif (this.shaderProgram != null) {\n\t\t\tgl.deleteProgram(this.shaderProgram); // Delete in case this is not the first time this shader is created.\n\t\t}\n\n\t\tconsole.log(\"Compiling shader program: \" + shaderProgramName);\n\n\t\t// vertex shader\n\t\tconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\t\tgl.shaderSource(vertexShader, vertexShaderString);\n\t\tgl.compileShader(vertexShader);\n\n\t\t// Check for shader compile errors\n\t\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS) || debugShaderCompilation) {\n\t\t\tconsole.log(\n\t\t\t\t\"Vertex shader compiled successfully: \" +\n\t\t\t\t\tgl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)\n\t\t\t);\n\t\t\tconsole.log(\"Vertex shader compiler log: \\n\" + gl.getShaderInfoLog(vertexShader));\n\t\t}\n\n\t\t// fragment shader\n\t\tconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\tgl.shaderSource(fragmentShader, fragmentShaderString);\n\t\tgl.compileShader(fragmentShader);\n\n\t\t// Check for shader compile errors\n\t\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS) || debugShaderCompilation) {\n\t\t\tconsole.log(\n\t\t\t\t\"Fragment shader compiled successfully: \" +\n\t\t\t\t\tgl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)\n\t\t\t);\n\t\t\tconsole.log(\"Fragment shader compiler log: \\n\" + gl.getShaderInfoLog(fragmentShader));\n\t\t}\n\n\t\tthis.shaderProgram = gl.createProgram();\n\n\t\tgl.attachShader(this.shaderProgram, vertexShader);\n\t\tgl.attachShader(this.shaderProgram, fragmentShader);\n\t\tgl.linkProgram(this.shaderProgram);\n\n\t\t// Check for linking errors?\n\t\tlet linkedShaders = gl.getProgramParameter(this.shaderProgram, gl.LINK_STATUS);\n\t\tif (!linkedShaders || debugShaderCompilation) {\n\t\t\tconsole.log(\"Linked shaders successfully: \" + linkedShaders);\n\t\t\tconsole.log(\"Linking shaders log: \\n\" + gl.getProgramInfoLog(this.shaderProgram));\n\t\t}\n\n\t\t// Delete shaders now that they have been made into a program\n\t\tgl.deleteShader(vertexShader);\n\t\tgl.deleteShader(fragmentShader);\n\t}\n\n\tuse() {\n\t\tgl.useProgram(this.shaderProgram);\n\t}\n\n\tsetupVertexAttributePointers() {\n\t}\n\n\tsetupInstancedVertexAttributePointers() {}\n\n\tsetUniformLocation(uniformName: string) {\n\t\tthis.uniformBindings.set(uniformName, gl.getUniformLocation(this.shaderProgram, uniformName));\n\t}\n\n\tgetUniformLocation(uniformName: string): [WebGLUniformLocation, boolean] {\n\t\tif (this.uniformBindings.has(uniformName)) {\n\t\t\treturn [this.uniformBindings.get(uniformName), true];\n\t\t}\n\n\t\t// console.log(\"No uniform with name \" + uniformName + \"\\n\");\n\t\treturn [0, false];\n\t}\n}","import { gl } from \"../Renderer\";\nimport ShaderProgram from \"./ShaderProgram\";\n\nexport const screenQuadVertexSrc: string = `#version 300 es\n\nlayout (location = 0) in vec2 inPos;\nlayout (location = 1) in vec2 inTexCoords;\n\nout vec2 texCoords;\n\nvoid main()\n{\n    texCoords = inTexCoords;\n    gl_Position = vec4(inPos, 0.0, 1.0); \n}  \n`;\n\nconst screenQuadFragmentSrc: string = `#version 300 es\nprecision highp float;\n\nout vec4 FragColor;\nin vec2 texCoords;\n\nuniform sampler2D screenTexture;\n\nvoid main() {\n    FragColor = texture(screenTexture, texCoords).rgba;\n}\n`;\n\nclass ScreenQuadShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\"ScreenQuadShaderProgram\", screenQuadVertexSrc, screenQuadFragmentSrc);\n\n\t\tthis.setUniformLocation(\"screenTexture\");\n\n\t\tgl.uniform1i(this.uniformBindings[\"screenTexture\"], 0);\n\t}\n\n\tsetupVertexAttributePointers() {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 4 * 4;\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\n\t\tgl.enableVertexAttribArray(1);\n\t}\n}\n\nexport let screenQuadShaderProgram = null;\n\nexport let createScreenQuadShaderProgram = function () {\n\tscreenQuadShaderProgram = new ScreenQuadShaderProgram();\n};\n","import { gl } from \"../Renderer\";\nimport Framebuffer from \"../Framebuffers/Framebuffer\";\nimport Texture from \"../../AssetHandling/Textures/Texture\";\nimport ScreenQuad from \"../../Objects/GraphicsObjects/ScreenQuad\";\nimport { screenQuadShaderProgram } from \"../ShaderPrograms/ScreenQuadShaderProgram\";\n\nexport default class ScreenQuadPass {\n\tprivate screenQuad: ScreenQuad;\n\toutputFramebuffer: Framebuffer;\n\n\tconstructor(inputTextures: Texture) {\n\t\tthis.screenQuad = new ScreenQuad(screenQuadShaderProgram, [inputTextures]);\n\t\tthis.outputFramebuffer = null;\n\t}\n\n\tprivate bindOutput() {\n\t\tif (this.outputFramebuffer == undefined) {\n\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null); // Render directly to screen\n\t\t}\n\t\telse {\n\t\t\tthis.outputFramebuffer.bind(gl.DRAW_FRAMEBUFFER);\n\t\t}\n\t}\n\n\tdraw() {\n\t\tthis.bindOutput();\n\t\tgl.disable(gl.DEPTH_TEST);\n\n\t\tscreenQuadShaderProgram.use();\n\t\tthis.screenQuad.draw(true);\n\n\t\tgl.enable(gl.DEPTH_TEST);\n\t}\n}\n","import GraphicsObject from \"./GraphicsObject\";\nimport ShaderProgram from \"../../Renderer/ShaderPrograms/ShaderProgram\";\nimport { gl } from \"../../Renderer/Renderer\";\nimport CubeMap from \"../../AssetHandling/Textures/CubeMap\";\n\nexport default class Skybox extends GraphicsObject {\n\t// Public\n\ttexture: CubeMap;\n\n\t// Private\n\tprivate vertices: Float32Array;\n\tprivate indices: Int32Array;\n\n\tconstructor(shaderProgram: ShaderProgram, texture: CubeMap) {\n\t\tsuper(shaderProgram);\n\n\t\t// prettier-ignore\n\t\tthis.vertices = new Float32Array([ \n            // positions\n            -0.5,  0.5, -0.5,\t/*0*/\n            -0.5, -0.5, -0.5,\t/*1*/\n             0.5, -0.5, -0.5,\t/*2*/\n             0.5,  0.5, -0.5,\t/*3*/\n            -0.5,  0.5,  0.5,\t/*4*/\n            -0.5, -0.5,  0.5,\t/*5*/\n             0.5, -0.5,  0.5,\t/*6*/\n             0.5,  0.5,  0.5,\t/*7*/\n        ]);\n\n\t\t// prettier-ignore\n\t\tthis.indices = new Int32Array([\n            0, 1, 2,\n            0, 2, 3,\n\t\t\t\n\t\t\t3, 2, 6,\n\t\t\t3, 6, 7,\n\n\t\t\t7, 6, 5,\n\t\t\t7, 5, 4,\n\n\t\t\t4, 5, 1,\n\t\t\t4, 1, 0,\n\n\t\t\t4, 0, 3,\n\t\t\t4, 3, 7,\n\n\t\t\t1, 5, 6, \n\t\t\t1, 6, 2,\n        ]);\n\t\tthis.setVertexData(this.vertices);\n\t\tthis.setIndexData(this.indices);\n\n\t\tthis.texture = texture;\n\t}\n\n\tdraw() {\n\t\tthis.bindVAO();\n\n\t\tthis.texture.bind();\n\n\t\tgl.drawElements(gl.TRIANGLES, this.indices.length, gl.UNSIGNED_INT, 0);\n\t}\n}\n","import { gl } from \"../../Renderer\";\nimport ShaderProgram from \"../ShaderProgram\";\n\nexport const skyboxVertexSrc: string = `#version 300 es\n\nlayout (location = 0) in vec3 inPos;\n\nout vec3 texCoords;\n\nuniform mat4 viewProjMatrix;\n\nvoid main()\n{\n    texCoords = inPos;\n\ttexCoords.y *= -1.0;\n\ttexCoords.z *= -1.0;\n    vec4 pos = viewProjMatrix * vec4(inPos, 1.0);\n    gl_Position = pos.xyww; \n}  \n`;\n\nconst skyboxFragmentSrc: string = `#version 300 es\nprecision highp float;\n\nlayout (location = 0) out vec4 FragColor;\nlayout (location = 1) out float FragOpacity;\n\nin vec3 texCoords;\n\nuniform samplerCube skybox;\n\nvoid main() {\n\tFragColor = texture(skybox, texCoords).rgba;\n\tFragOpacity = 0.0;\n}\n`;\n\nclass SkyboxShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\"SkyboxShaderProgram\", skyboxVertexSrc, skyboxFragmentSrc);\n\n\t\tthis.setUniformLocation(\"skybox\");\n\t\tgl.uniform1i(this.uniformBindings[\"skybox\"], 0);\n\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\n\t}\n\n\tsetupVertexAttributePointers() {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 3 * 4;\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\t}\n}\n\nexport let skyboxShaderProgram = null;\n\nexport let createSkyboxShaderProgram = function () {\n\tskyboxShaderProgram = new SkyboxShaderProgram();\n};\n","import Skybox from \"../../Objects/GraphicsObjects/Skybox\";\nimport { skyboxShaderProgram } from \"../ShaderPrograms/Skybox/SkyboxShaderProgram\";\nimport CubeMap from \"../../AssetHandling/Textures/CubeMap\";\nimport Camera from \"../../Objects/Camera\";\nimport { gl } from \"../Renderer\";\n\nexport default class SkyboxRenderPass {\n\tprivate skybox: Skybox;\n\n\tconstructor() {\n\t\tthis.skybox = null;\n\t}\n\n\tsetSkybox(cubemap: CubeMap) {\n\t\tthis.skybox = new Skybox(skyboxShaderProgram, cubemap);\n\t}\n\n\tdraw(camera: Camera) {\n\t\tif (this.skybox != undefined) {\n\t\t\tgl.enable(gl.DEPTH_TEST);\n\t\t\tskyboxShaderProgram.use();\n\t\t\tcamera.bindViewProjMatrix(skyboxShaderProgram.getUniformLocation(\"viewProjMatrix\")[0], true);\n\t\t\tgl.depthFunc(gl.LEQUAL);\n\t\t\tthis.skybox.draw();\n\t\t\tgl.depthFunc(gl.LESS);\n\t\t}\n\t}\n}\n","import { gl } from \"../../Renderer\";\nimport ShaderProgram from \"../ShaderProgram\";\n\nconst geometryVertexShaderSrc: string = `#version 300 es\n// If inputs change, also update GeometryPass::setupVertexAttributePointers to match\nlayout (location = 0) in vec3 inPosition;\nlayout (location = 1) in vec3 inNormal;\nlayout (location = 2) in vec2 inTexCoords;\n\n// If uniforms change, also update PhongShaderProgram to match\nuniform mat4 modelMatrix;\nuniform mat4 viewProjMatrix;\nuniform mat4 textureMatrix;\nuniform mat3 normalMatrix;\n\nout vec3 fragPos;\nout vec3 fragNormal;\nout vec2 texCoords;\n\nvoid main() {\n    vec4 worldPos = modelMatrix * vec4(inPosition, 1.0);\n\ttexCoords = vec2(textureMatrix * vec4(inTexCoords, 0.0, 1.0));\n\n\tfragNormal = normalize(normalMatrix * inNormal);\n\tfragPos = worldPos.xyz;\n\n    gl_Position = viewProjMatrix * worldPos;\n}`;\n\nexport const geometryFragmentShaderSrc: string = `#version 300 es\nprecision highp float;\n\nin vec3 fragPos;\nin vec3 fragNormal;\nin vec2 texCoords;\n\nlayout (location = 0) out vec4 gPosition;\nlayout (location = 1) out vec4 gNormal;\nlayout (location = 2) out vec4 gColourSpec;\nlayout (location = 3) out vec4 gEmission;\n\nstruct Material {\n\tsampler2D diffuse;\n\tsampler2D specular;\n\tsampler2D emission;\n};\n\nuniform Material material;\nuniform vec3 emissionColor;\n\nmat4 thresholdMatrix = mat4(\n\t1.0, 9.0, 3.0, 11.0,\n\t13.0, 5.0, 15.0, 7.0,\n\t4.0, 12.0, 2.0, 10.0,\n\t16.0, 8.0, 14.0, 6.0\n\t);\n\nvoid main() {\n\tfloat opacity = texture(material.diffuse, texCoords).a;\n\n\tfloat threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\n    if (threshold >= opacity) {\n        discard;\n    }\n\n\tvec3 emissionMapValues = texture(material.emission, texCoords).rgb;\n\tfloat emissionValue = (emissionMapValues.r + emissionMapValues.g + emissionMapValues.b) / 3.0;\n\n\tif ((emissionColor.r > 0.0 || emissionColor.g > 0.0 || emissionColor.b > 0.0) && emissionValue > 0.0) {\n\t\tgEmission.r = emissionColor.r * emissionMapValues.r;\n\t\tgEmission.g = emissionColor.g * emissionMapValues.g;\n\t\tgEmission.b = emissionColor.b * emissionMapValues.b;\n\t}\n\telse if (emissionValue > 0.0) {\n\t\tgEmission.rgb = emissionMapValues;\n\t}\n\telse if (emissionColor.r > 0.0 || emissionColor.g > 0.0 || emissionColor.b > 0.0) {\n\t\tgEmission.rgb = emissionColor.rgb;\n\t}\n\t\n\tgEmission.a = 1.0;\n\n    gColourSpec = vec4(texture(material.diffuse, texCoords).rgb, texture(material.specular, texCoords).r);\n\tgPosition = vec4(fragPos, 1.0);\n\tgNormal = vec4(fragNormal, 1.0);\n}`;\n\nclass GeometryPassShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\"GeometryPass\", geometryVertexShaderSrc, geometryFragmentShaderSrc);\n\n\t\tthis.use();\n\n\t\tthis.setUniformLocation(\"modelMatrix\");\n\t\tthis.setUniformLocation(\"normalMatrix\");\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\n\t\tthis.setUniformLocation(\"textureMatrix\");\n\n\t\tthis.setUniformLocation(\"material.diffuse\");\n\t\tthis.setUniformLocation(\"material.specular\");\n\t\tthis.setUniformLocation(\"material.emission\");\n\n\t\tthis.setUniformLocation(\"emissionColor\");\n\n\t\tgl.uniform1i(this.getUniformLocation(\"material.diffuse\")[0], 0);\n\t\tgl.uniform1i(this.getUniformLocation(\"material.specular\")[0], 1);\n\t\tgl.uniform1i(this.getUniformLocation(\"material.emission\")[0], 2);\n\t}\n\n\tsetupVertexAttributePointers(): void {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 8 * 4;\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\n\t\tgl.vertexAttribPointer(1, 3, gl.FLOAT, false, stride, 3 * 4);\n\t\tgl.enableVertexAttribArray(1);\n\n\t\tgl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 6 * 4);\n\t\tgl.enableVertexAttribArray(2);\n\t}\n}\n\nexport let geometryPassShaderProgram = null;\n\nexport let createGeometryPassShaderProgram = function () {\n\tgeometryPassShaderProgram = new GeometryPassShaderProgram();\n};\n","import Camera from \"../../../Objects/Camera\";\nimport Framebuffer from \"../../Framebuffers/Framebuffer\";\nimport { geometryPassShaderProgram } from \"../../ShaderPrograms/DeferredRendering/GeometryPassShaderProgram\";\nimport Texture from \"../../../AssetHandling/Textures/Texture\";\nimport Scene from \"../../Scene\";\nimport { gl } from \"../../Renderer\";\n\nexport default class GeometryRenderPass {\n\toutputFramebuffer: Framebuffer;\n\n\tconstructor() {\n\t\tthis.outputFramebuffer = new Framebuffer(\n\t\t\t100,\n\t\t\t100,\n\t\t\t[\n\t\t\t\tnew Texture(false, gl.RGBA32F, gl.RGBA, gl.FLOAT),\n\t\t\t\tnew Texture(false, gl.RGBA32F, gl.RGBA, gl.FLOAT),\n\t\t\t\tnew Texture(false),\n\t\t\t\tnew Texture(false),\n\t\t\t],\n\t\t\tnull\n\t\t);\n\t}\n\n\tsetResolution(x: number, y: number) {\n\t\tthis.outputFramebuffer.setProportions(x, y);\n\t}\n\n\tdraw(scene: Scene, camera: Camera) {\n\t\tgeometryPassShaderProgram.use();\n\t\tgl.viewport(0.0, 0.0, this.outputFramebuffer.getWidth(), this.outputFramebuffer.getHeight());\n\n\t\t// Bind gbuffer and clear that with 0,0,0,0 (the alpha = 0 is important to be able to identify fragments in the lighting pass that have not been written with geometry)\n\t\tthis.outputFramebuffer.bind(gl.FRAMEBUFFER);\n\t\tgl.clearColor(0.0, 0.0, 0.0, 0.0);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n\n\t\tgl.disable(gl.BLEND);\n\n\t\tcamera.bindViewProjMatrix(geometryPassShaderProgram.getUniformLocation(\"viewProjMatrix\")[0]);\n\n\t\tscene.renderScene(geometryPassShaderProgram, true);\n\t}\n}\n","import ShaderProgram from \"../ShaderProgram\";\nimport { screenQuadVertexSrc } from \"../ScreenQuadShaderProgram\";\nimport { gl } from \"../../Renderer\";\n\nexport const pointLightsToAllocate: number = 2;\nexport let pointShadowsToAllocate: number = 2;\n\nlet lightingFragmentShaderSrc: string;\n\nclass LightingPassShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\"LightingPass\", screenQuadVertexSrc, lightingFragmentShaderSrc);\n\n\t\tthis.use();\n\n\t\tthis.setUniformLocation(\"gPosition\");\n\t\tthis.setUniformLocation(\"gNormal\");\n\t\tthis.setUniformLocation(\"gColourSpec\");\n\t\tthis.setUniformLocation(\"gEmission\");\n\t\tthis.setUniformLocation(\"depthMap\");\n\n\t\tgl.uniform1i(this.getUniformLocation(\"gPosition\")[0], 0);\n\t\tgl.uniform1i(this.getUniformLocation(\"gNormal\")[0], 1);\n\t\tgl.uniform1i(this.getUniformLocation(\"gColourSpec\")[0], 2);\n\t\tgl.uniform1i(this.getUniformLocation(\"gEmission\")[0], 3);\n\t\tgl.uniform1i(this.getUniformLocation(\"depthMap\")[0], 4);\n\n\t\tfor (let i = 0; i < pointShadowsToAllocate; i++) {\n\t\t\tthis.setUniformLocation(\"pointDepthMaps[\" + i + \"]\");\n\t\t\tgl.uniform1i(this.getUniformLocation(\"pointDepthMaps[\" + i + \"]\")[0], 5 + i);\n\t\t}\n\n\t\tfor (let i = 0; i < pointLightsToAllocate; i++) {\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].position\");\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].colour\");\n\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].constant\");\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].linear\");\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].quadratic\");\n\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].pointDepthMapIndex\");\n\t\t}\n\n\t\tthis.setUniformLocation(\"directionalLight.direction\");\n\t\tthis.setUniformLocation(\"directionalLight.colour\");\n\t\tthis.setUniformLocation(\"directionalLight.ambientMultiplier\");\n\t\tthis.setUniformLocation(\"nrOfPointLights\");\n\t\tthis.setUniformLocation(\"camPos\");\n\t\tthis.setUniformLocation(\"lightSpaceMatrix\");\n\t}\n\n\tsetupVertexAttributePointers(): void {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 4 * 4;\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\n\t\tgl.enableVertexAttribArray(1);\n\t}\n}\n\nexport let lightingPassShaderProgram = null;\n\nexport let createLightingPassShaderProgram = function () {\n\tpointShadowsToAllocate = Math.min(\n\t\tpointShadowsToAllocate,\n\t\tgl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS) - 5\n\t);\n\n\tlightingFragmentShaderSrc =\n\t\t`#version 300 es\nprecision highp float;\n\n#define NR_POINT_LIGHTS ` +\n\t\tpointLightsToAllocate +\n\t\t`\n#define NR_POINT_SHADOWS ` +\n\t\tpointShadowsToAllocate +\n\t\t`\n\nin vec2 texCoords;\n\nlayout (location = 0) out vec4 final_colour;\n\nuniform sampler2D gPosition;\nuniform sampler2D gNormal;\nuniform sampler2D gColourSpec;\nuniform sampler2D gEmission;\nuniform sampler2D depthMap;\nuniform samplerCube pointDepthMaps[NR_POINT_SHADOWS];\n\nstruct PointLight {\n\tvec3 position;\n\tvec3 colour;\n\n\tfloat constant;\n\tfloat linear;\n\tfloat quadratic;\n\n\tint pointDepthMapIndex;\n};\n\nstruct DirectionalLight {\n\tvec3 direction;\n\tvec3 colour;\n\tfloat ambientMultiplier;\n};\n\nuniform DirectionalLight directionalLight;\nuniform PointLight pointLights[NR_POINT_LIGHTS];\nuniform int nrOfPointLights;\nuniform vec3 camPos; //Used for specular lighting\nuniform mat4 lightSpaceMatrix; // Used for shadow fragment position\n\nvec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 cameraDir, vec3 diffuse, float specular, float shininess, vec4 lightSpaceFragPos);\nvec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 cameraDir, vec3 diffuse, float specular, float shininess);\nfloat CalcShadow(vec4 lightSpaceFragPos, vec3 normal);\nfloat CalcPointShadow(vec3 fragPos, PointLight light);\n\nvoid main() {\n\t// Discard fragment if normal alpha is 0\n\tvec4 fragNormalWithAlpha = texture(gNormal, texCoords);\n\tif (fragNormalWithAlpha.a <= 0.0001) {\n\t\tdiscard;\n\t}\n\t\n\tvec3 fragPos = texture(gPosition, texCoords).rgb;\n\tvec3 fragNormal = fragNormalWithAlpha.rgb;\n\tfloat shininess = 32.0f;\n\tvec3 diffuse = texture(gColourSpec, texCoords).rgb;\n\tfloat specular = texture(gColourSpec, texCoords).a;\n\tvec3 emission = texture(gEmission, texCoords).rgb;\n\tvec4 lightSpaceFragPos = (lightSpaceMatrix * vec4(fragPos, 1.0f));\n\t\n\tvec3 cameraDir = normalize(camPos - fragPos); //Direction vector from fragment to camera\n\t\n    vec3 result = vec3(0.0f);\n\tresult += CalcDirectionalLight(directionalLight, fragNormal, cameraDir, diffuse, specular, shininess, lightSpaceFragPos);\n\n\tfor (int i = 0; i < nrOfPointLights; i++) {\n\t\tresult += CalcPointLight(pointLights[i], fragNormal, fragPos, cameraDir, diffuse, specular, shininess);\n\t}\n\n\tfinal_colour = vec4(result + emission, 1.0f); // Set colour of fragment. Since we use screen door transparency, do not use alpha value\n\n\t// final_colour.rgb = fragPos;\n\t// final_colour.rgb = fragNormal;\n\t// final_colour.rgb = diffuse;\n\t// final_colour.rgb = vec3(specular, specular, specular);\n\t// final_colour.rgb = texture(depthMap, texCoords).rrr;\n}\n\n// Calculates the colour when using a directional light\nvec3 CalcDirectionalLight(DirectionalLight light, vec3 normal, vec3 cameraDir, vec3 diffuse, float specular, float shininess, vec4 lightSpaceFragPos) {\n\tvec3 lightDir = normalize(-light.direction); //light direction from the fragment position\n\n\t// Diffuse shading\n\tfloat diff = max(dot(normal, lightDir), 0.0);\n\tfloat oppositeDiff = min(dot(normal, lightDir), 0.0);\n\toppositeDiff += 1.0;\n\toppositeDiff *= 0.2;\n\n\t// Specular shading\n\tvec3 reflectDir = reflect(-lightDir, normal);\n\tfloat spec = pow(max(dot(cameraDir, reflectDir), 0.0), shininess);\n\n\t// Combine results\t\n\tvec3 ambient = diffuse * light.ambientMultiplier; //Ambient lighting\n\tvec3 finalDiffuse = light.colour * diff * diffuse;\n\tvec3 finalSpecular = light.colour * spec * specular;\n\t\n\tfloat shadow = CalcShadow(lightSpaceFragPos, normal);\n\tvec3 lighting = (ambient + (1.1f - shadow) * (finalDiffuse + finalSpecular));\n\tlighting += oppositeDiff * ambient;\n\treturn lighting;\n}\n\nfloat CalcShadow(vec4 lightSpaceFragPos, vec3 normal) {\n\t// perform perspective divide\n    vec3 projCoords = lightSpaceFragPos.xyz / lightSpaceFragPos.w;\n\n    // transform to [0,1] range\n    projCoords = projCoords * 0.5 + 0.5;\n\n\tif (projCoords.z > 1.0) {\n\t\treturn 0.0;\n\t}\n\n    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)\n    float closestDepth = texture(depthMap, projCoords.xy).r; \n\n    // get depth of current fragment from light's perspective\n    float currentDepth = projCoords.z;\n\n    // check whether current frag pos is in shadow\n\tfloat bias = max(0.005 * (1.0 - dot(normal, directionalLight.direction)), 0.005);\n\t// float bias = 0.0;\n\t\n\tfloat shadow = 0.0;\n\tivec2 textureSize = textureSize(depthMap, 0);\n\tvec2 texelSize = vec2(1.0 / float(textureSize.x), 1.0 / float(textureSize.y));\n\tfor(int x = -1; x <= 1; ++x)\n\t{\n\t\tfor(int y = -1; y <= 1; ++y)\n\t\t{\n\t\t\tfloat pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r; \n\t\t\tshadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;\n\t\t}    \n\t}\n\tshadow = shadow / 9.0;\n\n    return shadow;\n}\n\n// Calculates the colour when using a point light.\nvec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 cameraDir, vec3 diffuse, float specular, float shininess) {\n\tif (light.pointDepthMapIndex >= 0 && light.pointDepthMapIndex < NR_POINT_SHADOWS && CalcPointShadow(fragPos, light) == 1.0) {\n\t\treturn vec3(0.0, 0.0, 0.0);\n\t} \n\n\tvec3 lightDir = normalize(light.position - fragPos); //light direction from the fragment position\n\n\t// Diffuse shading\n\tfloat diff = max(dot(normal, lightDir), 0.0);\n\n\t// Specular shading\n\tvec3 reflectDir = reflect(-lightDir, normal);\n\tfloat spec = pow(max(dot(cameraDir, reflectDir), 0.0), shininess);\n\n\t// Attenuation\n\tfloat distance = length(light.position - fragPos);\n\tfloat attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n\t\n\t// Combine results\n\tvec3 finalDiffuse = light.colour * diff * diffuse;\n\tvec3 finalSpecular = light.colour * spec * specular;\n\tfinalDiffuse *= attenuation;\n\tfinalSpecular *= attenuation;\n\treturn finalDiffuse + finalSpecular;\n}\n\nconst float far_plane = 100.0;\n\nfloat CalcPointShadow(vec3 fragPos, PointLight light) {\n\t// get vector between fragment position and light position\n    vec3 fragToLight = fragPos - light.position;\n\tfragToLight.y *= -1.0;\n\tfragToLight.z *= -1.0;\n    // use the light to fragment vector to sample from the depth map\n    float closestDepth = 1.0;`;\n\t// Below is ugly, but I have to unroll the loop to be able to acces the pointDepthMaps array with a compile time index, as run-time index is not allowed to access a sampler\n\tfor (let i = 0; i < pointShadowsToAllocate; i++) {\n\t\tif (i == 0) {\n\t\t\tlightingFragmentShaderSrc +=\n\t\t\t\t`\n\tif (light.pointDepthMapIndex == ` +\n\t\t\t\ti +\n\t\t\t\t`) {\n\t\tclosestDepth = texture(pointDepthMaps[` +\n\t\t\t\ti +\n\t\t\t\t`], fragToLight).r;\n\t}\n\t`;\n\t\t} else {\n\t\t\tlightingFragmentShaderSrc +=\n\t\t\t\t`\n\telse if (light.pointDepthMapIndex == ` +\n\t\t\t\ti +\n\t\t\t\t`) {\n\t\tclosestDepth = texture(pointDepthMaps[` +\n\t\t\t\ti +\n\t\t\t\t`], fragToLight).r;\n\t}\n\t`;\n\t\t}\n\t}\n\n\tlightingFragmentShaderSrc += `\n    // it is currently in linear range between [0,1]. Re-transform back to original value\n    closestDepth *= far_plane;\n    // now get current linear depth as the length between the fragment and light position\n    float currentDepth = length(fragToLight);\n    // now test for shadows\n    float bias = 0.0;\n    float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;\n\n    return shadow;\n}\n`;\n\n\tlightingPassShaderProgram = new LightingPassShaderProgram();\n};\n","import Camera from \"../../../Objects/Camera\";\nimport Framebuffer from \"../../Framebuffers/Framebuffer\";\nimport ScreenQuad from \"../../../Objects/GraphicsObjects/ScreenQuad\";\nimport {\n\tlightingPassShaderProgram,\n\tpointShadowsToAllocate,\n} from \"../../ShaderPrograms/DeferredRendering/LightingPassShaderProgram\";\nimport Texture from \"../../../AssetHandling/Textures/Texture\";\nimport Scene from \"../../Scene\";\nimport { vec3 } from \"gl-matrix\";\nimport { gl } from \"../../Renderer\";\n\nexport default class LightingRenderPass {\n\tprivate screenQuad: ScreenQuad;\n\n\tconstructor(inputTextures: Texture[]) {\n\t\tthis.screenQuad = new ScreenQuad(lightingPassShaderProgram, inputTextures);\n\t}\n\n\tdraw(scene: Scene, camera: Camera) {\n\t\t// Disable depth testing for screen quad(s) rendering\n\t\tgl.disable(gl.DEPTH_TEST);\n\n\t\t// ---- Lighting pass ----\n\t\tlightingPassShaderProgram.use();\n\n\t\tgl.uniform3fv(lightingPassShaderProgram.getUniformLocation(\"camPos\")[0], camera.getPosition());\n\t\tscene.directionalLight.bind(lightingPassShaderProgram);\n\t\tscene.directionalLight.calcAndSendLightSpaceMatrix(\n\t\t\tvec3.zero(vec3.create()),\n\t\t\t40.0,\n\t\t\tlightingPassShaderProgram.getUniformLocation(\"lightSpaceMatrix\")[0]\n\t\t);\n\t\t// Point lights\n\t\tgl.uniform1i(lightingPassShaderProgram.getUniformLocation(\"nrOfPointLights\")[0], scene.pointLights.length);\n\n\t\t// Bind pointLights, with counter as depthMapIndex\n\t\tlet counter = 0;\n\t\tfor (let i = 0; i < scene.pointLights.length; i++) {\n\t\t\tscene.pointLights[i].bind(i, counter, lightingPassShaderProgram);\n\t\t\tif (scene.pointLights[i].castShadow) {\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\n\t\t// Bind all textures except the point light depth maps\n\t\tfor (let i = 0; i < this.screenQuad.textures.length; i++) {\n\t\t\tthis.screenQuad.textures[i].bind(i);\n\t\t}\n\n\t\t// Then bind the point light depth maps\n\t\tcounter = this.screenQuad.textures.length;\n\t\tfor (const pointLight of scene.pointLights) {\n\t\t\tif (counter - this.screenQuad.textures.length >= pointShadowsToAllocate) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (pointLight.castShadow) {\n\t\t\t\tpointLight.pointShadowDepthMap.bind(counter++);\n\t\t\t}\n\t\t}\n\n\t\tthis.screenQuad.draw(false);\n\t\t// -----------------------\n\n\t\t// Enable depth test again\n\t\tgl.enable(gl.DEPTH_TEST);\n\t}\n}\n","import { gl } from \"../../Renderer\";\nimport ShaderProgram from \"../ShaderProgram\";\n\nconst shadowVertexShaderSrc: string = `#version 300 es\n// If inputs change, also update ShadowPass::setupVertexAttributePointers to match\nlayout (location = 0) in vec3 inPosition;\nlayout (location = 1) in vec3 inNormal;\nlayout (location = 2) in vec2 inTexCoords;\n\nuniform mat4 lightSpaceMatrix;\nuniform mat4 modelMatrix;\nuniform mat4 textureMatrix;\n\nout vec2 texCoords;\n\nvoid main()\n{\n    gl_Position = lightSpaceMatrix * modelMatrix * vec4(inPosition, 1.0);\n\ttexCoords = vec2(textureMatrix * vec4(inTexCoords, 0.0, 1.0));\n}`;\n\nexport const shadowFragmentShaderSrc: string = `#version 300 es\nprecision highp float;\n\nin vec2 texCoords;\n\nuniform sampler2D diffuse;\n\nmat4 thresholdMatrix = mat4(\n\t1.0, 9.0, 3.0, 11.0,\n\t13.0, 5.0, 15.0, 7.0,\n\t4.0, 12.0, 2.0, 10.0,\n\t16.0, 8.0, 14.0, 6.0\n);\n\n//out vec4 final_colour;\n\nvoid main()\n{\n    float opacity = texture(diffuse, texCoords).a;\n\n\tfloat threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\n    if (threshold >= opacity) {\n        discard;\n    }\n\n    //final_colour = vec4(1.0, 1.0, 1.0, 1.0);\n}`;\n\nclass DirectionalShadowShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\"ShadowPass\", shadowVertexShaderSrc, shadowFragmentShaderSrc);\n\n\t\tthis.use();\n\n\t\tthis.setUniformLocation(\"lightSpaceMatrix\");\n\t\tthis.setUniformLocation(\"modelMatrix\");\n\t\tthis.setUniformLocation(\"textureMatrix\");\n\t}\n\n\tsetupVertexAttributePointers(): void {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 8 * 4;\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\n\t\tgl.vertexAttribPointer(1, 3, gl.FLOAT, false, stride, 3 * 4);\n\t\tgl.enableVertexAttribArray(1);\n\n\t\tgl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 6 * 4);\n\t\tgl.enableVertexAttribArray(2);\n\t}\n}\n\nexport let directionalShadowShaderProgram = null;\n\nexport let createDirectionalShadowShaderProgram = function () {\n\tdirectionalShadowShaderProgram = new DirectionalShadowShaderProgram();\n};\n","import Framebuffer from \"../../Framebuffers/Framebuffer\";\nimport { directionalShadowShaderProgram } from \"../../ShaderPrograms/ShadowMapping/DirectionalShadowShaderProgram\";\nimport Texture from \"../../../AssetHandling/Textures/Texture\";\nimport Scene from \"../../Scene\";\nimport Camera from \"../../../Objects/Camera\";\nimport { vec3 } from \"gl-matrix\";\nimport { gl } from \"../../Renderer\";\n\nexport default class DirectionalShadowRenderPass {\n\t// ---- Shadow mapping ----\n\tprivate shadowResolution: number;\n\tprivate shadowOffset: number;\n\tshadowBuffer: Framebuffer;\n\t// ------------------------\n\n\tconstructor() {\n\t\t// ---- Shadow mapping ----\n\t\tthis.shadowResolution = 4096;\n\t\tthis.shadowOffset = 40.0;\n\t\tthis.shadowBuffer = new Framebuffer(\n\t\t\tthis.shadowResolution,\n\t\t\tthis.shadowResolution,\n\t\t\t[],\n\t\t\tnew Texture(false, gl.DEPTH_COMPONENT32F, gl.DEPTH_COMPONENT, gl.FLOAT)\n\t\t);\n\t\t// ------------------------\n\t}\n\n\tsetShadowMappingResolution(res: number) {\n\t\tthis.shadowResolution = res;\n\t\tthis.shadowBuffer.setProportions(res, res);\n\t}\n\n\tdraw(scene: Scene) {\n\t\tthis.shadowBuffer.bind(gl.FRAMEBUFFER);\n\n\t\tgl.enable(gl.DEPTH_TEST);\n\n\t\t// ---- Shadow pass ----\n\t\tdirectionalShadowShaderProgram.use();\n\t\tgl.viewport(0, 0, this.shadowResolution, this.shadowResolution);\n\t\tgl.clearColor(1.0, 1.0, 1.0, 1.0);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n\t\t// gl.enable(gl.CULL_FACE);\n\t\t// gl.cullFace(gl.FRONT);\n\n\t\t//Set uniforms\n\t\tscene\n\t\t\t.directionalLight\n\t\t\t.calcAndSendLightSpaceMatrix(\n\t\t\t\tvec3.zero(vec3.create()),\n\t\t\t\tthis.shadowOffset,\n\t\t\t\tdirectionalShadowShaderProgram.getUniformLocation(\"lightSpaceMatrix\")[0]\n\t\t\t);\n\n\t\t//Render shadow pass\n\t\tscene.renderScene(directionalShadowShaderProgram, false);\n\n\t\t// gl.disable(gl.CULL_FACE);\n\t\t// ---------------------\n\t}\n}\n","import { ReadonlyVec3, mat4, vec3 } from \"gl-matrix\";\nimport { gl } from \"../Renderer/Renderer\";\n\nexport default class Camera {\n\tprivate pos: vec3;\n\tprivate dir: vec3;\n\tprivate up: vec3;\n\tprivate fov: number;\n\tprivate ratio: number;\n\tprivate farPlaneDistance: number;\n\tprivate viewMatrixNeedsUpdate: boolean;\n\tprivate projMatrixNeedsUpdate: boolean;\n\tprivate viewMatrix: mat4;\n\tprivate projectionMatrix: mat4;\n\tprivate viewProjMatrix: mat4;\n\n\tconstructor() {\n\t\t// ----View----\n\t\tthis.pos = vec3.create();\n\t\tthis.dir = vec3.fromValues(0.0, 0.0, -1.0);\n\t\tthis.up = vec3.fromValues(0.0, 1.0, 0.0);\n\t\tthis.viewMatrix = mat4.create();\n\t\tthis.viewMatrixNeedsUpdate = true;\n\t\t// ------------\n\n\t\t// ----Proj----\n\t\tthis.projectionMatrix = mat4.create();\n\t\tthis.projMatrixNeedsUpdate = true;\n\t\tthis.ratio = 16.0 / 9.0;\n\t\tthis.fov = (85.0 * Math.PI) / 180;\n\t\tthis.farPlaneDistance = 1000.0;\n\t\t// ------------\n\n\t\tthis.viewProjMatrix = mat4.create();\n\t}\n\n\tgetViewProjMatrix(): mat4 {\n\t\tthis.updateViewProjMatrix();\n\t\treturn this.viewProjMatrix;\n\t}\n\n\tgetViewMatrix(): mat4 {\n\t\tthis.updateViewProjMatrix();\n\t\treturn this.viewMatrix;\n\t}\n\n\tgetProjectionMatrix(): mat4 {\n\t\tthis.updateViewProjMatrix();\n\t\treturn this.projectionMatrix;\n\t}\n\n\tgetFov(): number {\n\t\treturn this.fov;\n\t}\n\n\tgetPosition(): vec3 {\n\t\treturn this.pos;\n\t}\n\n\tgetDir(): ReadonlyVec3 {\n\t\treturn this.dir;\n\t}\n\n\tgetRight(): vec3 {\n\t\tlet returnVec = vec3.create();\n\t\tvec3.cross(returnVec, this.dir, this.up);\n\t\tvec3.normalize(returnVec, returnVec);\n\t\treturn returnVec;\n\t}\n\n\tsetPosition(pos: ReadonlyVec3) {\n\t\tvec3.copy(this.pos, pos);\n\t\tthis.viewMatrixNeedsUpdate = true;\n\t}\n\n\ttranslate(translation: ReadonlyVec3) {\n\t\tvec3.add(this.pos, this.pos, translation);\n\t\tthis.viewMatrixNeedsUpdate = true;\n\t}\n\n\tsetDir(dir: vec3) {\n\t\tvec3.normalize(this.dir, dir);\n\t\tthis.viewMatrixNeedsUpdate = true;\n\t}\n\n\tsetUp(up: vec3) {\n\t\tvec3.normalize(this.up, up);\n\t\tthis.viewMatrixNeedsUpdate = true;\n\t}\n\n\tsetPitchJawDegrees(pitch: number, jaw: number) {\n\t\tvec3.set(\n\t\t\tthis.dir,\n\t\t\tMath.cos((pitch * Math.PI) / 180) * Math.sin((jaw * Math.PI) / 180),\n\t\t\tMath.sin((pitch * Math.PI) / 180),\n\t\t\tMath.cos((pitch * Math.PI) / 180) * Math.cos((jaw * Math.PI) / 180)\n\t\t);\n\t\tthis.viewMatrixNeedsUpdate = true;\n\t}\n\n\tsetPitchJawRadians(pitch: number, jaw: number) {\n\t\tvec3.set(\n\t\t\tthis.dir,\n\t\t\tMath.cos(pitch) * Math.sin(jaw),\n\t\t\tMath.sin(pitch),\n\t\t\tMath.cos(pitch) * Math.cos(jaw)\n\t\t);\n\t\tthis.viewMatrixNeedsUpdate = true;\n\t}\n\n\tsetFOV(fov: number) {\n\t\tthis.fov = (fov * Math.PI) / 180.0;\n\t\tthis.projMatrixNeedsUpdate = true;\n\t}\n\n\tsetAspectRatio(ratio: number) {\n\t\tthis.ratio = ratio;\n\t\tthis.projMatrixNeedsUpdate = true;\n\t}\n\n\tsetFarPlaneDistance(distance: number) {\n\t\tthis.farPlaneDistance = distance;\n\t\tthis.projMatrixNeedsUpdate;\n\t}\n\n\tprivate updateViewProjMatrix() {\n\t\tlet updateViewProj = false;\n\t\tif (this.viewMatrixNeedsUpdate) {\n\t\t\tmat4.lookAt(this.viewMatrix, this.pos, vec3.add(vec3.create(), this.pos, this.dir), this.up);\n\t\t\tthis.viewMatrixNeedsUpdate = false;\n\t\t\tupdateViewProj = true;\n\t\t}\n\n\t\tif (this.projMatrixNeedsUpdate) {\n\t\t\tmat4.perspective(this.projectionMatrix, this.fov, this.ratio, 0.01, this.farPlaneDistance);\n\t\t\tthis.projMatrixNeedsUpdate = false;\n\t\t\tupdateViewProj = true;\n\t\t}\n\n\t\tif (updateViewProj) {\n\t\t\tmat4.mul(this.viewProjMatrix, this.projectionMatrix, this.viewMatrix);\n\t\t}\n\t}\n\n\tbindViewProjMatrix(uniformLocation: WebGLUniformLocation, skybox: boolean = false) {\n\t\tthis.updateViewProjMatrix();\n\n\t\tif (skybox) {\n\t\t\tlet tempViewMatrix = mat4.lookAt(mat4.create(), vec3.create(), this.dir, this.up);\n\t\t\tlet tempViewProj = mat4.mul(mat4.create(), this.projectionMatrix, tempViewMatrix);\n\n\t\t\tgl.uniformMatrix4fv(uniformLocation, false, tempViewProj);\n\t\t} else {\n\t\t\tgl.uniformMatrix4fv(uniformLocation, false, this.viewProjMatrix);\n\t\t}\n\t}\n}\n","import { gl } from \"../../Renderer\";\nimport ShaderProgram from \"../ShaderProgram\";\n\nconst pointShadowVertexShaderSrc: string = `#version 300 es\n// If inputs change, also update PointShadowPass::setupVertexAttributePointers to match\nlayout (location = 0) in vec3 inPosition;\nlayout (location = 1) in vec3 inNormal;\nlayout (location = 2) in vec2 inTexCoords;\n\nuniform mat4 lightSpaceMatrix;\nuniform mat4 modelMatrix;\nuniform mat4 textureMatrix;\n\nout vec2 texCoords;\nout vec3 fragPos;\n\nvoid main()\n{\n    gl_Position = lightSpaceMatrix * modelMatrix * vec4(inPosition, 1.0);\n    fragPos = vec3(modelMatrix * vec4(inPosition, 1.0));\n\ttexCoords = vec2(textureMatrix * vec4(inTexCoords, 0.0, 1.0));\n}`;\n\nconst pointShadowFragmentShaderSrc: string = `#version 300 es\nprecision highp float;\n\nin vec2 texCoords;\nin vec3 fragPos;\n\nuniform sampler2D diffuse;\nuniform vec3 cameraPos;\n\nmat4 thresholdMatrix = mat4(\n\t1.0, 9.0, 3.0, 11.0,\n\t13.0, 5.0, 15.0, 7.0,\n\t4.0, 12.0, 2.0, 10.0,\n\t16.0, 8.0, 14.0, 6.0\n);\n\n\nconst float far_plane = 100.0;\n\nvoid main()\n{\n    float opacity = texture(diffuse, texCoords).a;\n\n\tfloat threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\n    if (threshold >= opacity) {\n        discard;\n    }\n\n    // get distance between fragment and light source\n    float lightDistance = length(fragPos - cameraPos);\n    \n    // map to [0;1] range by dividing by far_plane\n    lightDistance = lightDistance / far_plane;\n    \n    // write this as modified depth\n    gl_FragDepth = lightDistance;\n}`;\n\nclass PointShadowShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\"PointShadowPass\", pointShadowVertexShaderSrc, pointShadowFragmentShaderSrc);\n\n\t\tthis.use();\n\n\t\tthis.setUniformLocation(\"lightSpaceMatrix\");\n\t\tthis.setUniformLocation(\"modelMatrix\");\n\t\tthis.setUniformLocation(\"textureMatrix\");\n\t\tthis.setUniformLocation(\"cameraPos\");\n\t}\n\n\tsetupVertexAttributePointers(): void {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 8 * 4;\n\t\tgl.vertexAttribPointer(0, 3, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\n\t\tgl.vertexAttribPointer(1, 3, gl.FLOAT, false, stride, 3 * 4);\n\t\tgl.enableVertexAttribArray(1);\n\n\t\tgl.vertexAttribPointer(2, 2, gl.FLOAT, false, stride, 6 * 4);\n\t\tgl.enableVertexAttribArray(2);\n\t}\n}\n\nexport let pointShadowShaderProgram = null;\n\nexport let createPointShadowShaderProgram = function () {\n\tpointShadowShaderProgram = new PointShadowShaderProgram();\n};\n","import { gl } from \"../../Renderer\";\nimport Scene from \"../../Scene\";\nimport Camera from \"../../../Objects/Camera\";\nimport { vec3 } from \"gl-matrix\";\nimport { pointShadowShaderProgram } from \"../../ShaderPrograms/ShadowMapping/PointShadowShaderProgram\";\nimport { pointShadowsToAllocate } from \"../../ShaderPrograms/DeferredRendering/LightingPassShaderProgram\";\n\nexport default class PointShadowRenderPass {\n\tprivate shadowResolution: number;\n\n\tconstructor() {\n\t\tthis.shadowResolution = 1023;\n\t}\n\n\tsetShadowMappingResolution(res: number) {\n\t\tthis.shadowResolution = res;\n\t}\n\n\tdraw(scene: Scene) {\n\t\tgl.enable(gl.DEPTH_TEST);\n\t\tgl.enable(gl.CULL_FACE);\n\t\tgl.cullFace(gl.FRONT);\n\n\t\tlet pointLightCamera = new Camera();\n\t\tpointLightCamera.setFOV(90);\n\t\tpointLightCamera.setAspectRatio(1);\n\t\tpointLightCamera.setFarPlaneDistance(100.0);\n\n\t\tconst directions = [\n\t\t\tvec3.fromValues(1.0, 0.0, 0.0),\n\t\t\tvec3.fromValues(-1.0, 0.0, 0.0),\n\t\t\tvec3.fromValues(0.0, -1.0, 0.0),\n\t\t\tvec3.fromValues(0.0, 1.0, 0.0),\n\t\t\tvec3.fromValues(0.0, 0.0, -1.0),\n\t\t\tvec3.fromValues(0.0, 0.0, 1.0),\n\t\t];\n\t\tconst ups = [\n\t\t\tvec3.fromValues(0.0, 1.0, 0.0),\n\t\t\tvec3.fromValues(0.0, 1.0, 0.0),\n\t\t\tvec3.fromValues(0.0, 0.0, -1.0),\n\t\t\tvec3.fromValues(0.0, 0.0, 1.0),\n\t\t\tvec3.fromValues(0.0, 1.0, 0.0),\n\t\t\tvec3.fromValues(0.0, 1.0, 0.0),\n\t\t];\n\n\t\tlet counter = 0;\n\t\tfor (let pointLight of scene.pointLights) {\n\t\t\tif (counter >= pointShadowsToAllocate) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (pointLight.castShadow /*&& !pointLight.depthMapGenerated*/) {\n\t\t\t\tcounter++;\n\t\t\t\t// pointLight.depthMapGenerated = true;\n\n\t\t\t\tpointLightCamera.setPosition(pointLight.position);\n\n\t\t\t\tpointLight.pointShadowBuffer.bind(gl.FRAMEBUFFER);\n\t\t\t\tpointLight.pointShadowDepthMap.setTextureData(\n\t\t\t\t\tnull,\n\t\t\t\t\tthis.shadowResolution,\n\t\t\t\t\tthis.shadowResolution\n\t\t\t\t); // Make sure the textures are correct size. TOOD: Is this super slow?\n\n\t\t\t\tfor (let i = 0; i < directions.length; i++) {\n\t\t\t\t\tpointLightCamera.setDir(directions[i]);\n\t\t\t\t\tpointLightCamera.setUp(ups[i]);\n\t\t\t\t\tgl.framebufferTexture2D(\n\t\t\t\t\t\tgl.FRAMEBUFFER,\n\t\t\t\t\t\tgl.DEPTH_ATTACHMENT,\n\t\t\t\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n\t\t\t\t\t\tpointLight.pointShadowDepthMap.texture,\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\n\t\t\t\t\t// ---- Shadow pass ----\n\t\t\t\t\tpointShadowShaderProgram.use();\n\t\t\t\t\tgl.viewport(0, 0, this.shadowResolution, this.shadowResolution);\n\t\t\t\t\tgl.clear(gl.DEPTH_BUFFER_BIT);\n\n\t\t\t\t\t//Set uniforms\n\t\t\t\t\tpointLightCamera.bindViewProjMatrix(\n\t\t\t\t\t\tpointShadowShaderProgram.getUniformLocation(\"lightSpaceMatrix\")[0]\n\t\t\t\t\t);\n\t\t\t\t\tgl.uniform3fv(\n\t\t\t\t\t\tpointShadowShaderProgram.getUniformLocation(\"cameraPos\")[0],\n\t\t\t\t\t\tpointLightCamera.getPosition()\n\t\t\t\t\t);\n\n\t\t\t\t\t//Render shadow pass\n\t\t\t\t\tscene.renderScene(pointShadowShaderProgram, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tgl.disable(gl.CULL_FACE);\n\t}\n}\n","import { gl } from \"../../Renderer\";\nimport { pointLightsToAllocate, pointShadowsToAllocate } from \"../DeferredRendering/LightingPassShaderProgram\";\nimport { screenQuadVertexSrc } from \"../ScreenQuadShaderProgram\";\nimport ShaderProgram from \"../ShaderProgram\";\n\nlet volumetricLightingFragmentShaderSrc: string;\n\nclass VolumetricLightingShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\n\t\t\t\"VolumetricLightingShaderProgram\",\n\t\t\tscreenQuadVertexSrc,\n\t\t\tvolumetricLightingFragmentShaderSrc,\n\t\t\tfalse\n\t\t);\n\n\t\tthis.use();\n\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\n\t\tthis.setUniformLocation(\"cameraPos\");\n\t\tthis.setUniformLocation(\"fogMaxDistance\");\n\t\tthis.setUniformLocation(\"fogDensity\");\n\t\tthis.setUniformLocation(\"gPosition\");\n\t\tthis.setUniformLocation(\"depthMap\");\n\n\t\tgl.uniform1i(this.getUniformLocation(\"gPosition\")[0], 0);\n\t\tgl.uniform1i(this.getUniformLocation(\"depthMap\")[0], 1);\n\t\t\n\t\tthis.setUniformLocation(\"nrOfPointLights\");\n\n\t\tfor (let i = 0; i < pointShadowsToAllocate; i++) {\n\t\t\tthis.setUniformLocation(\"pointDepthMaps[\" + i + \"]\");\n\t\t\tgl.uniform1i(this.getUniformLocation(\"pointDepthMaps[\" + i + \"]\")[0], i + 2);\n\t\t}\n\n\t\tfor (let i = 0; i < pointLightsToAllocate; i++) {\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].position\");\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].colour\");\n\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].constant\");\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].linear\");\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].quadratic\");\n\n\t\t\tthis.setUniformLocation(\"pointLights[\" + i + \"].pointDepthMapIndex\");\n\t\t}\n\n\t\tthis.setUniformLocation(\"directionalLight.direction\");\n\t\tthis.setUniformLocation(\"directionalLight.colour\");\n\t\tthis.setUniformLocation(\"directionalLight.ambientMultiplier\");\n\t\tthis.setUniformLocation(\"lightSpaceMatrix\");\n\t}\n\n\tsetupVertexAttributePointers(): void {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 4 * 4;\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\n\t\tgl.enableVertexAttribArray(1);\n\t}\n}\n\nexport let volumetricLightingShaderProgram: VolumetricLightingShaderProgram = null;\n\nexport let createVolumetricLightingShaderProgram = function () {\n\tvolumetricLightingFragmentShaderSrc =\n\t\t`#version 300 es\nprecision highp float;\n\n#define NR_POINT_LIGHTS ` +\n\t\tpointLightsToAllocate +\n\t\t`\n#define NR_POINT_SHADOWS ` +\n\t\tpointShadowsToAllocate +\n\t\t`\nin vec2 texCoords;\n\nuniform mat4 viewProjMatrix;\nuniform vec3 cameraPos;\nuniform float fogMaxDistance;\nuniform float fogDensity;\n\nuniform sampler2D gPosition;\nuniform sampler2D depthMap;\nuniform samplerCube pointDepthMaps[NR_POINT_SHADOWS];\n\nstruct PointLight {\n\tvec3 position;\n\tvec3 colour;\n\n\tfloat constant;\n\tfloat linear;\n\tfloat quadratic;\n\n\tint pointDepthMapIndex;\n};\n\nstruct DirectionalLight {\n\tvec3 direction;\n\tvec3 colour;\n\tfloat ambientMultiplier;\n};\n\nuniform DirectionalLight directionalLight;\nuniform mat4 lightSpaceMatrix;\nuniform PointLight pointLights[NR_POINT_LIGHTS];\nuniform int nrOfPointLights;\n\nout vec4 FragColor;\nconst float far_plane = 100.0;\n\nconst float scattering = 0.0;\nconst float steps = 20.0;\n\nconst mat4 offsetMatrix = mat4(\n\t0.0f, 0.5f, 0.125f, 0.625f,\n\t0.75f, 0.22f, 0.875f, 0.375f,\n\t0.1875f, 0.6875f, 0.0625f, 0.5625,\n\t0.9375f, 0.4375f, 0.8125f, 0.3125\n);\n\nfloat ComputeScattering(float lightDotView)\n{\n\tfloat result = 1.0 - scattering * scattering;\n\tresult /= (4.0 * 3.1415 * pow(1.0 + scattering * scattering - (2.0 * scattering) * lightDotView, 1.5));\n\treturn result;\n}\n\n\nfloat CalcPointShadow(PointLight light, vec3 fragmentPos) {\n\t// get vector between fragment position and light position\n    vec3 fragToLight = fragmentPos - light.position;\n\tfragToLight.y *= -1.0;\n\tfragToLight.z *= -1.0;\n    // use the light to fragment vector to sample from the depth map\n    float closestDepth = 1.0;`;\n\t// Below is ugly, but I have to unroll the loop to be able to acces the pointDepthMaps array with a compile time index, as run-time index is not allowed to access a sampler\n\tfor (let i = 0; i < pointShadowsToAllocate; i++) {\n\t\tif (i == 0) {\n\t\t\tvolumetricLightingFragmentShaderSrc +=\n\t\t\t\t`\n\tif (light.pointDepthMapIndex == ` +\n\t\t\t\ti +\n\t\t\t\t`) {\n\t\tclosestDepth = texture(pointDepthMaps[` +\n\t\t\t\ti +\n\t\t\t\t`], fragToLight).r;\n\t}\n\t`;\n\t\t} else {\n\t\t\tvolumetricLightingFragmentShaderSrc +=\n\t\t\t\t`\n\telse if (light.pointDepthMapIndex == ` +\n\t\t\t\ti +\n\t\t\t\t`) {\n\t\tclosestDepth = texture(pointDepthMaps[` +\n\t\t\t\ti +\n\t\t\t\t`], fragToLight).r;\n\t}\n\t`;\n\t\t}\n\t}\n\n\tvolumetricLightingFragmentShaderSrc += `\n    // it is currently in linear range between [0,1]. Re-transform back to original value\n    closestDepth *= far_plane;\n    // now get current linear depth as the length between the fragment and light position\n    float currentDepth = length(fragToLight);\n    // now test for shadows\n    float shadow = currentDepth > closestDepth ? 1.0 : 0.0;\n\n    return shadow;\n}\n\n// Calculates the colour when using a point light.\nvec4 CalcPointLight(PointLight light, vec3 fragmentPos, vec3 rayDir) {\n\tif (light.pointDepthMapIndex >= 0 && light.pointDepthMapIndex < NR_POINT_SHADOWS && CalcPointShadow(light, fragmentPos) == 0.0) {\n\t\tfloat distance = length(light.position - fragmentPos);\n\t\tfloat attenuation = 1.0f / (light.constant + light.linear * distance + light.quadratic * (distance * distance));\n\n\t\treturn vec4(light.colour * attenuation * ComputeScattering(dot(normalize(light.position - fragmentPos), rayDir)), 1.0); \n\t} \n\treturn vec4(0.0, 0.0, 0.0, 0.0);\n}\n\nfloat CalcShadow(vec4 lightSpaceFragPos) {\n\t// perform perspective divide\n    vec3 projCoords = lightSpaceFragPos.xyz / lightSpaceFragPos.w;\n\n    // transform to [0,1] range\n    projCoords = projCoords * 0.5 + 0.5;\n\n\tif (projCoords.z > 1.0) {\n\t\treturn 0.0;\n\t}\n\n    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)\n    float closestDepth = texture(depthMap, projCoords.xy).r; \n\n    // get depth of current fragment from light's perspective\n    float currentDepth = projCoords.z;\n\n    // check whether current frag pos is in shadow\t\n\tfloat shadow = 0.0;\n\tivec2 textureSize = textureSize(depthMap, 0);\n\tvec2 texelSize = vec2(1.0 / float(textureSize.x), 1.0 / float(textureSize.y));\n\tfor(int x = -1; x <= 1; ++x)\n\t{\n\t\tfor(int y = -1; y <= 1; ++y)\n\t\t{\n\t\t\tfloat pcfDepth = texture(depthMap, projCoords.xy + vec2(x, y) * texelSize).r; \n\t\t\tshadow += currentDepth > pcfDepth ? 1.0 : 0.0;\n\t\t}    \n\t}\n\tshadow = shadow / 9.0;\n\n    return shadow;\n}\n\nvec4 CalcDirectionalLight(DirectionalLight light, vec4 lightSpaceFragPos, vec3 rayDir) {\n\tfloat shadow = CalcShadow(lightSpaceFragPos);\n\treturn vec4(light.colour * (1.0 - shadow) * ComputeScattering(dot(light.direction, rayDir)), 1.0); \n}\n\nvoid main()\n{\n    vec4 result = vec4(0.0, 0.0, 0.0, 0.0);\n\n\tvec3 fragPos = vec3(0.0, 0.0, 0.0);\n\tvec4 gPosValues = texture(gPosition, texCoords);\n\n\tif (gPosValues.a < 0.01) {\n\t\tvec4 clipSpacePos = inverse(viewProjMatrix) * vec4(texCoords.xy * 2.0 - vec2(1.0, 1.0), 1.0, 1.0);\n\t\tvec3 worldPos = vec3(clipSpacePos.xyz / clipSpacePos.w);\n\t\tfragPos = cameraPos + normalize(worldPos - cameraPos) * fogMaxDistance;\n\t}\n\telse {\n\t\tfragPos.rgb = gPosValues.rgb;\n\t}\n\n\tvec3 dir = fragPos - cameraPos;\n\tfloat maxDistance = min(length(dir), fogMaxDistance);\n\tdir = normalize(dir);\n\n\tvec3 stepOffset = dir * (maxDistance / steps);\n\tvec3 startPos = cameraPos + stepOffset * offsetMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))];\n\n\tfor (float step = 0.0; step < steps; step += 1.0) {\n\t\tvec4 tempResult;\n\t\tfloat effectedCounter = 0.0;\n\t\tvec3 pos = startPos + stepOffset * step;\n\t\tvec4 lightSpaceFragPos = (lightSpaceMatrix * vec4(pos, 1.0f));\n\t\tvec4 dirLightResult = CalcDirectionalLight(directionalLight, lightSpaceFragPos, dir);\n\t\tif (dirLightResult.a > 0.0) {\n\t\t\teffectedCounter += 1.0;\n\t\t\ttempResult += dirLightResult;\n\t\t}\n\n\t\tfor (int i = 0; i < nrOfPointLights; i++) {\n\t\t\tvec4 lightResult = CalcPointLight(pointLights[i], pos, dir);\n\t\t\tif (lightResult.a > 0.0) {\n\t\t\t\teffectedCounter += 1.0;\n\t\t\t\ttempResult += lightResult;\n\t\t\t}\n\t\t}\n\n\t\ttempResult /= min(effectedCounter, 1.0);\n\t\tresult += tempResult;\n\t}\n\t// result /= steps;\n\tresult.a = (result.a / steps) * fogDensity;\n\tFragColor = result;\n\n\t// FragColor = vec4(1.0, 1.0, 1.0, maxDistance / fogMaxDistance);\n}\n`;\n\n\tvolumetricLightingShaderProgram = new VolumetricLightingShaderProgram();\n};\n","import { vec3 } from \"gl-matrix\";\nimport Camera from \"../../../Objects/Camera\";\nimport Framebuffer from \"../../Framebuffers/Framebuffer\";\nimport Scene from \"../../Scene\";\nimport { volumetricLightingShaderProgram } from \"../../ShaderPrograms/Volumetric/VolumetricLightingShaderProgram\";\nimport { gl } from \"../../Renderer\";\nimport Texture from \"../../../AssetHandling/Textures/Texture\";\nimport { pointShadowsToAllocate } from \"../../ShaderPrograms/DeferredRendering/LightingPassShaderProgram\";\nimport ScreenQuad from \"../../../Objects/GraphicsObjects/ScreenQuad\";\n\nexport default class VolumetricLightingPass {\n\toutputBuffer: Framebuffer;\n\tfogMaxDistance: number;\n\tfogDensity: number;\n\n\tprivate screenQuad: ScreenQuad;\n\n\tconstructor(positionTexture: Texture, directionalDepthMap: Texture) {\n\t\tthis.outputBuffer = null;\n\t\tthis.fogMaxDistance = 100;\n\t\tthis.fogDensity = 0.2;\n\t\tthis.screenQuad = new ScreenQuad(volumetricLightingShaderProgram, [positionTexture, directionalDepthMap]);\n\t}\n\n\tbindFramebuffers() {\n\t\t// Render result to screen or to crt framebuffer if doing crt effect after this.\n\t\tif (this.outputBuffer == undefined) {\n\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null); // Render directly to screen\n\t\t} else {\n\t\t\tthis.outputBuffer.bind(gl.DRAW_FRAMEBUFFER);\n\t\t}\n\t}\n\n\tdraw(scene: Scene, camera: Camera) {\n\t\tthis.bindFramebuffers();\n\t\tvolumetricLightingShaderProgram.use();\n\t\tgl.disable(gl.DEPTH_TEST);\n\t\tgl.enable(gl.BLEND);\n\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE);\n\t\tcamera.bindViewProjMatrix(\n\t\t\tvolumetricLightingShaderProgram.getUniformLocation(\"viewProjMatrix\")[0]\n\t\t);\n\t\tgl.uniform3fv(\n\t\t\tvolumetricLightingShaderProgram.getUniformLocation(\"cameraPos\")[0],\n\t\t\tcamera.getPosition()\n\t\t);\n\t\tscene.directionalLight.bind(volumetricLightingShaderProgram);\n\t\tscene.directionalLight.calcAndSendLightSpaceMatrix(\n\t\t\tvec3.zero(vec3.create()),\n\t\t\t40.0,\n\t\t\tvolumetricLightingShaderProgram.getUniformLocation(\"lightSpaceMatrix\")[0]\n\t\t);\n\n\t\tgl.uniform1f(volumetricLightingShaderProgram.getUniformLocation(\"fogMaxDistance\")[0], this.fogMaxDistance);\n\t\tgl.uniform1f(volumetricLightingShaderProgram.getUniformLocation(\"fogDensity\")[0], this.fogDensity);\n\n\n\t\t// Point lights\n\t\tgl.uniform1i(\n\t\t\tvolumetricLightingShaderProgram.getUniformLocation(\"nrOfPointLights\")[0],\n\t\t\tscene.pointLights.length\n\t\t);\n\n\t\t// Bind pointLights, with counter as depthMapIndex\n\t\tlet counter = 0;\n\t\tfor (let i = 0; i < scene.pointLights.length; i++) {\n\t\t\tscene.pointLights[i].bind(i, counter, volumetricLightingShaderProgram);\n\t\t\tif (scene.pointLights[i].castShadow) {\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\n\t\t// Then bind the point light depth maps\n\t\tcounter = this.screenQuad.textures.length;\n\t\tfor (const pointLight of scene.pointLights) {\n\t\t\tif (counter - this.screenQuad.textures.length >= pointShadowsToAllocate) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (pointLight.castShadow) {\n\t\t\t\tpointLight.pointShadowDepthMap.bind(counter++);\n\t\t\t}\n\t\t}\n\n\t\tthis.screenQuad.draw(true);\n\t\tgl.disable(gl.BLEND);\n\t\tgl.enable(gl.DEPTH_TEST);\n\t}\n}\n","import { gl } from \"../../Renderer\";\nimport ShaderProgram from \"../ShaderProgram\";\n\nconst particleVertexShaderSrc: string = `#version 300 es\n\nlayout (location = 0) in vec2 inVertexPosition;\nlayout (location = 1) in vec2 inTexCoords;\n\n// Instanced attributes starts here\nlayout (location = 2) in vec3 inStartPosition;\nlayout (location = 3) in float inSize;\nlayout (location = 4) in vec3 inStartVel;\nlayout (location = 5) in float inStartTime;\nlayout (location = 6) in vec3 inConstantAcceleration;\n// layout (location = 7) in float padding;\n\nuniform mat4 viewProjMatrix;\nuniform vec3 cameraPos;\nuniform float currentTime;\nuniform float fadePerSecond;\nuniform float sizeChangePerSecond;\nuniform float lifeTime;\n\nout vec2 texCoords;\nout float alpha;\n\nvoid main() {\n    // Calculate how long this has been alive\n    float currentLifeTime = mod(currentTime - inStartTime, lifeTime);\n\n    // Calculate current position\n    vec3 currentPos = inStartPosition + (inStartVel * currentLifeTime + (inConstantAcceleration * currentLifeTime) * currentLifeTime) / 2.0;\n\n    // Billboarding\n    vec3 camDir = cameraPos - currentPos;\n    vec3 rightVec = normalize(cross(vec3(0.0, 1.0, 0.0), camDir));\n    vec3 upVec = normalize(cross(camDir, rightVec));\n    rightVec = rightVec * inVertexPosition.x * (inSize + sizeChangePerSecond * currentLifeTime);\n    upVec = upVec * inVertexPosition.y * (inSize + sizeChangePerSecond * currentLifeTime);\n    gl_Position = viewProjMatrix * vec4(rightVec + upVec + currentPos, 1.0);\n\n    // gl_Position = viewProjMatrix * vec4(vec3(inVertexPosition, 0.0) * inSize + currentPos, 1.0); // No billboarding\n    texCoords = inTexCoords;\n    alpha = max(1.0 - currentLifeTime * fadePerSecond, 0.0);\n}`;\n\nconst particleFragmentShaderSrc: string = `#version 300 es\nprecision highp float;\n\nin vec2 texCoords;\nin float alpha;\n\nuniform sampler2D texture0;\n\nlayout (location = 0) out vec4 FragColor;\nlayout (location = 1) out float FragOpacity;\n\nmat4 thresholdMatrix = mat4(\n    1.0, 9.0, 3.0, 11.0,\n    13.0, 5.0, 15.0, 7.0,\n    4.0, 12.0, 2.0, 10.0,\n    16.0, 8.0, 14.0, 6.0\n    );\n\nvoid main()\n{\n    FragColor = texture(texture0, texCoords);\n\n    FragColor.a = FragColor.a * alpha;\n    \n    float threshold = thresholdMatrix[int(floor(mod(gl_FragCoord.x, 4.0)))][int(floor(mod(gl_FragCoord.y, 4.0)))] / 17.0;\n    if (threshold >= FragColor.a) {\n        discard;\n    }\n\n\tFragOpacity = FragColor.a;\n\n    FragColor.a = 1.0f; // Since we use screen door transparency, do not use alpha value\n}`;\n\nclass ParticleShaderProgram extends ShaderProgram {\n\tconstructor() {\n\t\tsuper(\"ParticleShaderProgram\", particleVertexShaderSrc, particleFragmentShaderSrc, false);\n\n\t\tthis.use();\n\n\t\tthis.setUniformLocation(\"texture0\");\n\t\tgl.uniform1i(this.getUniformLocation(\"texture0\")[0], 0);\n\n\t\tthis.setUniformLocation(\"viewProjMatrix\");\n\t\tthis.setUniformLocation(\"cameraPos\");\n\t\tthis.setUniformLocation(\"currentTime\");\n\t\tthis.setUniformLocation(\"fadePerSecond\");\n\t\tthis.setUniformLocation(\"sizeChangePerSecond\");\n\t\tthis.setUniformLocation(\"lifeTime\");\n\t}\n\n\tsetupVertexAttributePointers(): void {\n\t\t// Change if input layout changes in shaders\n\t\tconst stride = 4 * 4;\n\t\tgl.vertexAttribPointer(0, 2, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(0);\n\n\t\tgl.vertexAttribPointer(1, 2, gl.FLOAT, false, stride, 2 * 4);\n\t\tgl.enableVertexAttribArray(1);\n\t}\n\n\tsetupInstancedVertexAttributePointers(): void {\n\t\tconst stride = 11 * 4;\n\t\tgl.vertexAttribPointer(2, 3, gl.FLOAT, false, stride, 0);\n\t\tgl.enableVertexAttribArray(2);\n\t\tgl.vertexAttribDivisor(2, 1);\n\n\t\tgl.vertexAttribPointer(3, 1, gl.FLOAT, false, stride, 3 * 4);\n\t\tgl.enableVertexAttribArray(3);\n\t\tgl.vertexAttribDivisor(3, 1);\n\n\t\tgl.vertexAttribPointer(4, 3, gl.FLOAT, false, stride, 4 * 4);\n\t\tgl.enableVertexAttribArray(4);\n\t\tgl.vertexAttribDivisor(4, 1);\n\n\t\tgl.vertexAttribPointer(5, 1, gl.FLOAT, false, stride, 7 * 4);\n\t\tgl.enableVertexAttribArray(5);\n\t\tgl.vertexAttribDivisor(5, 1);\n\n\t\tgl.vertexAttribPointer(6, 3, gl.FLOAT, false, stride, 8 * 4);\n\t\tgl.enableVertexAttribArray(6);\n\t\tgl.vertexAttribDivisor(6, 1);\n\n\t\t// gl.vertexAttribPointer(7, 1, gl.FLOAT, false, stride, 11 * 4);\n\t\t// gl.enableVertexAttribArray(7);\n\t\t// gl.vertexAttribDivisor(7, 1);\n\t}\n}\n\nexport let particleShaderProgram: ParticleShaderProgram = null;\n\nexport let createParticleShaderProgram = function () {\n\tparticleShaderProgram = new ParticleShaderProgram();\n};\n","import Texture from \"../../../AssetHandling/Textures/Texture\";\nimport Camera from \"../../../Objects/Camera\";\nimport ScreenQuad from \"../../../Objects/GraphicsObjects/ScreenQuad\";\nimport Framebuffer from \"../../Framebuffers/Framebuffer\";\nimport { gl, rendererStartTime } from \"../../Renderer\";\nimport Scene from \"../../Scene\";\nimport { particleShaderProgram } from \"../../ShaderPrograms/Particles/ParticleShaderProgram\";\nimport { screenQuadShaderProgram } from \"../../ShaderPrograms/ScreenQuadShaderProgram\";\n\nexport default class ParticleRenderPass {\n\toutputBuffer: Framebuffer;\n\n\tconstructor() {\n\t\tthis.outputBuffer = null;\n\t}\n\n\tbindFramebuffers() {\n\t\t// Render result to screen or to crt framebuffer if doing crt effect after this.\n\t\tif (this.outputBuffer == undefined) {\n\t\t\tgl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null); // Render directly to screen\n\t\t} else {\n\t\t\tthis.outputBuffer.bind(gl.DRAW_FRAMEBUFFER);\n\t\t}\n\t}\n\n\tdraw(scene: Scene, camera: Camera) {\n\t\tgl.clearBufferfv(gl.COLOR, 1, [0.0, 0.0, 0.0, 1.0]);\n\t\tif (scene.particleSpawners.length > 0) {\n\t\t\t// only do this if there are any particle spawners\n\t\t\tparticleShaderProgram.use();\n\t\t\tcamera.bindViewProjMatrix(particleShaderProgram.getUniformLocation(\"viewProjMatrix\")[0]);\n\t\t\tgl.uniform3fv(particleShaderProgram.getUniformLocation(\"cameraPos\")[0], camera.getPosition());\n\t\t\tgl.uniform1f(\n\t\t\t\tparticleShaderProgram.getUniformLocation(\"currentTime\")[0],\n\t\t\t\t(Date.now() - rendererStartTime) * 0.001\n\t\t\t);\n\t\t\tfor (const particleSpawner of scene.particleSpawners.values()) {\n\t\t\t\tparticleSpawner.draw();\n\t\t\t}\n\t\t}\n\t}\n}\n","import Framebuffer from \"./Framebuffers/Framebuffer\";\nimport Texture from \"../AssetHandling/Textures/Texture\";\nimport Camera from \"../Objects/Camera\";\nimport Scene from \"./Scene\";\nimport ScreenQuadPass from \"./RenderPasses/ScreenQuadRenderPass\";\nimport { createScreenQuadShaderProgram } from \"./ShaderPrograms/ScreenQuadShaderProgram\";\nimport SkyboxRenderPass from \"./RenderPasses/SkyboxRenderPass\";\nimport GeometryRenderPass from \"./RenderPasses/DefferedRendering/GeometryRenderPass\";\nimport LightingRenderPass from \"./RenderPasses/DefferedRendering/LightingRenderPass\";\nimport DirectionalShadowRenderPass from \"./RenderPasses/ShadowPasses/DirectionalShadowRenderPass\";\nimport PointShadowRenderPass from \"./RenderPasses/ShadowPasses/PointShadowRenderPass\";\nimport { createLightingPassShaderProgram } from \"./ShaderPrograms/DeferredRendering/LightingPassShaderProgram\";\nimport { createGeometryPassShaderProgram } from \"./ShaderPrograms/DeferredRendering/GeometryPassShaderProgram\";\nimport { createDirectionalShadowShaderProgram } from \"./ShaderPrograms/ShadowMapping/DirectionalShadowShaderProgram\";\nimport { createPointShadowShaderProgram } from \"./ShaderPrograms/ShadowMapping/PointShadowShaderProgram\";\nimport { createSkyboxShaderProgram } from \"./ShaderPrograms/Skybox/SkyboxShaderProgram\";\nimport { textureStore } from \"../../../Engine\";\nimport { createVolumetricLightingShaderProgram } from \"./ShaderPrograms/Volumetric/VolumetricLightingShaderProgram\";\nimport VolumetricLightingPass from \"./RenderPasses/Volumetric/VolumetricLightingPass\";\nimport ParticleRenderPass from \"./RenderPasses/Particles/ParticleRenderPass\";\nimport { createParticleShaderProgram } from \"./ShaderPrograms/Particles/ParticleShaderProgram\";\n\nexport let gl: WebGL2RenderingContext;\nexport let rendererStartTime: number = Date.now();\n\nexport default class Renderer {\n\t// public\n\tclearColour: { r: number; g: number; b: number; a: number };\n\n    domElement: HTMLCanvasElement;\n\n\tprivate width: number;\n\tprivate height: number;\n\n\t// ---- Shadows ----\n\tprivate directionalShadowRenderPass: DirectionalShadowRenderPass;\n\tprivate pointShadowRenderPass: PointShadowRenderPass;\n\t// -----------------\n\n\t// ---- Deferred rendering ----\n\tprivate geometryRenderPass: GeometryRenderPass;\n\tprivate lightingRenderPass: LightingRenderPass;\n\t// ----------------------------\n\n\t// ---- Skybox ----\n\tprivate useSkybox: boolean;\n\tprivate skyboxRenderPass: SkyboxRenderPass;\n\t// ----------------\n\n\t// ---- Particles ----\n\tprivate particleRenderPass: ParticleRenderPass;\n\t// -------------------\n\n\t// ---- Volumetric God Rays ----\n\tprivate volumetricLightingPass: VolumetricLightingPass;\n\tuseVolumetric: boolean;\n\t// -----------------------------\n\n\t// ---- Finished output ----\n\tprivate finishedFramebuffer: Framebuffer;\n\tprivate finishedOutputRenderPass: ScreenQuadPass;\n\t// -------------------------\n\n\tconstructor() {\n\t\tthis.initGL();\n\t\tthis.createShaders();\n\t\tthis.width = 100;\n\t\tthis.height = 100;\n\n\t\t// ---- Shadows ----\n\t\tthis.directionalShadowRenderPass = new DirectionalShadowRenderPass();\n\t\tthis.pointShadowRenderPass = new PointShadowRenderPass();\n\t\t// -----------------\n\n\t\t// ---- Deferred rendering ----\n\t\tthis.geometryRenderPass = new GeometryRenderPass();\n\n\t\tlet textureArray = new Array<Texture>();\n\t\tfor (let i = 0; i < this.geometryRenderPass.outputFramebuffer.textures.length; i++) {\n\t\t\ttextureArray.push(this.geometryRenderPass.outputFramebuffer.textures[i]);\n\t\t}\n\t\ttextureArray.push(this.directionalShadowRenderPass.shadowBuffer.depthTexture);\n\t\tthis.lightingRenderPass = new LightingRenderPass(textureArray);\n\t\t// ----------------------------\n\n\t\t// ---- Skybox ----\n\t\tthis.useSkybox = false;\n\t\tthis.skyboxRenderPass = new SkyboxRenderPass();\n\t\t// ----------------\n\n\t\t// ---- Paricles ----\n\t\tthis.particleRenderPass = new ParticleRenderPass();\n\t\t// ------------------\n\n\t\t// ---- Volumetric God Rays ----\n\t\tthis.volumetricLightingPass = new VolumetricLightingPass(this.geometryRenderPass.outputFramebuffer.textures[0], this.directionalShadowRenderPass.shadowBuffer.depthTexture);\n\t\tthis.useVolumetric = false;\n\t\t// -----------------------------\n\n\t\tthis.finishedFramebuffer = new Framebuffer(\n\t\t\tthis.width,\n\t\t\tthis.height,\n\t\t\t[new Texture(false)],\n\t\t\tnull\n\t\t);\n\n\t\t// Assign finished framebuffer to those render passes that should target it\n\t\tthis.volumetricLightingPass.outputBuffer = this.finishedFramebuffer;\n\t\tthis.particleRenderPass.outputBuffer = this.finishedFramebuffer;\n\n\t\tthis.finishedOutputRenderPass = new ScreenQuadPass(this.finishedFramebuffer.textures[0]);\n\t}\n\n\tprivate createShaders() {\n\t\tcreateGeometryPassShaderProgram();\n\t\tcreateLightingPassShaderProgram();\n\t\tcreateDirectionalShadowShaderProgram();\n\t\tcreatePointShadowShaderProgram();\n\t\tcreateParticleShaderProgram();\n\t\tcreateVolumetricLightingShaderProgram();\n\t\tcreateSkyboxShaderProgram();\n\t\tcreateScreenQuadShaderProgram();\n\t}\n\n\tinitGL() {\n\t    this.domElement = <HTMLCanvasElement>document.createElement(\"canvas\");\n\n        gl = this.domElement.getContext(\"webgl2\", { antialias: false });\n        if (!gl.getExtension(\"EXT_color_buffer_float\")) {\n            alert(\"Rendering to floating point textures is not supported on this platform\");\n        }\n        if (!gl.getExtension(\"OES_texture_float_linear\")) {\n            alert(\"Floating point rendering to FBO textures not supported\");\n        }\n\n        if (!gl) {\n            console.log(\"Failed to get rendering context for WebGL\");\n            return;\n        }\n\n\t\tthis.clearColour = { r: 0.0, g: 0.0, b: 0.0, a: 1.0 };\n\t\tgl.clearColor(this.clearColour.r, this.clearColour.g, this.clearColour.b, this.clearColour.a);\n\n\t\t// Enable depth test\n\t\tgl.enable(gl.DEPTH_TEST);\n\n\t\t// Disable alpha blending since we are using screen door transparancy\n\t\tgl.disable(gl.BLEND);\n\n\t\t// Enable back face culling\n\t\tgl.cullFace(gl.BACK);\n\t\tgl.enable(gl.CULL_FACE);\n\t}\n\n\tsetSize(x: number, y: number, updateStyle: boolean = false) {\n\t\tthis.width = x;\n\t\tthis.height = y;\n\n\t\tthis.domElement.width = this.width;\n\t\tthis.domElement.height = this.height;\n\n\t\tthis.geometryRenderPass.setResolution(x, y);\n\t\tthis.finishedFramebuffer.setProportions(x, y);\n\t}\n\n\tsetSkybox(path?: string) {\n\t\tif (path != undefined) {\n\t\t\tthis.skyboxRenderPass.setSkybox(textureStore.getCubeMap(path));\n\t\t\t// this.skyboxRenderPass.setSkybox(this.scene.pointLights[0].pointShadowDepthMap);\n\t\t\tthis.useSkybox = true;\n\t\t}\n\t\telse {\n\t\t\tthis.useSkybox = false;\n\t\t}\n\t}\n\n\tsetFogDensity(density: number) {\n\t\tthis.volumetricLightingPass.fogDensity = density;\n\t}\n\n\tprivate takeScreenshot(screenshotName: string) {\n\t\tvar offscreenCanvas = document.createElement(\"canvas\");\n\t\toffscreenCanvas.width = gl.canvas.width;\n\t\toffscreenCanvas.height = gl.canvas.height;\n\t\tvar ctx = offscreenCanvas.getContext(\"2d\");\n\n\t\tctx.drawImage(gl.canvas, 0, 0);\n\n\t\tconst saveBlob = (function () {\n\t\t\tconst a = document.createElement(\"a\");\n\t\t\tdocument.body.appendChild(a);\n\t\t\ta.style.display = \"none\";\n\t\t\treturn function saveData(blob, fileName) {\n\t\t\t\tconst url = window.URL.createObjectURL(blob);\n\t\t\t\ta.href = url;\n\t\t\t\ta.download = fileName;\n\t\t\t\ta.click();\n\t\t\t};\n\t\t})();\n\n\t\toffscreenCanvas.toBlob((blob) => {\n\t\t\tsaveBlob(blob, screenshotName);\n\t\t});\n\t}\n\n\trender(scene: Scene, camera: Camera, saveScreenshot: boolean = false, screenshotName: string = \"screencapture\") {\n\t\tgl.enable(gl.DEPTH_TEST);\n\n\t\tscene.calculateAllTransforms();\n\n\t\t// ---- Shadow pass ----\n\t\tthis.directionalShadowRenderPass.draw(scene);\n\t\tthis.pointShadowRenderPass.draw(scene);\n\t\t// ---------------------\n\n\t\t// ---- Geometry pass ----\n\t\tthis.geometryRenderPass.draw(scene, camera);\n\t\t// -----------------------\n\n\t\t// Geometry pass over, start rendering to particle render pass output\n\t\tthis.particleRenderPass.bindFramebuffers();\n\n\t\t// Clear the output with the actual clear colour we have set\n\t\tgl.clearColor(this.clearColour.r, this.clearColour.g, this.clearColour.b, this.clearColour.a);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n\n\t\t// ---- Lighting pass ----\n\t\tthis.lightingRenderPass.draw(scene, camera);\n\t\t// -----------------------\n\n\t\t// Copy the depth buffer information from the gBuffer to the current depth buffer\n\t\tthis.geometryRenderPass.outputFramebuffer.bind(gl.READ_FRAMEBUFFER);\n\t\tgl.blitFramebuffer(\n\t\t\t0,\n\t\t\t0,\n\t\t\tthis.width,\n\t\t\tthis.height,\n\t\t\t0,\n\t\t\t0,\n\t\t\tthis.width,\n\t\t\tthis.height,\n\t\t\tgl.DEPTH_BUFFER_BIT,\n\t\t\tgl.NEAREST\n\t\t);\n\n\t\t// ---- Skybox ----\n\t\tif (this.useSkybox) {\n\t\t\tthis.skyboxRenderPass.draw(camera);\n\t\t}\n\t\t// ----------------\n\n\t\t// ---- Particles ----\n\t\tthis.particleRenderPass.draw(scene, camera);\n\t\t// -------------------\n\n\t\t// ---- Volumetric God Rays ----\n\t\tif (this.useVolumetric) {\n\t\t\tthis.volumetricLightingPass.draw(scene, camera);\n\t\t}\n\t\t// -----------------------------\n\n\t\tthis.finishedOutputRenderPass.draw();\n\n        if (saveScreenshot) {\n            this.takeScreenshot(screenshotName);\n        }\n\t}\n}\n","import { mat4, vec3 } from \"gl-matrix\";\nimport { gl } from \"../../Renderer/Renderer\";\nimport ShaderProgram from \"../../Renderer/ShaderPrograms/ShaderProgram\";\n\nexport default class DirectionalLight {\n\tdirection: vec3;\n\tcolour: vec3;\n\tambientMultiplier: number;\n\n\tlightProjectionBoxSideLength: number;\n\n\tconstructor() {\n\t\tthis.direction = vec3.fromValues(0.0, -1.0, -0.5);\n\t\tthis.colour = vec3.fromValues(0.2, 0.2, 0.2);\n\t\tthis.ambientMultiplier = 0.1;\n\t\tthis.lightProjectionBoxSideLength = 60.0;\n\t}\n\n\tbind(shaderProgram: ShaderProgram) {\n\t\tgl.uniform3fv(\n\t\t\tshaderProgram.getUniformLocation(\"directionalLight.direction\")[0],\n\t\t\tvec3.normalize(this.direction, this.direction)\n\t\t);\n\t\tgl.uniform3fv(shaderProgram.getUniformLocation(\"directionalLight.colour\")[0], this.colour);\n\t\tgl.uniform1f(\n\t\t\tshaderProgram.getUniformLocation(\"directionalLight.ambientMultiplier\")[0],\n\t\t\tthis.ambientMultiplier\n\t\t);\n\t}\n\n\tcalcAndSendLightSpaceMatrix(\n\t\tfocusPos: vec3,\n\t\toffset: number,\n\t\tuniformLocation: WebGLUniformLocation\n\t) {\n\t\tlet cameraPos = vec3.clone(focusPos);\n\t\tlet offsetVec = vec3.scale(\n\t\t\tvec3.create(),\n\t\t\tvec3.normalize(vec3.create(), this.direction),\n\t\t\toffset\n\t\t);\n\t\tlet lightSpaceMatrix = mat4.ortho(\n\t\t\tmat4.create(),\n\t\t\t-this.lightProjectionBoxSideLength,\n\t\t\tthis.lightProjectionBoxSideLength,\n\t\t\t-this.lightProjectionBoxSideLength,\n\t\t\tthis.lightProjectionBoxSideLength,\n\t\t\t0.1,\n\t\t\toffset * 2.0\n\t\t); // Start by setting it to projection\n\t\tvec3.subtract(cameraPos, cameraPos, offsetVec);\n\t\tlet lightView = mat4.lookAt(mat4.create(), cameraPos, focusPos, vec3.fromValues(0.0, 1.0, 0.0)); // This will make it impossible to have exactly straight down shadows, but I'm fine with that\n\t\tmat4.mul(lightSpaceMatrix, lightSpaceMatrix, lightView);\n\t\tgl.uniformMatrix4fv(uniformLocation, false, lightSpaceMatrix);\n\t}\n}\n","import { gl } from \"../../Renderer/Renderer\";\nimport Texture from \"./Texture\";\n\nexport default class CubeMap extends Texture {\n\tprivate sidesLoaded: number;\n\n\tconstructor(\n\t\tuseMipMap: boolean = true,\n\t\tinternalFormat: number = gl.RGBA,\n\t\tformat: number = gl.RGBA,\n\t\tdataStorageType: number = gl.UNSIGNED_BYTE,\n\t\ttextureTarget: number = gl.TEXTURE_CUBE_MAP\n\t) {\n\t\tsuper(useMipMap, internalFormat, format, dataStorageType, textureTarget);\n\n\t\tthis.setTexParameterI(gl.TEXTURE_WRAP_R, gl.REPEAT);\n\t\tthis.sidesLoaded = 0;\n\t}\n\n\t/**\n\t *\n\t * @param data - the data to set for the texture\n\t * @param width - width of the texture\n\t * @param height - height of the texture\n\t * @param face - cubemap face to set, leave empty to set data for all faces\n\t */\n\tsetTextureData(data: Uint8Array, width: number, height: number, face?: number) {\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tgl.bindTexture(this.textureTarget, this.texture);\n\n\t\tif (face == undefined) {\n\t\t\t// Face not specified, set the data for all sides\n\t\t\tfor (let i = 0; i < 6; i++) {\n\t\t\t\tgl.texImage2D(\n\t\t\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n\t\t\t\t\t0,\n\t\t\t\t\tthis.internalFormat,\n\t\t\t\t\tthis.width,\n\t\t\t\t\tthis.height,\n\t\t\t\t\t0,\n\t\t\t\t\tthis.format,\n\t\t\t\t\tthis.dataStorageType,\n\t\t\t\t\tdata\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// Face specified, set data for the specified face\n\t\t\tgl.texImage2D(\n\t\t\t\tface,\n\t\t\t\t0,\n\t\t\t\tthis.internalFormat,\n\t\t\t\tthis.width,\n\t\t\t\tthis.height,\n\t\t\t\t0,\n\t\t\t\tthis.format,\n\t\t\t\tthis.dataStorageType,\n\t\t\t\tdata\n\t\t\t);\n\t\t}\n\n\t\t// Unbind texture\n\t\tgl.bindTexture(this.textureTarget, null);\n\t}\n\n\tloadCubemap(URLs: [string, string, string, string, string, string]) {\n\t\tfor (let i = 0; i < URLs.length; i++) {\n\t\t\tlet image = new Image();\n\t\t\timage.crossOrigin = \"\";\n\t\t\timage.src = URLs[i];\n\t\t\tlet self = this;\n\t\t\timage.addEventListener(\"load\", function () {\n\t\t\t\t// Now that the image has loaded copy it to the texture and save the width/height.\n\t\t\t\tself.width = image.width;\n\t\t\t\tself.height = image.height;\n\t\t\t\tgl.bindTexture(self.textureTarget, self.texture);\n\t\t\t\tgl.texImage2D(\n\t\t\t\t\tgl.TEXTURE_CUBE_MAP_POSITIVE_X + i,\n\t\t\t\t\t0,\n\t\t\t\t\tself.internalFormat,\n\t\t\t\t\tself.format,\n\t\t\t\t\tself.dataStorageType,\n\t\t\t\t\timage\n\t\t\t\t);\n\t\t\t\tself.sidesLoaded++;\n\t\t\t\tif (self.sidesLoaded >= 6) {\n\t\t\t\t\tself.loadedFromFile = true;\n\t\t\t\t\tif (self.useMipMap) {\n\t\t\t\t\t\tgl.generateMipmap(self.textureTarget);\n\t\t\t\t\t\tgl.texParameteri(self.textureTarget, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n","import { vec3 } from \"gl-matrix\";\nimport { gl } from \"../../Renderer/Renderer\";\nimport ShaderProgram from \"../../Renderer/ShaderPrograms/ShaderProgram\";\nimport CubeMap from \"../../AssetHandling/Textures/CubeMap\";\nimport Framebuffer from \"../../Renderer/Framebuffers/Framebuffer\";\n\nexport default class PointLight {\n\tposition: vec3;\n\tcolour: vec3;\n\n\tconstant: number;\n\tlinear: number;\n\tquadratic: number;\n\tcastShadow: boolean;\n\t// depthMapGenerated: boolean;\n\t// private radius: number; // TODO: implement light volumes\n\n\tpointShadowBuffer: Framebuffer;\n\tpointShadowDepthMap: CubeMap;\n\n\tconstructor() {\n\t\tthis.position = vec3.fromValues(0.0, 0.0, 0.0);\n\t\tthis.colour = vec3.fromValues(1.0, 1.0, 1.0);\n\n\t\tthis.constant = 1.0;\n\t\tthis.linear = 0.07;\n\t\tthis.quadratic = 0.017;\n\t\tthis.castShadow = false;\n\t\t// this.depthMapGenerated = false;\n\t\t// this.radius = (-this.linear + Math.sqrt(this.linear * this.linear - 4.0 * this.quadratic * (this.constant - (256.0 / 5.0)))) / (2.0 * this.quadratic);\n\n\t\tthis.pointShadowDepthMap = new CubeMap(\n\t\t\tfalse,\n\t\t\tgl.DEPTH_COMPONENT32F,\n\t\t\tgl.DEPTH_COMPONENT,\n\t\t\tgl.FLOAT\n\t\t);\n\t\tthis.pointShadowDepthMap.setTextureData(null, 1024, 1024);\n\n\t\tthis.pointShadowBuffer = new Framebuffer(1024, 1024, [], this.pointShadowDepthMap);\n\t}\n\n\tbind(lightIndex: number, depthMapIndex: number, shaderProgram: ShaderProgram) {\n\t\tlet ul = shaderProgram.getUniformLocation(\"pointLights[\" + lightIndex + \"].position\");\n\t\tif (ul[1]) {\n\t\t\tgl.uniform3fv(ul[0], this.position);\n\t\t}\n\t\tul = shaderProgram.getUniformLocation(\"pointLights[\" + lightIndex + \"].colour\");\n\t\tif (ul[1]) {\n\t\t\tgl.uniform3fv(ul[0], this.colour);\n\t\t}\n\n\t\tul = shaderProgram.getUniformLocation(\"pointLights[\" + lightIndex + \"].constant\");\n\t\tif (ul[1]) {\n\t\t\tgl.uniform1f(ul[0], this.constant);\n\t\t}\n\t\tul = shaderProgram.getUniformLocation(\"pointLights[\" + lightIndex + \"].linear\");\n\t\tif (ul[1]) {\n\t\t\tgl.uniform1f(ul[0], this.linear);\n\t\t}\n\t\tul = shaderProgram.getUniformLocation(\"pointLights[\" + lightIndex + \"].quadratic\");\n\t\tif (ul[1]) {\n\t\t\tgl.uniform1f(ul[0], this.quadratic);\n\t\t}\n\n\t\tul = shaderProgram.getUniformLocation(\"pointLights[\" + lightIndex + \"].pointDepthMapIndex\");\n\t\tif (ul[1]) {\n\t\t\tgl.uniform1i(ul[0], this.castShadow ? depthMapIndex : -1);\n\t\t}\n\t}\n}\n","import { mat4, quat, vec3 } from \"gl-matrix\";\r\n\r\n/**\r\n * A utility class that can store position, rotation, scle, and origin.\r\n * It has a function \"calculateMatrix\", which takes a matrix, and will update the matrix with the member variables\r\n */\r\nexport default class Transform {\r\n\tparentTransform: Transform;\r\n\r\n\tposition: vec3;\r\n\trotation: quat;\r\n\tscale: vec3;\r\n\torigin: vec3;\r\n\tmatrix: mat4;\r\n\r\n\tconstructor() {\r\n\t\tthis.parentTransform = null;\r\n\t\tthis.position = vec3.create();\r\n\t\tthis.rotation = quat.create();\r\n\t\tthis.scale = vec3.fromValues(1.0, 1.0, 1.0);\r\n\t\tthis.origin = vec3.create();\r\n\t\tthis.matrix = mat4.create();\r\n\t}\r\n\r\n\ttranslate(translation: vec3) {\r\n\t\tvec3.add(this.position, this.position, translation);\r\n\t}\r\n\r\n\tsetTranslation(translation: vec3) {\r\n\t\tvec3.copy(this.position, translation);\r\n\t}\r\n\r\n\tcalculateMatrix(matrix: mat4 = this.matrix, identityMatrixFirst: boolean = true) {\r\n\t\tif (identityMatrixFirst) {\r\n\t\t\tmat4.identity(matrix);\r\n\t\t}\r\n\r\n\t\tif (this.parentTransform != undefined) {\r\n\t\t\tthis.parentTransform.calculateMatrix(matrix, false);\r\n\t\t}\r\n\t\tmat4.translate(matrix, matrix, this.position);\r\n\t\tmat4.multiply(matrix, matrix, mat4.fromQuat(mat4.create(), this.rotation));\r\n\t\tmat4.scale(matrix, matrix, this.scale);\r\n\t\tmat4.translate(matrix, matrix, vec3.negate(vec3.create(), this.origin));\r\n\t}\r\n}","import { mat3, mat4, quat, vec3 } from \"gl-matrix\";\nimport { gl } from \"../Renderer/Renderer\";\nimport Texture from \"../AssetHandling/Textures/Texture\";\nimport GraphicsObject from \"./GraphicsObjects/GraphicsObject\";\nimport Transform from \"../../Shared/Transform\";\n\nexport default class GraphicsBundle {\n\ttransform: Transform;\n\ttextureMatrix: mat4;\n\tnormalMatrix: mat3;\n\n\tdiffuse: Texture;\n\tspecular: Texture;\n\temission: Texture;\n\n\temissionColor: vec3;\n\n\tgraphicsObject: GraphicsObject;\n\tenabled: boolean;\n\n\tconstructor(\n\t\tdiffuse: Texture,\n\t\tspecular: Texture,\n\t\tgraphicsObject: GraphicsObject,\n\t\temissionMap?: Texture\n\t) {\n\t\tthis.diffuse = diffuse;\n\t\tthis.specular = specular;\n\n\t\tif (emissionMap != undefined) {\n\t\t\tthis.emission = emissionMap;\n\t\t} else {\n\t\t\tthis.emission = new Texture();\n\t\t\tthis.emission.setTextureData(new Uint8Array([0.0, 0.0, 0.0, 0.0]), 1, 1);\n\t\t}\n\t\tthis.emissionColor = vec3.fromValues(0.0, 0.0, 0.0);\n\n\t\tthis.transform = new Transform();\n\t\tthis.textureMatrix = mat4.create();\n\t\tthis.normalMatrix = mat3.create();\n\n\t\tthis.graphicsObject = graphicsObject;\n\t\tthis.enabled = true;\n\t}\n\n\tdraw(bindSpecialTextures: boolean = true) {\n\t\tif (this.enabled) {\n\t\t\tthis.diffuse.bind(0);\n\n\t\t\tif (bindSpecialTextures) {\n\t\t\t\tthis.specular.bind(1);\n\t\t\t\tthis.emission.bind(2);\n\t\t\t}\n\n\t\t\tlet emissionColorU: [WebGLUniformLocation, boolean] =\n\t\t\t\tthis.graphicsObject.shaderProgram.getUniformLocation(\"emissionColor\");\n\t\t\tif (emissionColorU[1]) {\n\t\t\t\tgl.uniform3fv(emissionColorU[0], this.emissionColor);\n\t\t\t}\n\t\t\tlet modelReturn: [WebGLUniformLocation, boolean] =\n\t\t\t\tthis.graphicsObject.shaderProgram.getUniformLocation(\"modelMatrix\");\n\t\t\tif (modelReturn[1]) {\n\t\t\t\tgl.uniformMatrix4fv(modelReturn[0], false, this.transform.matrix);\n\t\t\t}\n\t\t\tlet textureReturn: [WebGLUniformLocation, boolean] =\n\t\t\t\tthis.graphicsObject.shaderProgram.getUniformLocation(\"textureMatrix\");\n\t\t\tif (textureReturn[1]) {\n\t\t\t\tgl.uniformMatrix4fv(textureReturn[0], false, this.textureMatrix);\n\t\t\t}\n\t\t\tlet normalReturn: [WebGLUniformLocation, boolean] =\n\t\t\t\tthis.graphicsObject.shaderProgram.getUniformLocation(\"normalMatrix\");\n\t\t\tif (normalReturn[1]) {\n\t\t\t\tgl.uniformMatrix3fv(normalReturn[0], false, this.normalMatrix);\n\t\t\t}\n\n\t\t\tthis.graphicsObject.draw();\n\t\t}\n\t}\n}\n","import { applicationStartTime } from \"../../../../Engine\";\nimport { gl } from \"../../Renderer/Renderer\";\n\nimport GraphicsObject from \"./GraphicsObject\";\nimport Texture from \"../../AssetHandling/Textures/Texture\";\nimport ShaderProgram from \"../../Renderer/ShaderPrograms/ShaderProgram\";\nimport { vec3 } from \"gl-matrix\";\n\nexport default class ParticleSpawner extends GraphicsObject {\n\ttexture: Texture;\n\tfadePerSecond: number;\n\tsizeChangePerSecond: number;\n\tlifeTime: number;\n\n\t// Private\n\tprivate numParticles: number;\n\tprivate vertices: Float32Array;\n\tprivate indices: Int32Array;\n\tprivate instanceVBO: WebGLBuffer;\n\n\tconstructor(\n\t\tshaderProgram: ShaderProgram,\n\t\ttexture: Texture,\n\t\tnumberOfStartingParticles: number = 0\n\t) {\n\t\tsuper(shaderProgram);\n\n\t\tthis.texture = texture;\n\n\t\tthis.bindVAO();\n\t\tthis.instanceVBO = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\n\t\tgl.bufferData(gl.ARRAY_BUFFER, numberOfStartingParticles * 11 * 4, gl.DYNAMIC_DRAW);\n\t\tshaderProgram.setupInstancedVertexAttributePointers();\n\t\tthis.unbindVAO();\n\n\t\t// prettier-ignore\n\t\tthis.vertices = new Float32Array([ \n            // positions  // uv\n            -0.5,  0.5,   0.0, 1.0,\n            -0.5, -0.5,   0.0, 0.0,\n             0.5, -0.5,   1.0, 0.0,\n             0.5,  0.5,   1.0, 1.0,\n        ]);\n\n\t\t// prettier-ignore\n\t\tthis.indices = new Int32Array([\n            0, 1, 2,\n            0, 2, 3,\n        ]);\n\t\tthis.setVertexData(this.vertices);\n\t\tthis.setIndexData(this.indices);\n\n\t\t// All starting particles are initialized as size and position 0, so they wont be visable unless manually changed\n\t\tthis.numParticles = numberOfStartingParticles;\n\n\t\tthis.fadePerSecond = 0.0;\n\t\tthis.sizeChangePerSecond = 1.0;\n\t\tthis.lifeTime = 1.0;\n\t}\n\n\tsetNumParticles(amount: number) {\n\t\tthis.numParticles = amount;\n\n\t\tthis.bindVAO();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\n\t\tgl.bufferData(gl.ARRAY_BUFFER, this.numParticles * 11 * 4, gl.DYNAMIC_DRAW);\n\t\tthis.unbindVAO();\n\t}\n\n\tgetNumberOfParticles(): number {\n\t\treturn this.numParticles;\n\t}\n\n\tsetParticleData(\n\t\tparticleIndex: number,\n\t\tstartPosition: vec3,\n\t\tsize: number,\n\t\tstartVel: vec3,\n\t\tacceleration: vec3,\n\t\tstartTime?: number\n\t): boolean {\n\t\tif (particleIndex > this.numParticles) {\n\t\t\treturn false;\n\t\t}\n\t\tlet time = (Date.now() - applicationStartTime) * 0.001;\n\n\t\tif (startTime != undefined) {\n\t\t\ttime = startTime;\n\t\t}\n\n\t\tlet data = new Float32Array([\n\t\t\tstartPosition[0],\n\t\t\tstartPosition[1],\n\t\t\tstartPosition[2],\n\t\t\tsize,\n\t\t\tstartVel[0],\n\t\t\tstartVel[1],\n\t\t\tstartVel[2],\n\t\t\ttime,\n\t\t\tacceleration[0],\n\t\t\tacceleration[1],\n\t\t\tacceleration[2],\n\t\t]);\n\n\t\tthis.bufferSubDataUpdate(particleIndex * 11, data);\n\n\t\treturn true;\n\t}\n\n\tsetParticleStartPosition(particleIndex: number, position: vec3): boolean {\n\t\tif (particleIndex > this.numParticles) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.bufferSubDataUpdate(particleIndex * 11, <Float32Array>position);\n\t\treturn true;\n\t}\n\n\tsetParticleSize(particleIndex: number, size: number): boolean {\n\t\tif (particleIndex > this.numParticles) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 3, new Float32Array([size]));\n\t\treturn true;\n\t}\n\n\tsetParticleStartVelocity(particleIndex: number, vel: vec3): boolean {\n\t\tif (particleIndex > this.numParticles) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 4, <Float32Array>vel);\n\t\treturn true;\n\t}\n\n\tsetParticleStartTime(particleIndex: number, time: number): boolean {\n\t\tif (particleIndex > this.numParticles) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 7, new Float32Array([time]));\n\t\treturn true;\n\t}\n\n\tresetParticleStartTime(particleIndex: number): boolean {\n\t\tif (particleIndex > this.numParticles) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.bufferSubDataUpdate(\n\t\t\tparticleIndex * 11 + 7,\n\t\t\tnew Float32Array([(Date.now() - applicationStartTime) * 0.001])\n\t\t);\n\t\treturn true;\n\t}\n\n\tsetParticleAcceleration(particleIndex: number, acc: vec3): boolean {\n\t\tif (particleIndex > this.numParticles) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.bufferSubDataUpdate(particleIndex * 11 + 8, <Float32Array>acc);\n\t\treturn true;\n\t}\n\n\tprivate bufferSubDataUpdate(start: number, data: Float32Array): boolean {\n\t\tif (start > this.numParticles * 11) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.bindVAO();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.instanceVBO);\n\t\tgl.bufferSubData(gl.ARRAY_BUFFER, start * 4, data);\n\t\tthis.unbindVAO();\n\t\treturn true;\n\t}\n\n\tdraw() {\n\t\tthis.bindVAO();\n\n\t\tthis.texture.bind(0);\n\t\tgl.uniform1f(this.shaderProgram.getUniformLocation(\"fadePerSecond\")[0], this.fadePerSecond);\n\t\tgl.uniform1f(\n\t\t\tthis.shaderProgram.getUniformLocation(\"sizeChangePerSecond\")[0],\n\t\t\tthis.sizeChangePerSecond\n\t\t);\n\t\tgl.uniform1f(\n\t\t\tthis.shaderProgram.getUniformLocation(\"lifeTime\")[0],\n\t\t\tthis.lifeTime\n\t\t);\n\n\t\tgl.drawElementsInstanced(gl.TRIANGLES, 6, gl.UNSIGNED_INT, 0, this.getNumberOfParticles());\n\t\tthis.unbindVAO();\n\t}\n}\n","import DirectionalLight from \"../Objects/Lighting/DirectionalLight\";\nimport PointLight from \"../Objects/Lighting/PointLight\";\nimport GraphicsBundle from \"../Objects/GraphicsBundle\";\nimport ShaderProgram from \"./ShaderPrograms/ShaderProgram\";\nimport Texture from \"../AssetHandling/Textures/Texture\";\nimport { meshStore, textureStore } from \"../../../Engine\";\nimport { geometryPassShaderProgram } from \"./ShaderPrograms/DeferredRendering/GeometryPassShaderProgram\";\nimport Mesh from \"../Objects/GraphicsObjects/Mesh\";\nimport ParticleSpawner from \"../Objects/GraphicsObjects/ParticleSpawner\";\nimport { particleShaderProgram } from \"./ShaderPrograms/Particles/ParticleShaderProgram\";\n\nexport default class Scene {\n\t// ---- Graphics objects ----\n\tprivate graphicBundles: Array<GraphicsBundle>;\n\tparticleSpawners: Array<ParticleSpawner>;\n\t// --------------------------\n\n\t// ---- Lights ----\n\tdirectionalLight: DirectionalLight;\n\tpointLights: Array<PointLight>;\n\t// ----------------\n\n\tconstructor() {\n\n\t\t// ---- Graphics objects ----\n\t\tthis.graphicBundles = new Array<GraphicsBundle>();\n\t\tthis.particleSpawners = new Array<ParticleSpawner>();\n\t\t// --------------------------\n\n\t\t// ---- Lighting ----\n\t\tthis.directionalLight = new DirectionalLight();\n\t\tthis.pointLights = new Array<PointLight>();\n\t\t// ------------------\n\t}\n\n\taddNewMesh(meshPath: string, diffusePath: string, specularPath: string): GraphicsBundle {\n\t\tconst length = this.graphicBundles.push(\n\t\t\tnew GraphicsBundle(\n\t\t\t\ttextureStore.getTexture(diffusePath),\n\t\t\t\ttextureStore.getTexture(specularPath),\n\t\t\t\t\n\t\t\t\tmeshStore.getMesh(geometryPassShaderProgram, meshPath)\n\t\t\t)\n\t\t);\n\t\n\t\treturn this.graphicBundles[length - 1];\n\t}\n\n\taddNewParticleSpawner(\n\t\ttexturePath: string,\n\t\tnumberOfStartingParticles: number = 0\n\t): ParticleSpawner {\n\t\tlet length = this.particleSpawners.push(\n\t\t\tnew ParticleSpawner(\n\t\t\t\tparticleShaderProgram,\n\t\t\t\ttextureStore.getTexture(texturePath),\n\t\t\t\tnumberOfStartingParticles\n\t\t\t)\n\t\t);\n\t\treturn this.particleSpawners[length - 1];\n\t}\n\n\n\taddNewPointLight(): PointLight {\n\t\tconst length = this.pointLights.push(new PointLight());\n\t\treturn this.pointLights[length - 1];\n\t}\n\n\tgetDirectionalLight(): DirectionalLight {\n\t\treturn this.directionalLight;\n\t}\n\n\tdeleteGraphicsBundle(object: GraphicsBundle) {\n\t\tthis.graphicBundles = this.graphicBundles.filter((o) => object !== o);\n\t}\n\n\tdeletePointLight(light: PointLight) {\n\t\tthis.pointLights = this.pointLights.filter((l) => light !== l);\n\t}\n\n\tcalculateAllTransforms() {\n\t\tfor (let bundle of this.graphicBundles) {\n\t\t\tbundle.transform.calculateMatrix();\n\t\t}\n\t}\n\n\trenderScene(shaderProgram: ShaderProgram, bindSpecialTextures: boolean = true) {\n\t\tfor (let bundle of this.graphicBundles) {\n\t\t\tbundle.graphicsObject.shaderProgram = shaderProgram;\n\t\t\tbundle.draw(bindSpecialTextures);\n\t\t}\n\t}\n}\n","import CubeMap from \"./Textures/CubeMap\";\nimport Texture from \"./Textures/Texture\";\n\nexport default class TextureStore {\n\tprivate textures: Map<string, Texture>;\n\tprivate cubeMaps: Map<string, CubeMap>;\n\n\tconstructor() {\n\t\tthis.textures = new Map<string, Texture>();\n\t\tthis.cubeMaps = new Map<string, CubeMap>();\n\t}\n\n\tsetTexture(path: string, texture: Texture) {\n\t\tthis.textures.set(path, texture);\n\t}\n\n\tgetTexture(path: string): Texture {\n\t\tlet tex = this.textures.get(path);\n\t\tif (tex) {\n\t\t\treturn tex;\n\t\t}\n\n\t\tlet newTexture = new Texture();\n\t\tconst CSSPrefix = \"CSS:\";\n\t\tif (path.startsWith(CSSPrefix)) {\n\t\t\t// Hex value color\n\t\t\tnewTexture.createFromCSSColorValue(path.substring(CSSPrefix.length));\n\t\t} else {\n\t\t\tnewTexture.loadFromFile(path);\n\t\t}\n\n\t\tthis.textures.set(path, newTexture);\n\t\treturn newTexture;\n\t}\n\n\tgetCubeMap(path: string): CubeMap {\n\t\tlet cubeMap = this.cubeMaps.get(path);\n\t\tif (cubeMap) {\n\t\t\treturn cubeMap;\n\t\t}\n\n\t\tlet newCubeMap = new CubeMap();\n\t\tnewCubeMap.loadCubemap([\n\t\t\tpath + \"/right.png\",\n\t\t\tpath + \"/left.png\",\n\t\t\tpath + \"/bottom.png\",\n\t\t\tpath + \"/top.png\",\n\t\t\tpath + \"/front.png\",\n\t\t\tpath + \"/back.png\",\n\t\t]);\n\t\tthis.cubeMaps.set(path, newCubeMap);\n\t\treturn newCubeMap;\n\t}\n}\n","import GraphicsObject from \"./GraphicsObject\";\nimport ShaderProgram from \"../../Renderer/ShaderPrograms/ShaderProgram\";\nimport { gl } from \"../../Renderer/Renderer\";\nimport { vec3 } from \"gl-matrix\";\n\nexport default class Mesh extends GraphicsObject {\n\t// Protected\n\tprotected vertices: Float32Array;\n\n\tconstructor(shaderProgram: ShaderProgram, vertices: Float32Array) {\n\t\tsuper(shaderProgram);\n\n\t\tthis.vertices = vertices;\n\t\tthis.setVertexData(this.vertices);\n\t}\n\n\tsetVertexData(data: Float32Array) {\n\t\tsuper.setVertexData(data);\n\t\tthis.vertices = data;\n\t}\n\n\tgetVertexPositions(): Array<vec3> {\n\t\tlet returnArr = new Array<vec3>();\n\t\tfor (let i = 0; i < this.vertices.length; i += 8) {\n\t\t\treturnArr.push(vec3.fromValues(this.vertices[i], this.vertices[i + 1], this.vertices[i + 2]));\n\t\t}\n\t\treturn returnArr;\n\t}\n\n\tdraw() {\n\t\tif (this.vertices != undefined && this.vertices.length > 0) {\n\t\t\tthis.bindVAO();\n\t\t\tgl.drawArrays(gl.TRIANGLES, 0, this.vertices.length / 8);\n\t\t}\n\t}\n}\n","import Heightmap from \"../Objects/GraphicsObjects/Heightmap\";\nimport Mesh from \"../Objects/GraphicsObjects/Mesh\";\nimport ShaderProgram from \"../Renderer/ShaderPrograms/ShaderProgram\";\nimport Texture from \"./Textures/Texture\";\nimport TextureStore from \"./TextureStore\";\nimport { vec2, vec3 } from \"gl-matrix\";\n\nexport default class MeshStore {\n\tprivate meshMap: Map<string, Mesh>;\n\tprivate heightmapMap: Map<string, Heightmap>;\n\tprivate textureStore: TextureStore;\n\n\tconstructor(textureStore: TextureStore) {\n\t\tthis.meshMap = new Map<string, Mesh>();\n\t\tthis.heightmapMap = new Map<string, Heightmap>();\n\t\tthis.textureStore = textureStore;\n\t}\n\n\tgetMesh(shaderProgram: ShaderProgram, path: string, printWarnings: boolean = true): Mesh {\n\t\tlet mesh = this.meshMap.get(path);\n\t\tif (mesh) {\n\t\t\treturn mesh;\n\t\t}\n\t\n\t\tthis.meshMap.set(path, new Mesh(shaderProgram, null));\n\t\tlet newlyCreatedMesh = this.meshMap.get(path);\n\t\tthis.parseObjContent(path).then((data) => {\n\t\t\tnewlyCreatedMesh.setVertexData(data);\n\t\t});\n\t\n\t\treturn newlyCreatedMesh;\n\t}\n\n\tprivate async parseObjContent(meshPath: string): Promise<Float32Array> {\n\t\t/*\n\t\thttps://webglfundamentals.org/webgl/lessons/webgl-load-obj.html\n\t\t*/\n\n\t\tconst response = await fetch(meshPath);\n\t\tconst objContent = await response.text();\n\n\t\tconst lines = objContent.split(\"\\n\");\n\t\tlet vertexPositions = new Array<vec3>();\n\t\tlet vertexTexCoords = new Array<vec2>();\n\t\tlet vertexNormals = new Array<vec3>();\n\t\tlet vertices = new Array<{\n\t\t\tposIndex: number;\n\t\t\ttexCoordIndex: number;\n\t\t\tnormalIndex: number;\n\t\t\tmtlIndex: number;\n\t\t}>();\n\t\tlet mtls = new Map<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tdiffuseColor: vec3;\n\t\t\t\tspecularColor: vec3;\n\t\t\t\temissionColor: vec3;\n\t\t\t\tdissolve: number;\n\t\t\t\tspriteIndex: number;\n\t\t\t}\n\t\t>();\n\t\tlet usingMtl: string = \"\";\n\n\t\tfor (let line of lines) {\n\t\t\tline = line.trim();\n\n\t\t\tif (line.startsWith(\"mtllib\")) {\n\t\t\t\tconst mtlName = line.split(/\\s+/).filter((element) => {\n\t\t\t\t\treturn element != \"mtllib\";\n\t\t\t\t});\n\t\t\t\tif (mtlName.length == 1) {\n\t\t\t\t\tlet mtlPath = meshPath.substring(0, meshPath.lastIndexOf(\"/\") + 1) + mtlName;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst mtlResponse = await fetch(mtlPath);\n\n\t\t\t\t\t\tif (mtlResponse.ok) {\n\t\t\t\t\t\t\tconst mtlContent = await mtlResponse.text();\n\t\t\t\t\t\t\tlet lastMtl: string = \"\";\n\t\t\t\t\t\t\tlet index = 0;\n\n\t\t\t\t\t\t\tfor (const row of mtlContent.split(\"\\n\")) {\n\t\t\t\t\t\t\t\tif (row.startsWith(\"newmtl\")) {\n\t\t\t\t\t\t\t\t\tlet splitRow = row.split(/\\s+/);\n\t\t\t\t\t\t\t\t\tif (splitRow.length > 1) {\n\t\t\t\t\t\t\t\t\t\tlastMtl = splitRow[1];\n\t\t\t\t\t\t\t\t\t\tmtls.set(lastMtl, {\n\t\t\t\t\t\t\t\t\t\t\tdiffuseColor: vec3.create(),\n\t\t\t\t\t\t\t\t\t\t\tspecularColor: vec3.create(),\n\t\t\t\t\t\t\t\t\t\t\temissionColor: vec3.create(),\n\t\t\t\t\t\t\t\t\t\t\tdissolve: 1.0,\n\t\t\t\t\t\t\t\t\t\t\tspriteIndex: index,\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (row.startsWith(\"Kd\") && lastMtl != \"\") {\n\t\t\t\t\t\t\t\t\tconst colorValues = row.split(/\\s+/).filter((element) => {\n\t\t\t\t\t\t\t\t\t\treturn element != \"Kd\";\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (colorValues.length > 2) {\n\t\t\t\t\t\t\t\t\t\tvec3.set(\n\t\t\t\t\t\t\t\t\t\t\tmtls.get(lastMtl).diffuseColor,\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[0]),\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[1]),\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[2])\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (row.startsWith(\"Ks\") && lastMtl != \"\") {\n\t\t\t\t\t\t\t\t\tconst colorValues = row.split(/\\s+/).filter((element) => {\n\t\t\t\t\t\t\t\t\t\treturn element != \"Ks\";\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (colorValues.length > 2) {\n\t\t\t\t\t\t\t\t\t\tvec3.set(\n\t\t\t\t\t\t\t\t\t\t\tmtls.get(lastMtl).specularColor,\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[0]),\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[1]),\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[2])\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (row.startsWith(\"Ke\") && lastMtl != \"\") {\n\t\t\t\t\t\t\t\t\tconst colorValues = row.split(/\\s+/).filter((element) => {\n\t\t\t\t\t\t\t\t\t\treturn element != \"Ke\";\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (colorValues.length > 2) {\n\t\t\t\t\t\t\t\t\t\tvec3.set(\n\t\t\t\t\t\t\t\t\t\t\tmtls.get(lastMtl).emissionColor,\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[0]),\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[1]),\n\t\t\t\t\t\t\t\t\t\t\tparseFloat(colorValues[2])\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else if (row.startsWith(\"d\") && lastMtl != \"\") {\n\t\t\t\t\t\t\t\t\tconst colorValues = row.split(/\\s+/).filter((element) => {\n\t\t\t\t\t\t\t\t\t\treturn element != \"d\";\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (colorValues.length > 0) {\n\t\t\t\t\t\t\t\t\t\tmtls.get(lastMtl).dissolve = parseFloat(colorValues[0]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet diffuseTextureData = new Uint8Array(index * 4);\n\t\t\t\t\t\t\tfor (let mtl of mtls) {\n\t\t\t\t\t\t\t\tdiffuseTextureData[mtl[1].spriteIndex * 4 + 0] = mtl[1].diffuseColor[0] * 255;\n\t\t\t\t\t\t\t\tdiffuseTextureData[mtl[1].spriteIndex * 4 + 1] = mtl[1].diffuseColor[1] * 255;\n\t\t\t\t\t\t\t\tdiffuseTextureData[mtl[1].spriteIndex * 4 + 2] = mtl[1].diffuseColor[2] * 255;\n\t\t\t\t\t\t\t\tdiffuseTextureData[mtl[1].spriteIndex * 4 + 3] = mtl[1].dissolve * 255;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tlet tempTexture = new Texture(false);\n\t\t\t\t\t\t\ttempTexture.setTextureData(diffuseTextureData, index, 1);\n\t\t\t\t\t\t\tthis.textureStore.setTexture(mtlPath, tempTexture);\n\n\t\t\t\t\t\t\tlet specularTextureData = new Uint8Array(index * 4);\n\t\t\t\t\t\t\tfor (let mtl of mtls) {\n\t\t\t\t\t\t\t\tspecularTextureData[mtl[1].spriteIndex * 4 + 0] = mtl[1].specularColor[0] * 255;\n\t\t\t\t\t\t\t\tspecularTextureData[mtl[1].spriteIndex * 4 + 1] = mtl[1].specularColor[1] * 255;\n\t\t\t\t\t\t\t\tspecularTextureData[mtl[1].spriteIndex * 4 + 2] = mtl[1].specularColor[2] * 255;\n\t\t\t\t\t\t\t\tspecularTextureData[mtl[1].spriteIndex * 4 + 3] = 255;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempTexture = new Texture(false);\n\t\t\t\t\t\t\ttempTexture.setTextureData(specularTextureData, index, 1);\n\t\t\t\t\t\t\tthis.textureStore.setTexture(\n\t\t\t\t\t\t\t\tmtlPath.substring(0, mtlPath.length - 4) + \"_spec.mtl\",\n\t\t\t\t\t\t\t\ttempTexture\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tlet emissionTextureData = new Uint8Array(index * 4);\n\t\t\t\t\t\t\tfor (let mtl of mtls) {\n\t\t\t\t\t\t\t\temissionTextureData[mtl[1].spriteIndex * 4 + 0] = mtl[1].emissionColor[0] * 255;\n\t\t\t\t\t\t\t\temissionTextureData[mtl[1].spriteIndex * 4 + 1] = mtl[1].emissionColor[1] * 255;\n\t\t\t\t\t\t\t\temissionTextureData[mtl[1].spriteIndex * 4 + 2] = mtl[1].emissionColor[2] * 255;\n\t\t\t\t\t\t\t\temissionTextureData[mtl[1].spriteIndex * 4 + 3] = 255;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\ttempTexture = new Texture(false);\n\t\t\t\t\t\t\ttempTexture.setTextureData(emissionTextureData, index, 1);\n\t\t\t\t\t\t\tthis.textureStore.setTexture(\n\t\t\t\t\t\t\t\tmtlPath.substring(0, mtlPath.length - 4) + \"_emission.mtl\",\n\t\t\t\t\t\t\t\ttempTexture\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {}\n\t\t\t\t}\n\t\t\t} else if (line.startsWith(\"usemtl\") && mtls.size > 0) {\n\t\t\t\tusingMtl = line.split(/\\s+/)[1];\n\t\t\t} else if (line.startsWith(\"vt\")) {\n\t\t\t\t// Texture coordinates\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\n\t\t\t\t\treturn element != \"vt\";\n\t\t\t\t});\n\t\t\t\tvertexTexCoords.push(vec2.fromValues(parseFloat(coords[0]), parseFloat(coords[1])));\n\t\t\t} else if (line.startsWith(\"vn\")) {\n\t\t\t\t// Normal\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\n\t\t\t\t\treturn element != \"vn\";\n\t\t\t\t});\n\t\t\t\tvertexNormals.push(\n\t\t\t\t\tvec3.fromValues(parseFloat(coords[0]), parseFloat(coords[1]), parseFloat(coords[2]))\n\t\t\t\t);\n\t\t\t} else if (line.startsWith(\"v\")) {\n\t\t\t\t// Position\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\n\t\t\t\t\treturn element != \"v\";\n\t\t\t\t});\n\t\t\t\tvertexPositions.push(\n\t\t\t\t\tvec3.fromValues(parseFloat(coords[0]), parseFloat(coords[1]), parseFloat(coords[2]))\n\t\t\t\t);\n\t\t\t} else if (line.startsWith(\"f\")) {\n\t\t\t\t// Faces\n\t\t\t\tconst coords = line.split(/\\s+/).filter((element) => {\n\t\t\t\t\treturn element != \"f\";\n\t\t\t\t});\n\t\t\t\tfor (let i = 0; i < coords.length - 2; i++) {\n\t\t\t\t\tfor (let j = 0; j < 3; j++) {\n\t\t\t\t\t\tlet index = j == 0 ? 0 : i + j; // 0 if j is zero, otherwize i +j\n\t\t\t\t\t\tconst indices = coords[index].split(\"/\");\n\n\t\t\t\t\t\tconst last = vertices.push({\n\t\t\t\t\t\t\tposIndex: NaN,\n\t\t\t\t\t\t\ttexCoordIndex: NaN,\n\t\t\t\t\t\t\tnormalIndex: NaN,\n\t\t\t\t\t\t\tmtlIndex: NaN,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif (indices.length > 0) {\n\t\t\t\t\t\t\tvertices[last - 1].posIndex = parseInt(indices[0]) - 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (indices.length > 1) {\n\t\t\t\t\t\t\tvertices[last - 1].texCoordIndex = parseInt(indices[1]) - 1; // Can be empty, texCoordIndex will then be NaN\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (indices.length > 2) {\n\t\t\t\t\t\t\tvertices[last - 1].normalIndex = parseInt(indices[2]) - 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (usingMtl != \"\") {\n\t\t\t\t\t\t\tconst mtl = mtls.get(usingMtl);\n\t\t\t\t\t\t\tif (mtl != undefined) {\n\t\t\t\t\t\t\t\tvertices[last - 1].mtlIndex = mtl.spriteIndex;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.warn(\"usemtl \" + usingMtl + \", there is no such mtl\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (line.startsWith(\"#\")) {\n\t\t\t\t// A comment, ignore\n\t\t\t} else if (line.length > 0) {\n\t\t\t\t// Unhandled keywords\n\t\t\t\t// console.warn(\"OBJ loader: Unhandled keyword \" + line.split(/\\s+/)[0]);\n\t\t\t}\n\t\t}\n\n\t\tlet returnArr = new Float32Array(vertices.length * 8); // 3 * pos + 3 * norm + 2 * tx\n\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tif (!isNaN(vertices[i].posIndex)) {\n\t\t\t\treturnArr[i * 8] = vertexPositions[vertices[i].posIndex][0];\n\t\t\t\treturnArr[i * 8 + 1] = vertexPositions[vertices[i].posIndex][1];\n\t\t\t\treturnArr[i * 8 + 2] = vertexPositions[vertices[i].posIndex][2];\n\t\t\t} else {\n\t\t\t\treturnArr[i * 8] = 0.0;\n\t\t\t\treturnArr[i * 8 + 1] = 0.0;\n\t\t\t\treturnArr[i * 8 + 2] = 0.0;\n\t\t\t}\n\n\t\t\tif (!isNaN(vertices[i].normalIndex)) {\n\t\t\t\treturnArr[i * 8 + 3] = vertexNormals[vertices[i].normalIndex][0];\n\t\t\t\treturnArr[i * 8 + 4] = vertexNormals[vertices[i].normalIndex][1];\n\t\t\t\treturnArr[i * 8 + 5] = vertexNormals[vertices[i].normalIndex][2];\n\t\t\t} else {\n\t\t\t\treturnArr[i * 8 + 3] = 1.0;\n\t\t\t\treturnArr[i * 8 + 4] = 0.0;\n\t\t\t\treturnArr[i * 8 + 5] = 0.0;\n\t\t\t}\n\n\t\t\tif (!isNaN(vertices[i].mtlIndex)) {\n\t\t\t\treturnArr[i * 8 + 6] = vertices[i].mtlIndex / mtls.size + 0.5 / mtls.size;\n\t\t\t\treturnArr[i * 8 + 7] = 0.5;\n\t\t\t} else if (!isNaN(vertices[i].texCoordIndex)) {\n\t\t\t\treturnArr[i * 8 + 6] = vertexTexCoords[vertices[i].texCoordIndex][0];\n\t\t\t\treturnArr[i * 8 + 7] = vertexTexCoords[vertices[i].texCoordIndex][1];\n\t\t\t} else {\n\t\t\t\treturnArr[i * 8 + 6] = 0.0;\n\t\t\t\treturnArr[i * 8 + 7] = 0.0;\n\t\t\t}\n\t\t}\n\t\treturn returnArr;\n\t}\n}\n","import { vec2 } from \"gl-matrix\";\nimport Div from \"./Div\";\n\nexport default class GuiObject {\n\tprotected position2D: vec2;\n\tprotected fontSize: number;\n\tscaleWithWindow: boolean;\n\ttextString: string;\n\tcenter: boolean;\n\n\tremoved: boolean;\n\n\tprivate domElement: HTMLElement;\n\tprotected div: HTMLDivElement;\n\n\treadonly hasParent: boolean;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tthis.removed = false;\n\t\tthis.position2D = vec2.create();\n\t\tthis.fontSize = 42;\n\t\tthis.scaleWithWindow = true;\n\t\tthis.textString = \"\";\n\t\tthis.center = false;\n\n\t\tthis.domElement = domElement;\n\n\t\t// make the div\n\t\tthis.div = document.createElement(\"div\");\n\t\tthis.div.style.position = \"absolute\";\n\t\tthis.div.style.width = \"fit-content\";\n\t\tthis.div.style.height = \"fit-content\";\n\t\tthis.div.style.userSelect = \"none\";\n\n\t\tif (parentDiv != undefined) {\n\t\t\tparentDiv.appendChild(this);\n\t\t\tthis.hasParent = true;\n\t\t} else {\n\t\t\t// add it to the domElement\n\t\t\tdomElement.appendChild(this.div);\n\t\t\tthis.hasParent = false;\n\t\t}\n\t}\n\n\tgetElement(): HTMLDivElement {\n\t\treturn this.div;\n\t}\n\n\tgetHidden(): boolean {\n\t\treturn this.div.hidden;\n\t}\n\n\tsetHidden(hidden: boolean) {\n\t\tthis.div.hidden = hidden;\n\t}\n\n\ttoggleHidden(): boolean {\n\t\tthis.div.hidden = !this.div.hidden;\n\t\treturn this.div.hidden;\n\t}\n\n\tremove() {\n\t\tthis.div.remove();\n\t\tthis.removed = true;\n\t}\n\n\tprotected drawObject() {\n\t\tthis.div.style.left = this.position2D[0] * 100 + \"%\";\n\t\tthis.div.style.top = this.position2D[1] * 100 + \"%\";\n\t\tif (this.scaleWithWindow) {\n\t\t\tthis.div.style.fontSize = this.fontSize * (this.domElement.clientHeight / 1080.0) + \"px\";\n\t\t} else {\n\t\t\tthis.div.style.fontSize = this.fontSize + \"px\";\n\t\t}\n\n\t\tif (this.center) {\n\t\t\tthis.div.style.transform = \"translate(-50%,-50%)\";\n\t\t}\n\t}\n\n\tdraw() {}\n}\n","import { vec2 } from \"gl-matrix\";\nimport Div from \"./Div\";\nimport GuiObject from \"./GuiObject\";\n\nexport default class Button extends GuiObject {\n\tposition: vec2;\n\ttextSize: number;\n\n\tprivate inputNode: HTMLInputElement;\n\tprivate onClickFunction: any;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tsuper(domElement, parentDiv);\n\t\tthis.position = vec2.create();\n\t\tthis.textSize = 42;\n\n\t\t// make an input node and a label node\n\t\tthis.inputNode = document.createElement(\"input\");\n\t\tthis.inputNode.type = \"button\";\n\t\tthis.inputNode.className = \"button\";\n\n\t\tthis.div.appendChild(this.inputNode);\n\t}\n\n\tgetElement(): HTMLDivElement {\n\t\treturn this.div;\n\t}\n\n\tgetInputElement(): HTMLInputElement {\n\t\treturn this.inputNode;\n\t}\n\n\tonClick(fn: any) {\n\t\tthis.onClickFunction = fn;\n\t\tthis.inputNode.addEventListener(\"click\", this.onClickFunction);\n\t}\n\n\tremove(): void {\n\t\tif (this.onClickFunction != undefined) {\n\t\t\tthis.inputNode.removeEventListener(\"click\", this.onClickFunction);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tdraw() {\n\t\tthis.position2D = this.position;\n\t\tthis.inputNode.value = this.textString;\n\t\tthis.fontSize = this.textSize;\n\n\t\tthis.drawObject();\n\t}\n}\n","import { vec2 } from \"gl-matrix\";\nimport Div from \"./Div\";\nimport GuiObject from \"./GuiObject\";\n\nexport default class Checkbox extends GuiObject {\n\tposition: vec2;\n\ttextSize: number;\n\n\tprivate inputNode: HTMLInputElement;\n\tprivate label: HTMLLabelElement;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tsuper(domElement, parentDiv);\n\t\tthis.position = vec2.create();\n\t\tthis.textSize = 42;\n\n\t\t// make an input node and a label node\n\t\tlet container = document.createElement(\"label\");\n\t\tcontainer.className = \"checkboxContainer\";\n\n\t\tthis.label = document.createElement(\"label\");\n\n\t\tthis.inputNode = document.createElement(\"input\");\n\t\tthis.inputNode.type = \"checkbox\";\n\n\t\tlet checkmarkNode = document.createElement(\"span\");\n\t\tcheckmarkNode.className = \"checkmark\";\n\n\t\tcontainer.appendChild(this.label);\n\t\tcontainer.appendChild(this.inputNode);\n\t\tcontainer.appendChild(checkmarkNode);\n\n\t\tthis.div.appendChild(container);\n\t}\n\n\tgetElement(): HTMLDivElement {\n\t\treturn this.div;\n\t}\n\n\tgetInputElement(): HTMLInputElement {\n\t\treturn this.inputNode;\n\t}\n\n\tgetChecked(): boolean {\n\t\treturn this.inputNode.checked;\n\t}\n\n\tdraw() {\n\t\tthis.position2D = this.position;\n\t\tthis.fontSize = this.textSize;\n\t\tthis.label.textContent = this.textString;\n\t\tthis.drawObject();\n\t}\n}\n","import { vec2 } from \"gl-matrix\";\nimport GuiObject from \"./GuiObject\";\n\nexport default class Div extends GuiObject {\n\tposition: vec2;\n\tsize: number;\n\tchildren: Array<GuiObject>;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tsuper(domElement, parentDiv);\n\n\t\tthis.position = vec2.create();\n\t\tthis.size = 42;\n\t\tthis.children = new Array<GuiObject>();\n\t}\n\n\tappendChild(childObj: GuiObject) {\n\t\tthis.children.push(childObj);\n\t\tthis.div.appendChild(childObj.getElement());\n\t}\n\n\tdraw(): void {\n\t\tthis.position2D = this.position;\n\t\tthis.fontSize = this.size;\n\t\tthis.drawObject();\n\t}\n}\n","import GuiObject from \"./GuiObject\";\nimport Div from \"./Div\";\nimport { vec2 } from \"gl-matrix\";\n\nexport default class Progress extends GuiObject {\n\tposition: vec2;\n\tsize: number;\n\n\tprivate progressNode: HTMLProgressElement;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tsuper(domElement, parentDiv);\n\n\t\tthis.position = vec2.create();\n\t\tthis.size = 42;\n\n\t\t// make a text node for its content\n\t\tthis.progressNode = document.createElement(\"progress\");\n\t\tthis.div.appendChild(this.progressNode);\n\t}\n\n\tgetProgressElement(): HTMLProgressElement {\n\t\treturn this.progressNode;\n\t}\n\n\tdraw(): void {\n\t\tthis.position2D = this.position;\n\t\tthis.fontSize = this.size;\n\t\tthis.progressNode.textContent = this.textString;\n\t\tthis.drawObject();\n\t}\n}\n","import { vec2 } from \"gl-matrix\";\nimport Div from \"./Div\";\nimport GuiObject from \"./GuiObject\";\n\nexport default class Slider extends GuiObject {\n\tposition: vec2;\n\ttextSize: number;\n\n\tprivate inputNode: HTMLInputElement;\n\tprivate label: HTMLLabelElement;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tsuper(domElement, parentDiv);\n\t\tthis.position = vec2.create();\n\t\tthis.textSize = 42;\n\n\t\t// make an input node and a label node\n\t\tthis.inputNode = document.createElement(\"input\");\n\t\tthis.inputNode.type = \"range\";\n\t\tthis.inputNode.className = \"slider\";\n\n\t\tthis.label = document.createElement(\"label\");\n\t\tthis.label.textContent = this.textString;\n\t\tthis.label.className = \"sliderLabel\";\n\n\t\tthis.div.appendChild(this.label);\n\t\tthis.div.appendChild(this.inputNode);\n\t}\n\n\tgetElement(): HTMLDivElement {\n\t\treturn this.div;\n\t}\n\n\tgetInputElement(): HTMLInputElement {\n\t\treturn this.inputNode;\n\t}\n\n\tgetValue(): number {\n\t\treturn Number(this.inputNode.value);\n\t}\n\n\tdraw() {\n\t\tthis.position2D = this.position;\n\t\tthis.fontSize = this.textSize;\n\t\tthis.label.textContent = this.textString;\n\t\tsuper.drawObject();\n\t}\n}\n","import { vec2 } from \"gl-matrix\";\nimport Div from \"../Div\";\nimport GuiObject from \"../GuiObject\";\n\nexport default class EditText extends GuiObject {\n\tposition: vec2;\n\ttextSize: number;\n\n\tprivate inputNode: HTMLInputElement;\n\tprivate label: HTMLLabelElement;\n\tprivate onChangeFn: any;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tsuper(domElement, parentDiv);\n\t\tthis.position = vec2.create();\n\t\tthis.textSize = 42;\n\n\t\t// make an input node and a label node\n\t\tthis.inputNode = document.createElement(\"input\");\n\t\tthis.inputNode.type = \"text\";\n\n\t\tthis.label = document.createElement(\"label\");\n\t\tthis.label.textContent = this.textString;\n\n\t\tthis.div.appendChild(this.label);\n\t\tthis.div.appendChild(this.inputNode);\n\t}\n\n\tgetElement(): HTMLDivElement {\n\t\treturn this.div;\n\t}\n\n\tgetInputElement(): HTMLInputElement {\n\t\treturn this.inputNode;\n\t}\n\n\tonChange(fn: any) {\n\t\tthis.onChangeFn = fn;\n\t\tthis.inputNode.addEventListener(\"change\", this.onChangeFn);\n\t}\n\n\tremove() {\n\t\tif (this.onChangeFn != undefined) {\n\t\t\tthis.inputNode.removeEventListener(\"change\", this.onChangeFn);\n\t\t}\n\t\tsuper.remove();\n\t}\n\n\tdraw() {\n\t\tthis.position2D = this.position;\n\t\tthis.fontSize = this.textSize;\n\t\tthis.label.textContent = this.textString;\n\t\tthis.drawObject();\n\t}\n}\n","import { vec2 } from \"gl-matrix\";\nimport Div from \"../Div\";\nimport GuiObject from \"../GuiObject\";\n\nexport default class TextObject2D extends GuiObject {\n\tposition: vec2;\n\tsize: number;\n\n\tconstructor(domElement: HTMLDivElement, parentDiv?: Div) {\n\t\tsuper(domElement, parentDiv);\n\n\t\tthis.position = vec2.create();\n\t\tthis.size = 42;\n\t}\n\n\tdraw(): void {\n\t\tthis.position2D = this.position;\n\t\tthis.fontSize = this.size;\n\t\tthis.div.textContent = this.textString;\n\t\tthis.drawObject();\n\t}\n}\n","import { mat4, vec3, vec4 } from \"gl-matrix\";\nimport GuiObject from \"../GuiObject\";\n\nexport default class TextObject3D extends GuiObject {\n\tposition: vec3;\n\tsize: number;\n\tscaleFontWithDistance: boolean;\n\n\tprivate hidden: boolean;\n\n\tconstructor(domElement: HTMLDivElement) {\n\t\tsuper(domElement);\n\n\t\tthis.position = vec3.create();\n\t\tthis.size = 42;\n\t\tthis.scaleFontWithDistance = true;\n\t}\n\n\tsetHidden(hidden: boolean) {\n\t\tsuper.setHidden(hidden);\n\t\tthis.hidden = hidden;\n\t}\n\n\tdraw3D(viewProj: mat4): void {\n\t\tlet pos = vec4.fromValues(this.position[0], this.position[1], this.position[2], 1.0);\n\t\tlet screenCoords = vec4.transformMat4(vec4.create(), pos, viewProj);\n\t\tscreenCoords[0] = (screenCoords[0] / screenCoords[3] + 1.0) / 2.0;\n\t\tscreenCoords[1] = 1.0 - (screenCoords[1] / screenCoords[3] + 1.0) / 2.0;\n\n\t\tif (screenCoords[2] > 0.0 && !this.hidden) {\n\t\t\tthis.position2D[0] = screenCoords[0];\n\t\t\tthis.position2D[1] = screenCoords[1];\n\n\t\t\tlet size = this.size;\n\t\t\tif (this.scaleFontWithDistance) {\n\t\t\t\tsize = this.size / screenCoords[2];\n\t\t\t}\n\t\t\tthis.fontSize = size;\n\n\t\t\tthis.div.hidden = false;\n\t\t\tthis.div.textContent = this.textString;\n\t\t\tthis.drawObject();\n\t\t} else {\n\t\t\tthis.div.hidden = true;\n\t\t}\n\t}\n}\n","import Camera from \"../Objects/Camera\";\nimport Button from \"./Objects/Button\";\nimport Checkbox from \"./Objects/Checkbox\";\nimport Div from \"./Objects/Div\";\nimport GuiObject from \"./Objects/GuiObject\";\nimport Progress from \"./Objects/Progress\";\nimport Slider from \"./Objects/Slider\";\nimport EditText from \"./Objects/Text/EditText\";\nimport TextObject2D from \"./Objects/Text/TextObject2D\";\nimport TextObject3D from \"./Objects/Text/TextObject3D\";\n\nexport class GUIRenderer {\n\t// ---- GUI rendering ----\n\tprivate guiObjects3D: Array<TextObject3D>;\n\tprivate guiObjects2D: Array<GuiObject>;\n\t// -----------------------\n\n\tdomElement: HTMLDivElement;\n\n\tconstructor() {\n\t\t// ---- GUI rendering ----\n\t\tthis.guiObjects3D = new Array<TextObject3D>();\n\t\tthis.guiObjects2D = new Array<GuiObject>();\n\t\t// -----------------------\n\t\t\n\t\tthis.domElement = document.createElement(\"div\");\n\t\tthis.domElement.style.overflow = \"hidden\";\n\t}\n\n\tsetSize(width: number, height: number) {\n\t\tthis.domElement.style.width = width + \"px\";\n\t\tthis.domElement.style.height = height + \"px\";\n\t}\n\n\tclear() {\n\t\tfor (let guiObject2D of this.guiObjects2D) {\n\t\t\tguiObject2D.remove();\n\t\t}\n\n\t\tfor (let guiObject3D of this.guiObjects3D) {\n\t\t\tguiObject3D.remove();\n\t\t}\n\t}\n\n\thide() {\n\t\tfor (let guiObject2D of this.guiObjects2D) {\n\t\t\tif (!guiObject2D.hasParent) {\n\t\t\t\t// Only change top level objects\n\t\t\t\tguiObject2D.setHidden(true);\n\t\t\t}\n\t\t}\n\n\t\tfor (let guiObject3D of this.guiObjects3D) {\n\t\t\tguiObject3D.setHidden(true);\n\t\t}\n\t}\n\n\tshow() {\n\t\tfor (let guiObject2D of this.guiObjects2D) {\n\t\t\tif (!guiObject2D.hasParent) {\n\t\t\t\t// Only change top level objects\n\t\t\t\tguiObject2D.setHidden(false);\n\t\t\t}\n\t\t}\n\n\t\tfor (let guiObject3D of this.guiObjects3D) {\n\t\t\tguiObject3D.setHidden(false);\n\t\t}\n\t}\n\n\tgetNew3DText(): TextObject3D {\n\t\tconst length = this.guiObjects3D.push(new TextObject3D(this.domElement));\n\t\treturn this.guiObjects3D[length - 1];\n\t}\n\n\tgetNew2DText(parentDiv?: Div): TextObject2D {\n\t\tconst length = this.guiObjects2D.push(new TextObject2D(this.domElement, parentDiv));\n\t\treturn this.guiObjects2D[length - 1] as TextObject2D;\n\t}\n\n\tgetNewCheckbox(parentDiv?: Div): Checkbox {\n\t\tconst length = this.guiObjects2D.push(new Checkbox(this.domElement, parentDiv));\n\t\treturn this.guiObjects2D[length - 1] as Checkbox;\n\t}\n\n\tgetNewButton(parentDiv?: Div): Button {\n\t\tconst length = this.guiObjects2D.push(new Button(this.domElement, parentDiv));\n\t\treturn this.guiObjects2D[length - 1] as Button;\n\t}\n\n\tgetNewSlider(parentDiv?: Div): Slider {\n\t\tconst length = this.guiObjects2D.push(new Slider(this.domElement, parentDiv));\n\t\treturn this.guiObjects2D[length - 1] as Slider;\n\t}\n\n\tgetNewEditText(parentDiv?: Div): EditText {\n\t\tconst length = this.guiObjects2D.push(new EditText(this.domElement, parentDiv));\n\t\treturn this.guiObjects2D[length - 1] as EditText;\n\t}\n\n\tgetNewProgress(parentDiv?: Div): Progress {\n\t\tconst length = this.guiObjects2D.push(new Progress(this.domElement, parentDiv));\n\t\treturn this.guiObjects2D[length - 1] as Progress;\n\t}\n\n\tgetNewDiv(parentDiv?: Div): Div {\n\t\tconst length = this.guiObjects2D.push(new Div(this.domElement, parentDiv));\n\t\treturn this.guiObjects2D[length - 1] as Div;\n\t}\n\n\tdraw(camera: Camera) {\n\t\t// ---- GUI rendering ----\n\t\tfor (let i = 0; i < this.guiObjects3D.length; i++) {\n\t\t\tif (!this.guiObjects3D[i].removed) {\n\t\t\t\tthis.guiObjects3D[i].draw3D(camera.getViewProjMatrix());\n\t\t\t} else {\n\t\t\t\tthis.guiObjects3D.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < this.guiObjects2D.length; i++) {\n\t\t\tif (!this.guiObjects2D[i].removed) {\n\t\t\t\tthis.guiObjects2D[i].draw();\n\t\t\t} else {\n\t\t\t\tthis.guiObjects2D.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\t// -----------------------\n\t}\n}\n","import { quat, vec3 } from \"gl-matrix\";\nimport { IntersectionTester } from \"./IntersectionTester\";\nimport PhysicsObject from \"./Objects/PhysicsObject\";\nimport { mat4 } from \"../../../Engine\";\n\nexport module CollisionSolver {\n\texport function getTranslationNeeded(\n\t\tintersectionInformation: Array<IntersectionTester.IntersectionInformation>\n\t): vec3 {\n\t\tif (intersectionInformation.length == 0) {\n\t\t\treturn vec3.create();\n\t\t}\n\n\t\t// Displace along the axis which has the most depth\n\t\tlet resultingVec = vec3.create();\n\t\tlet maxDepth = 0.0;\n\t\tfor (let inf of intersectionInformation) {\n\t\t\t// Only displace for triangles if it is along the normal\n\t\t\tif (inf.shapeB.getTransformedNormals().length == 1) {\n\t\t\t\tif (vec3.dot(inf.axis, inf.shapeB.getTransformedNormals()[0]) < 0.99) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (inf.depth > maxDepth) {\n\t\t\t\tvec3.copy(resultingVec, inf.axis);\n\t\t\t\tmaxDepth = inf.depth;\n\t\t\t}\n\t\t}\n\t\tvec3.scale(resultingVec, resultingVec, maxDepth);\n\n\t\treturn resultingVec;\n\t}\n\n\texport function handleCollision(\n\t\tintersectionInformation: Array<IntersectionTester.IntersectionInformation>,\n\t\tpo1: PhysicsObject,\n\t\tpo2: PhysicsObject\n\t) {\n\t\tfor (let inf of intersectionInformation) {\n\t\t\tlet axis = vec3.clone(inf.axis);\n\t\t\tif (inf.shapeB.getTransformedNormals().length == 1) {\n\t\t\t\tvec3.copy(axis, inf.shapeB.getTransformedNormals()[0]);\n\t\t\t} else if (inf.shapeA.getTransformedNormals().length == 1) {\n\t\t\t\tvec3.copy(axis, inf.shapeA.getTransformedNormals()[0]);\n\t\t\t\tvec3.negate(axis, axis); // Make sure axis is always pointing from b to a\n\t\t\t}\n\n\t\t\tlet e1Vel = po1.velocity;\n\t\t\tlet e2Vel = po2.velocity;\n\n\t\t\tlet velDifference = vec3.sub(vec3.create(), e1Vel, e2Vel);\n\t\t\tlet dotProd = vec3.dot(velDifference, axis);\n\t\t\tif (dotProd < 0.0) {\n\t\t\t\tlet eN = vec3.cross(vec3.create(), vec3.cross(vec3.create(), velDifference, axis), axis);\n\n\t\t\t\tif (vec3.squaredLength(eN) > 0.0001) {\n\t\t\t\t\tvec3.normalize(eN, eN);\n\t\t\t\t}\n\n\t\t\t\tlet e1Change = vec3.create();\n\t\t\t\tlet e2Change = vec3.create();\n\n\t\t\t\tlet collisionCoefficient = Math.max(po1.collisionCoefficient, po2.collisionCoefficient); // TODO: This can be calculated differently, will be based on material abilities in the future\n\t\t\t\tlet frictionCoefficient = Math.min(po1.frictionCoefficient, po2.frictionCoefficient); // TODO: This can be calculated differently, will be based on material abilities in the future\n\n\t\t\t\tif (\n\t\t\t\t\tpo1 &&\n\t\t\t\t\t!po1.isStatic &&\n\t\t\t\t\t!po1.isImmovable &&\n\t\t\t\t\tpo2 &&\n\t\t\t\t\t!po2.isStatic &&\n\t\t\t\t\t!po2.isImmovable\n\t\t\t\t) {\n\t\t\t\t\tlet v1Dot = vec3.dot(e1Vel, axis);\n\t\t\t\t\tlet v2Dot = vec3.dot(e2Vel, axis);\n\t\t\t\t\tlet tangentVel1 = vec3.dot(velDifference, eN);\n\t\t\t\t\tlet tangentVel2 = -tangentVel1;\n\t\t\t\t\tlet u1Dot =\n\t\t\t\t\t\t((po1.mass - collisionCoefficient * po2.mass) /\n\t\t\t\t\t\t\t(po1.mass + po2.mass)) *\n\t\t\t\t\t\t\tv1Dot +\n\t\t\t\t\t\t(((1.0 + collisionCoefficient) * po2.mass) /\n\t\t\t\t\t\t\t(po1.mass + po2.mass)) *\n\t\t\t\t\t\t\tv2Dot;\n\t\t\t\t\tlet u2Dot =\n\t\t\t\t\t\t((po2.mass - collisionCoefficient * po1.mass) /\n\t\t\t\t\t\t\t(po2.mass + po1.mass)) *\n\t\t\t\t\t\t\tv2Dot +\n\t\t\t\t\t\t(((1.0 + collisionCoefficient) * po1.mass) /\n\t\t\t\t\t\t\t(po2.mass + po1.mass)) *\n\t\t\t\t\t\t\tv1Dot;\n\n\t\t\t\t\tlet frictionMagnitude1 = \n\t\t\t\t\t\t-tangentVel1 * Math.min(frictionCoefficient, frictionCoefficient * Math.abs(u1Dot - v1Dot));\n\t\t\t\t\tlet frictionMagnitude2 = \n\t\t\t\t\t\t-tangentVel2 * Math.min(frictionCoefficient, frictionCoefficient * Math.abs(u2Dot - v2Dot));\n\n\t\t\t\t\tvec3.scaleAndAdd(e1Change, e1Change, axis, u1Dot - v1Dot);\n\t\t\t\t\tvec3.scaleAndAdd(e1Change, e1Change, eN, frictionMagnitude1);\n\n\t\t\t\t\tvec3.scaleAndAdd(e2Change, e2Change, axis, u2Dot - v2Dot);\n\t\t\t\t\tvec3.scaleAndAdd(e2Change, e2Change, eN, frictionMagnitude2);\n\t\t\t\t} else if (po1.isStatic || po1.isImmovable) {\n\t\t\t\t\tlet inverseVelDifference = vec3.negate(vec3.create(), velDifference);\n\t\t\t\t\tlet v2Dot = vec3.dot(inverseVelDifference, axis);\n\t\t\t\t\tlet relativeTangentVel = vec3.dot(inverseVelDifference, eN);\n\t\t\t\t\tlet frictionMagnitude = relativeTangentVel * Math.min(frictionCoefficient, frictionCoefficient * Math.abs(v2Dot));\n\n\t\t\t\t\tvec3.scaleAndAdd(e2Change, e2Change, axis, -v2Dot * (1.0 + collisionCoefficient));\n\t\t\t\t\tvec3.scaleAndAdd(e2Change, e2Change, eN, -frictionMagnitude);\n\t\t\t\t} else if (po2.isStatic || po2.isImmovable) {\n\t\t\t\t\tlet v1Dot = vec3.dot(velDifference, axis);\n\t\t\t\t\tlet relativeTangentVel = vec3.dot(velDifference, eN);\n\t\t\t\t\tlet frictionMagnitude = relativeTangentVel * Math.min(frictionCoefficient, frictionCoefficient * Math.abs(v1Dot));\n\n\t\t\t\t\tvec3.scaleAndAdd(e1Change, e1Change, axis, -v1Dot * (1.0 + collisionCoefficient));\n\t\t\t\t\tvec3.scaleAndAdd(e1Change, e1Change, eN, -frictionMagnitude);\n\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\tvec3.add(e1Vel, e1Vel, e1Change);\n\t\t\t\tif (e1Change[1] > 0.0) {\n\t\t\t\t\tpo1.onGround = true;\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t\tvec3.add(e2Vel, e2Vel, e2Change);\n\t\t\t\tif (e2Change[1] > 0.0) {\n\t\t\t\t\tpo2.onGround = true;\n\t\t\t\t}\n\n\t\t\t\tlet displacement = CollisionSolver.getTranslationNeeded([inf]);\n\n\t\t\t\tif (!po1.isImmovable && !po1.isStatic) {\n\t\t\t\t\tpo1.transform.translate( vec3.scale(\n\t\t\t\t\t\tvec3.create(),\n\t\t\t\t\t\tdisplacement,\n\t\t\t\t\t\tvec3.len(e1Change) / (vec3.len(e1Change) + vec3.len(e2Change))\n\t\t\t\t\t));\n\t\t\t\t}\n\n\t\t\t\tif (!po2.isImmovable && !po2.isStatic) {\n\t\t\t\t\tpo2.transform.translate(vec3.scale(\n\t\t\t\t\t\tvec3.create(),\n\t\t\t\t\t\tdisplacement,\n\t\t\t\t\t\t-vec3.len(e2Change) / (vec3.len(e1Change) + vec3.len(e2Change))\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import { ReadonlyVec3, vec3 } from \"gl-matrix\";\nimport Shape from \"../Physics/Shapes/Shape\";\n\nexport module SAT {\n\t/**\n\t * Finds how big of an overlap there is between two sets of points along a vector.\n\t * @param overlapVector The vector to test along.\n\t * @param shapeAVertices Points in set A\n\t * @param shapeBVertices Points in set B\n\t * @param reverse An object holding a variable \"value\" that is set to true if the vector should be flipped in order to have the vector point from dataset B towards dataset A.\n\t * Is set by this function.\n\t * @returns How big the overlap is, returns -1.0 if there is no overlap.\n\t */\n\texport function getOverlap(\n\t\toverlapVector: vec3,\n\t\tshapeAVertices: Array<vec3>,\n\t\tshapeBVertices: Array<vec3>,\n\t\treverse: { value: boolean },\n\t\tmargin: number\n\t): number {\n\t\tlet maxA = vec3.dot(overlapVector, shapeAVertices[0]);\n\t\tlet minA = maxA;\n\t\tlet maxB = vec3.dot(overlapVector, shapeBVertices[0]);\n\t\tlet minB = maxB;\n\n\t\tlet tempDot = 0.0;\n\n\t\tfor (let i = 1; i < shapeAVertices.length; i++) {\n\t\t\ttempDot = vec3.dot(overlapVector, shapeAVertices[i]);\n\t\t\tminA = Math.min(tempDot, minA);\n\t\t\tmaxA = Math.max(tempDot, maxA);\n\t\t}\n\n\t\tfor (let i = 1; i < shapeBVertices.length; i++) {\n\t\t\ttempDot = vec3.dot(overlapVector, shapeBVertices[i]);\n\t\t\tminB = Math.min(tempDot, minB);\n\t\t\tmaxB = Math.max(tempDot, maxB);\n\t\t}\n\n\t\tlet overlap1 = maxB - minA;\n\t\tlet overlap2 = maxA - minB;\n\t\tif (overlap1 >= -margin && overlap2 >= -margin) {\n\t\t\tif (overlap1 > overlap2) {\n\t\t\t\treverse.value = true;\n\t\t\t\treturn overlap2;\n\t\t\t} else {\n\t\t\t\treverse.value = false;\n\t\t\t\treturn overlap1;\n\t\t\t}\n\t\t}\n\n\t\treturn -1.0;\n\t}\n\n\t/**\n\t * Finds if two sets of vertices will overlap along an axis given their relative speed within the time frame (time input object).\n\t * Will alter the first collision time and last collision time in the info object, as well as copy the test vec to the intersectionVec in the info object\n\t * @param testVec The axis for overlap\n\t * @param shapeAVertices Vertices for shape A\n\t * @param shapeBVertices Vertices for shape B\n\t * @param relativeVelocity Relative velocity between the shapes\n\t * @param info info object which contains - time for first, last, max. Max is how soon the overlap has to happen to count. Also holds the intersection vector for the first overlap\n\t * @returns If an overlap happens within the timeframe (info.max)\n\t */\n\texport function getContinousOverlap(\n\t\ttestVec: vec3,\n\t\tshapeAVertices: Array<vec3>,\n\t\tshapeBVertices: Array<vec3>,\n\t\trelativeVelocity: vec3,\n\t\tinfo: { first: number; last: number; max: number; intersectionVec: vec3 }\n\t): boolean {\n\t\tlet minA = Infinity,\n\t\t\tminB = Infinity;\n\t\tlet maxA = -Infinity,\n\t\t\tmaxB = -Infinity;\n\n\t\tlet tempDot = 0.0;\n\n\t\tfor (const vert of shapeAVertices) {\n\t\t\ttempDot = vec3.dot(vert, testVec);\n\n\t\t\tminA = Math.min(minA, tempDot);\n\t\t\tmaxA = Math.max(maxA, tempDot);\n\t\t}\n\n\t\tfor (const vert of shapeBVertices) {\n\t\t\ttempDot = vec3.dot(vert, testVec);\n\n\t\t\tminB = Math.min(minB, tempDot);\n\t\t\tmaxB = Math.max(maxB, tempDot);\n\t\t}\n\n\t\t//Following found here: https://www.geometrictools.com/Documentation/MethodOfSeparatingAxes.pdf\n\n\t\tlet T: number;\n\t\tlet speed = vec3.dot(testVec, relativeVelocity);\n\n\t\tif (maxB <= minA) {\n\t\t\tif (speed <= 0.0) {\n\t\t\t\t// Interval (B) initially on ‘left’ of interval (A)\n\t\t\t\treturn false; // Intervals moving apart\n\t\t\t}\n\n\t\t\tT = (minA - maxB) / speed;\n\t\t\tif (T > info.first) {\n\t\t\t\tinfo.first = T;\n\t\t\t\tvec3.copy(info.intersectionVec, testVec);\n\t\t\t}\n\t\t\tif (info.first > info.max) {\n\t\t\t\treturn false;\n\t\t\t} // Early exit\n\n\t\t\tT = (maxA - minB) / speed;\n\t\t\tif (T < info.last) {\n\t\t\t\tinfo.last = T;\n\t\t\t}\n\t\t\tif (info.first > info.last) {\n\t\t\t\treturn false;\n\t\t\t} // Early exit\n\t\t} else if (maxA <= minB) {\n\t\t\t// Interval (B) initially on ‘right’ of interval (A)\n\t\t\tif (speed >= 0.0) {\n\t\t\t\treturn false;\n\t\t\t} // Intervals moving apart\n\n\t\t\tT = (maxA - minB) / speed;\n\t\t\tif (T > info.first) {\n\t\t\t\tinfo.first = T;\n\t\t\t\tvec3.copy(info.intersectionVec, testVec);\n\t\t\t}\n\t\t\tif (info.first > info.max) {\n\t\t\t\treturn false;\n\t\t\t} // Early exit\n\n\t\t\tT = (minA - maxB) / speed;\n\t\t\tif (T < info.last) {\n\t\t\t\tinfo.last = T;\n\t\t\t}\n\t\t\tif (info.first > info.last) {\n\t\t\t\treturn false;\n\t\t\t} // Early exit\n\t\t} else {\n\t\t\t// Interval (A) and interval (B) overlap\n\t\t\tif (speed > 0.0) {\n\t\t\t\tT = (maxA - minB) / speed;\n\t\t\t\tif (T < info.last) {\n\t\t\t\t\tinfo.last = T;\n\t\t\t\t}\n\t\t\t\tif (info.first > info.last) {\n\t\t\t\t\treturn false;\n\t\t\t\t} // Early exit\n\t\t\t} else if (speed < 0.0) {\n\t\t\t\tT = (minA - maxB) / speed;\n\t\t\t\tif (T < info.last) {\n\t\t\t\t\tinfo.last = T;\n\t\t\t\t}\n\t\t\t\tif (info.first > info.last) {\n\t\t\t\t\treturn false;\n\t\t\t\t} // Early exit\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * This will find the average point of intersection between two shapes along an axis.\n\t * This assumes that the shapes are intersecting and can not be used to find out IF two shapes are intersecting.\n\t * @param shapeA Shape A\n\t * @param shapeB Shape B\n\t * @param testAxis The axis to test along.\n\t * @returns The average point of intersection.\n\t */\n\texport function getIntersectionPoint(shapeA: Shape, shapeB: Shape, testAxis: vec3): vec3 {\n\t\tlet shapeAVertices = shapeA.getTransformedVertices();\n\t\tlet shapeBVertices = shapeB.getTransformedVertices();\n\n\t\tlet maxAPoints: Array<number> = new Array<number>();\n\t\tlet minAPoints: Array<number> = new Array<number>();\n\t\tlet maxBPoints: Array<number> = new Array<number>();\n\t\tlet minBPoints: Array<number> = new Array<number>();\n\n\t\tlet maxA = vec3.dot(testAxis, shapeAVertices[0]);\n\t\tmaxAPoints.push(0);\n\t\tlet minA = maxA;\n\t\tminAPoints.push(0);\n\t\tlet maxB = vec3.dot(testAxis, shapeBVertices[0]);\n\t\tmaxBPoints.push(0);\n\t\tlet minB = maxB;\n\t\tminBPoints.push(0);\n\n\t\tlet tempDot = 0.0;\n\n\t\tfor (let i = 1; i < shapeAVertices.length; i++) {\n\t\t\ttempDot = vec3.dot(testAxis, shapeAVertices[i]);\n\t\t\tif (tempDot < minA) {\n\t\t\t\tminA = tempDot;\n\t\t\t\tminAPoints.length = 0;\n\t\t\t\tminAPoints.push(i);\n\t\t\t} else if (Math.abs(tempDot - minA) < 0.0001) {\n\t\t\t\tminAPoints.push(i);\n\t\t\t}\n\t\t\tif (tempDot > maxA) {\n\t\t\t\tmaxA = tempDot;\n\t\t\t\tmaxAPoints.length = 0;\n\t\t\t\tmaxAPoints.push(i);\n\t\t\t} else if (Math.abs(tempDot - maxA) < 0.0001) {\n\t\t\t\tmaxAPoints.push(i);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 1; i < shapeBVertices.length; i++) {\n\t\t\ttempDot = vec3.dot(testAxis, shapeBVertices[i]);\n\t\t\tif (tempDot < minB) {\n\t\t\t\tminB = tempDot;\n\t\t\t\tminBPoints.length = 0;\n\t\t\t\tminBPoints.push(i);\n\t\t\t} else if (Math.abs(tempDot - minB) < 0.0001) {\n\t\t\t\tminBPoints.push(i);\n\t\t\t}\n\t\t\tif (tempDot > maxB) {\n\t\t\t\tmaxB = tempDot;\n\t\t\t\tmaxBPoints.length = 0;\n\t\t\t\tmaxBPoints.push(i);\n\t\t\t} else if (Math.abs(tempDot - maxB) < 0.0001) {\n\t\t\t\tmaxBPoints.push(i);\n\t\t\t}\n\t\t}\n\n\t\tlet overlap1 = Math.abs(maxB - minA);\n\t\tlet overlap2 = Math.abs(maxA - minB);\n\n\t\t// let averagePoint = new Vec3();\n\t\t// let nrPoints = 0;\n\t\tlet intersectionPoint = vec3.create();\n\n\t\tif (overlap1 > overlap2) {\n\t\t\t// overlap2\n\t\t\t// for (const p of maxAPoints) {\n\t\t\t// \taveragePoint.add(shapeAVertices[p]);\n\t\t\t// \tnrPoints++;\n\t\t\t// }\n\t\t\t// for (const p of minBPoints) {\n\t\t\t// \taveragePoint.add(shapeBVertices[p]);\n\t\t\t// \tnrPoints++;\n\t\t\t// }\n\n\t\t\tif (maxAPoints.length == 1) {\n\t\t\t\tvec3.copy(intersectionPoint, shapeAVertices[maxAPoints[0]]);\n\t\t\t} else if (minBPoints.length == 1) {\n\t\t\t\tvec3.copy(intersectionPoint, shapeBVertices[minBPoints[0]]);\n\t\t\t}\n\t\t} else {\n\t\t\t// overlap1;\n\t\t\t// for (const p of minAPoints) {\n\t\t\t// \taveragePoint.add(shapeAVertices[p]);\n\t\t\t// \tnrPoints++;\n\t\t\t// }\n\t\t\t// for (const p of maxBPoints) {\n\t\t\t// \taveragePoint.add(shapeBVertices[p]);\n\t\t\t// \tnrPoints++;\n\t\t\t// }\n\n\t\t\tif (minAPoints.length == 1) {\n\t\t\t\tvec3.copy(intersectionPoint, shapeAVertices[minAPoints[0]]);\n\t\t\t} else if (maxBPoints.length == 1) {\n\t\t\t\tvec3.copy(intersectionPoint, shapeBVertices[maxBPoints[0]]);\n\t\t\t}\n\t\t}\n\t\t// averagePoint.multiply(1.0 / nrPoints);\n\t\treturn intersectionPoint;\n\t}\n\n\t/**\n\t * Intersection testing of two shapes.\n\t * @param shapeA Shape A\n\t * @param shapeB Shape B\n\t * @param intersectionAxis The minimum translation vector (MTV).\n\t * This is the axis at which the shapes are intersecting the least.\n\t * Is set by this function.\n\t * Will always point from Shape B towards Shape A.\n\t * @param intersectionDepth An object holding a variable \"depth\" that will state how much the shapes are intersecting.\n\t * Is set by this function\n\t * @returns Boolean stating if the shapes intersect or not.\n\t */\n\texport function getIntersection3D(\n\t\tshapeA: Shape,\n\t\tshapeB: Shape,\n\t\tintersectionAxis: vec3,\n\t\tintersectionDepth: { depth: number }\n\t): boolean {\n\t\tintersectionDepth.depth = Infinity;\n\n\t\tlet shapeAVertices = shapeA.getTransformedVertices();\n\t\tlet shapeBVertices = shapeB.getTransformedVertices();\n\n\t\t// Check normal and update intersection depth and axis if shallower than previous\n\t\tlet checkNormal = function (normal: vec3): boolean {\n\t\t\tlet reverse = { value: false };\n\t\t\tlet overlap = SAT.getOverlap(\n\t\t\t\tnormal,\n\t\t\t\tshapeAVertices,\n\t\t\t\tshapeBVertices,\n\t\t\t\treverse,\n\t\t\t\tshapeA.margin + shapeB.margin\n\t\t\t);\n\n\t\t\tif (overlap < 0.0) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (overlap < intersectionDepth.depth) {\n\t\t\t\tintersectionDepth.depth = overlap;\n\t\t\t\tvec3.copy(intersectionAxis, normal);\n\t\t\t\tif (reverse.value) {\n\t\t\t\t\tvec3.scale(intersectionAxis, intersectionAxis, -1);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\tlet shapeBNormals = shapeB.getTransformedNormals();\n\t\tfor (let normal of shapeBNormals) {\n\t\t\tif (!checkNormal(normal)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tlet shapeANormals = shapeA.getTransformedNormals();\n\t\tfor (let normal of shapeANormals) {\n\t\t\tif (!checkNormal(normal)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// The shapes are intersecting along all normals\n\t\t// Two cases are possible;\n\t\t// 1. The shapes are flat and coplanar -> We need to test the shapes in \"2d\", projected on the plane they are on\n\t\t// 2. The shapes are not flat and coplanar -> We need to test the cross products of all the edges of ShapeA with the edges of ShapeB\n\n\t\t// Lets start with the coplanar possibility, which can be checked by seeing if both shapes have only one normal, and the two shapes normals are perpendicular\n\t\t// Side note; If the normals are perpendicular, but the shapes are not coplanar, the previous tests would have found a seperating axis, so we wouldn't have gotten here\n\n\t\tif (shapeANormals.length == 1 && shapeBNormals.length == 1) {\n\t\t\t// Coplanar possible\n\t\t\tlet crossVector = vec3.cross(vec3.create(), shapeANormals[0], shapeBNormals[0]);\n\n\t\t\tif (crossVector[0] == 0.0 && crossVector[1] == 0.0 && crossVector[2] == 0.0) {\n\t\t\t\t// Coplanar\n\t\t\t\t// Test the edge normals for all edges\n\t\t\t\tfor (const AEdgeNormal of shapeA.getTransformedEdgeNormals()) {\n\t\t\t\t\tif (!checkNormal(AEdgeNormal)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const BEdgeNormal of shapeB.getTransformedEdgeNormals()) {\n\t\t\t\t\tif (!checkNormal(BEdgeNormal)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// There is an intersection, return it\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Calculate cross vectors of edges and test along the results\n\t\tfor (const e1 of shapeA.getTransformedEdges()) {\n\t\t\tfor (const e2 of shapeB.getTransformedEdges()) {\n\t\t\t\tconst dotProd = vec3.dot(e1, e2);\n\t\t\t\tif (dotProd < 0.99 && dotProd > -0.99) {\n\t\t\t\t\tlet testVec = vec3.clone(e1);\n\t\t\t\t\tvec3.normalize(testVec, vec3.cross(testVec, testVec, e2));\n\t\t\t\t\tif (!checkNormal(testVec)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Check when an intersection will occur (if it happens before timeMax).\n\t * @param shapeA\n\t * @param shapeB\n\t * @param velocityA\n\t * @param velocityB\n\t * @param timeMax\n\t * @returns Returns time of intersection if there is one within timeMax, otherwise returns Infinity\n\t */\n\texport function getContinousIntersection3D(\n\t\tshapeA: Shape,\n\t\tshapeB: Shape,\n\t\tvelocityA: ReadonlyVec3,\n\t\tvelocityB: ReadonlyVec3,\n\t\ttimeMax: number\n\t): [number, vec3] {\n\t\t// Treat shapeA as stationary and shapeB as moving\n\t\tlet relativeVel = vec3.subtract(vec3.create(), velocityB, velocityA);\n\n\t\tlet info = {\n\t\t\tfirst: 0.0,\n\t\t\tlast: Infinity,\n\t\t\tmax: timeMax,\n\t\t\tintersectionVec: vec3.create(),\n\t\t};\n\n\t\tlet shapeAVertices = shapeA.getTransformedVertices();\n\t\tlet shapeBVertices = shapeB.getTransformedVertices();\n\n\t\tlet shapeANormals = shapeA.getTransformedNormals();\n\t\tfor (let normal of shapeANormals) {\n\t\t\tif (!getContinousOverlap(normal, shapeAVertices, shapeBVertices, relativeVel, info)) {\n\t\t\t\treturn [Infinity, null];\n\t\t\t}\n\t\t}\n\n\t\tlet shapeBNormals = shapeB.getTransformedNormals();\n\t\tfor (let normal of shapeBNormals) {\n\t\t\tif (!getContinousOverlap(normal, shapeAVertices, shapeBVertices, relativeVel, info)) {\n\t\t\t\treturn [Infinity, null];\n\t\t\t}\n\t\t}\n\n\t\t// The shapes are intersecting along all normals\n\t\t// Two cases are possible;\n\t\t// 1. The shapes are flat and coplanar -> We need to test the shapes in \"2d\", projected on the plane they are on\n\t\t// 2. The shapes are not flat and coplanar -> We need to test the cross products of all the edges of ShapeA with the edges of ShapeB\n\n\t\t// Lets start with the coplanar possibility, which can be checked by seeing if both shapes have only one normal, and the two shapes normals are perpendicular\n\t\t// Side note; If the normals are perpendicular, but the shapes are not coplanar, the previous tests would have found a seperating axis, so we wouldn't have gotten here\n\n\t\tif (shapeANormals.length == 1 && shapeBNormals.length == 1) {\n\t\t\t// Coplanar possible\n\t\t\tlet crossVector = vec3.cross(vec3.create(), shapeANormals[0], shapeBNormals[0]);\n\n\t\t\tif (crossVector[0] == 0.0 && crossVector[1] == 0.0 && crossVector[2] == 0.0) {\n\t\t\t\t// Coplanar\n\t\t\t\t// Test the edge normals for all edges\n\t\t\t\tfor (const AEdgeNormal of shapeA.getTransformedEdgeNormals()) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!getContinousOverlap(AEdgeNormal, shapeAVertices, shapeBVertices, relativeVel, info)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn [Infinity, null];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfor (const BEdgeNormal of shapeB.getTransformedEdgeNormals()) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!getContinousOverlap(BEdgeNormal, shapeAVertices, shapeBVertices, relativeVel, info)\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn [Infinity, null];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// There is an intersection\n\t\t\t\t// If the intersection is NOT exactly at 0.0 and never again, return it\n\t\t\t\tif (info.last == 0.0) {\n\t\t\t\t\treturn [Infinity, null];\n\t\t\t\t}\n\t\t\t\treturn [info.first, info.intersectionVec];\n\t\t\t}\n\t\t}\n\n\t\t// Calculate cross vectors of edges and test along the results\n\t\tfor (const e1 of shapeA.getTransformedEdges()) {\n\t\t\tfor (const e2 of shapeB.getTransformedEdges()) {\n\t\t\t\tconst dotProd = vec3.dot(e1, e2);\n\t\t\t\tif (dotProd < 0.99 && dotProd > -0.99) {\n\t\t\t\t\tlet testVec = vec3.clone(e1);\n\t\t\t\t\tvec3.normalize(testVec, vec3.cross(testVec, testVec, e2));\n\t\t\t\t\tif (!getContinousOverlap(testVec, shapeAVertices, shapeBVertices, relativeVel, info)) {\n\t\t\t\t\t\treturn [Infinity, null];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the intersection is NOT exactly at 0.0 and never again, return it\n\t\tif (info.last == 0.0) {\n\t\t\treturn [Infinity, null];\n\t\t}\n\t\treturn [info.first, info.intersectionVec];\n\t}\n}\n","import { ReadonlyVec3, vec3 } from \"gl-matrix\";\nimport { SAT } from \"../Maths/SAT\";\nimport Ray from \"./Shapes/Ray\";\nimport Shape from \"./Shapes/Shape\";\n\nexport module IntersectionTester {\n\t/**\n\t *\n\t */\n\texport class IntersectionInformation {\n\t\taxis: vec3;\n\t\tdepth: number;\n\t\tpoint: vec3;\n\t\tshapeA: Shape;\n\t\tshapeB: Shape;\n\n\t\t/**\n\t\t * Holds information about an intersection\n\t\t * @param axis Normalized axis for the minimum translation vector (mtv)\n\t\t * @param depth The magnitude of the mtv\n\t\t * @param point The point of intersection (Under construction, not fully accurate yet)\n\t\t * @param shapeA The shape of physical object A that is intersecting\n\t\t * @param shapeB The shape of physical object B that is intersecting\n\t\t */\n\t\tconstructor(axis: vec3, depth: number, point: vec3, shapeA: Shape, shapeB: Shape) {\n\t\t\tthis.axis = vec3.clone(axis);\n\t\t\tthis.depth = depth;\n\t\t\tthis.point = vec3.clone(point);\n\t\t\tthis.shapeA = shapeA;\n\t\t\tthis.shapeB = shapeB;\n\t\t}\n\t}\n\n\t/**\n\t * Will check if there is an intersection between two meshes.\n\t * @param shapeArrayA List of shapes in physical object A.\n\t * @param shapeArrayB List of shapes in physical object B.\n\t * @returns if there is an intersection.\n\t */\n\texport function identifyIntersection(\n\t\tshapeArrayA: Array<Shape>,\n\t\tshapeArrayB: Array<Shape>\n\t): boolean {\n\t\tlet intersectionAxis = vec3.create();\n\t\tlet intersectionDepth = { depth: Infinity };\n\t\tfor (let shapeA of shapeArrayA) {\n\t\t\tfor (let shapeB of shapeArrayB) {\n\t\t\t\tif (SAT.getIntersection3D(shapeA, shapeB, intersectionAxis, intersectionDepth)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Finds the intersection information (axises, depths, and points) between two physical objects, if they intersect\n\t * @param shapeArrayA List of shapes in physical object A.\n\t * @param shapeArrayB List of shapes in physical object B.\n\t * @param intersectionInformation An array that gets filled with information about all intersections happening between the two objects.\n\t * @returns If there is an intersection.\n\t */\n\texport function identifyIntersectionInformation(\n\t\tshapeArrayA: Array<Shape>,\n\t\tshapeArrayB: Array<Shape>,\n\t\tintersectionInformation: Array<IntersectionInformation>\n\t): boolean {\n\t\tlet intersecting = false;\n\t\tlet tempIntersectionAxis = vec3.create();\n\t\tlet tempIntersectionDepth = { depth: Infinity };\n\n\t\tfor (let shapeA of shapeArrayA) {\n\t\t\tfor (let shapeB of shapeArrayB) {\n\t\t\t\tif (SAT.getIntersection3D(shapeA, shapeB, tempIntersectionAxis, tempIntersectionDepth)) {\n\t\t\t\t\tintersecting = true;\n\n\t\t\t\t\t// Save information about intersection\n\t\t\t\t\tintersectionInformation.push(\n\t\t\t\t\t\tnew IntersectionInformation(\n\t\t\t\t\t\t\ttempIntersectionAxis,\n\t\t\t\t\t\t\ttempIntersectionDepth.depth,\n\t\t\t\t\t\t\tSAT.getIntersectionPoint(shapeA, shapeB, tempIntersectionAxis),\n\t\t\t\t\t\t\tshapeA,\n\t\t\t\t\t\t\tshapeB\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn intersecting;\n\t}\n\n\t/**\n\t * Finds the closest ray cast hit between a ray and an array of shapes\n\t * @param ray Ray shape\n\t * @param shapeArray shape array to cast against\n\t * @param maxDistance The furthest allowed hit\n\t * @param breakOnFirstHit If the first hit should be returned immediately\n\t * @returns the closest hit\n\t */\n\texport function doRayCast(\n\t\tray: Ray,\n\t\tshapeArray: Array<Shape>,\n\t\tmaxDistance: number = Infinity,\n\t\tbreakOnFirstHit: boolean = false\n\t): number {\n\t\tlet closestHit = Infinity;\n\n\t\tfor (const shape of shapeArray) {\n\t\t\tlet [dist, _] = SAT.getContinousIntersection3D(\n\t\t\t\tray,\n\t\t\t\tshape,\n\t\t\t\tray.getDir(),\n\t\t\t\tvec3.create(),\n\t\t\t\tmaxDistance\n\t\t\t);\n\t\t\tif (dist < closestHit) {\n\t\t\t\tclosestHit = dist;\n\t\t\t\tmaxDistance = closestHit;\n\n\t\t\t\tif (breakOnFirstHit) {\n\t\t\t\t\treturn closestHit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn closestHit;\n\t}\n\n\t/**\n\t * Finds the closest continous collision hit between two shape arrays with velocities\n\t * @param shapeArrayA List of shapes in physical object A.\n\t * @param shapeArrayB List of shapes in physical object B.\n\t * @param maxDistance The furthest allowed hit\n\t * @param breakOnFirstHit If the first hit should be returned immediately\n\t * @returns the closest hit\n\t */\n\texport function doContinousIntersection(\n\t\tshapeArrayA: Array<Shape>,\n\t\tshapeAVelocity: ReadonlyVec3,\n\t\tshapeArrayB: Array<Shape>,\n\t\tshapeBVelocity: ReadonlyVec3,\n\t\tmaxDistance: number = Infinity,\n\t\tallow0Collision: boolean = true,\n\t\tbreakOnFirstHit: boolean = false\n\t): [number, vec3] {\n\t\tlet earliestHit = Infinity;\n\t\tlet intersectionVec = null;\n\n\t\tfor (let shapeA of shapeArrayA) {\n\t\t\tfor (let shapeB of shapeArrayB) {\n\t\t\t\tlet [dist, iVec] = SAT.getContinousIntersection3D(\n\t\t\t\t\tshapeA,\n\t\t\t\t\tshapeB,\n\t\t\t\t\tshapeAVelocity,\n\t\t\t\t\tshapeBVelocity,\n\t\t\t\t\tmaxDistance\n\t\t\t\t);\n\n\t\t\t\tif (\n\t\t\t\t\t((allow0Collision && dist >= 0.0) || dist > 0.0) &&\n\t\t\t\t\t(dist < earliestHit)\n\t\t\t\t) {\n\t\t\t\t\tearliestHit = dist;\n\t\t\t\t\tintersectionVec = iVec;\n\t\t\t\t\tmaxDistance = earliestHit;\n\n\t\t\t\t\tif (breakOnFirstHit) {\n\t\t\t\t\t\treturn [earliestHit, intersectionVec];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn [earliestHit, intersectionVec];\n\t}\n}\n","import { mat4, vec3 } from \"gl-matrix\";\n\nexport default class Shape {\n\tmargin: number;\n\n\tconstructor() {\n\t\tthis.margin = 0.0;\n\t}\n\n\tsetUpdateNeeded() {}\n\n\tsetTransformMatrix(matrix: mat4) {}\n\n\tgetOriginalVertices(): Array<vec3> {\n\t\treturn null;\n\t}\n\n\tgetTransformedVertices(): Array<vec3> {\n\t\treturn null;\n\t}\n\n\tgetTransformedNormals(): Array<vec3> {\n\t\treturn null;\n\t}\n\n\tgetTransformedEdges(): Array<vec3> {\n\t\treturn null;\n\t}\n\n\tgetTransformedEdgeNormals(): Array<vec3> {\n\t\treturn null;\n\t}\n}\n","import { mat3, mat4, vec3 } from \"gl-matrix\";\nimport Shape from \"./Shape\";\n\nexport default class OBB extends Shape {\n\tprivate originalVertices: Array<vec3>;\n\tprivate originalNormals: Array<vec3>;\n\n\tprivate transformedVertices: Array<vec3>;\n\tprivate transformedNormals: Array<vec3>;\n\n\tprivate transformMatrix: mat4;\n\tprivate inverseMatrix: mat4;\n\tprivate verticesNeedsUpdate: boolean;\n\tprivate normalsNeedsUpdate: boolean;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.originalVertices = new Array<vec3>();\n\t\tthis.originalNormals = new Array<vec3>();\n\t\tthis.transformedVertices = new Array<vec3>();\n\t\tthis.transformedNormals = new Array<vec3>();\n\t\tthis.transformMatrix = mat4.create();\n\t\tthis.inverseMatrix = mat4.create();\n\t\tthis.verticesNeedsUpdate = false;\n\t\tthis.normalsNeedsUpdate = false;\n\n\t\tthis.setMinAndMaxVectors(vec3.fromValues(-0.5, -0.5, -0.5), vec3.fromValues(0.5, 0.5, 0.5));\n\t}\n\n\tsetVertices(vertices: Array<vec3>) {\n\t\tthis.originalVertices.length = 0;\n\t\tfor (let vert of vertices) {\n\t\t\tthis.originalVertices.push(vert);\n\t\t}\n\n\t\tthis.verticesNeedsUpdate = true;\n\t}\n\n\tsetNormals(normals: Array<vec3>) {\n\t\tthis.originalNormals.length = 0;\n\t\tfor (let norm of normals) {\n\t\t\tthis.originalNormals.push(norm);\n\t\t}\n\n\t\tthis.normalsNeedsUpdate = true;\n\t}\n\n\t/**\n\t * Creates an axis aligned bounding box (AABB).\n\t * @param minVec Corner for the lower bound.\n\t * @param maxVec Corner for the upper bound.\n\t */\n\tsetMinAndMaxVectors(minVec: vec3, maxVec: vec3) {\n\t\tthis.originalNormals.length = 0;\n\t\tthis.originalNormals.push(vec3.fromValues(1.0, 0.0, 0.0));\n\t\tthis.originalNormals.push(vec3.fromValues(0.0, 1.0, 0.0));\n\t\tthis.originalNormals.push(vec3.fromValues(0.0, 0.0, 1.0));\n\n\t\tthis.originalVertices.length = 0;\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tthis.originalVertices.push(vec3.create());\n\t\t}\n\n\t\tvec3.copy(this.originalVertices[0], minVec);\n\t\tvec3.set(this.originalVertices[1], minVec[0], minVec[1], maxVec[2]);\n\t\tvec3.set(this.originalVertices[2], minVec[0], maxVec[1], minVec[2]);\n\t\tvec3.set(this.originalVertices[3], minVec[0], maxVec[1], maxVec[2]);\n\t\tvec3.set(this.originalVertices[4], maxVec[0], minVec[1], minVec[2]);\n\t\tvec3.set(this.originalVertices[5], maxVec[0], minVec[1], maxVec[2]);\n\t\tvec3.set(this.originalVertices[6], maxVec[0], maxVec[1], minVec[2]);\n\t\tvec3.copy(this.originalVertices[7], maxVec);\n\n\t\tthis.normalsNeedsUpdate = true;\n\t\tthis.verticesNeedsUpdate = true;\n\t}\n\n\tsetMinAndMaxFromPointArray(pointArray: Array<vec3>) {\n\t\tthis.originalNormals.length = 0;\n\t\tthis.originalNormals.push(vec3.fromValues(1.0, 0.0, 0.0));\n\t\tthis.originalNormals.push(vec3.fromValues(0.0, 1.0, 0.0));\n\t\tthis.originalNormals.push(vec3.fromValues(0.0, 0.0, 1.0));\n\n\t\tthis.originalVertices.length = 0;\n\t\t\n\t\tlet minVec = vec3.fromValues(Infinity, Infinity, Infinity);\n\t\tlet maxVec = vec3.fromValues(-Infinity, -Infinity, -Infinity);\n\n\t\tfor (let point of pointArray) {\n\t\t\tvec3.min(minVec, minVec, point);\n\t\t\tvec3.max(maxVec, maxVec, point);\n\t\t}\n\n\t\tfor (let i = 0; i < 8; i++) {\n\t\t\tthis.originalVertices.push(vec3.create());\n\t\t}\n\n\t\tvec3.copy(this.originalVertices[0], minVec);\n\t\tvec3.set(this.originalVertices[1], minVec[0], minVec[1], maxVec[2]);\n\t\tvec3.set(this.originalVertices[2], minVec[0], maxVec[1], minVec[2]);\n\t\tvec3.set(this.originalVertices[3], minVec[0], maxVec[1], maxVec[2]);\n\t\tvec3.set(this.originalVertices[4], maxVec[0], minVec[1], minVec[2]);\n\t\tvec3.set(this.originalVertices[5], maxVec[0], minVec[1], maxVec[2]);\n\t\tvec3.set(this.originalVertices[6], maxVec[0], maxVec[1], minVec[2]);\n\t\tvec3.copy(this.originalVertices[7], maxVec);\n\n\t\tthis.normalsNeedsUpdate = true;\n\t\tthis.verticesNeedsUpdate = true;\n\t}\n\n\tsetUpdateNeeded() {\n\t\tthis.verticesNeedsUpdate = true;\n\t\tthis.normalsNeedsUpdate = true;\n\t}\n\n\tsetTransformMatrix(matrix: mat4) {\n\t\tthis.transformMatrix = matrix;\n\t\tthis.verticesNeedsUpdate = true;\n\t\tthis.normalsNeedsUpdate = true;\n\t}\n\n\tsetInverseMatrix(matrix: mat4): void {\n\t\tthis.inverseMatrix = matrix;\n\t\tthis.verticesNeedsUpdate = true;\n\t\tthis.normalsNeedsUpdate = true;\n\t}\n\n\tgetTransformedVertices(): Array<vec3> {\n\t\tif (this.verticesNeedsUpdate) {\n\t\t\tthis.transformedVertices.length = 0;\n\n\t\t\tlet resultingMatrix = mat4.mul(mat4.create(), this.inverseMatrix, this.transformMatrix);\n\n\t\t\tfor (const originalVertex of this.originalVertices) {\n\t\t\t\tthis.transformedVertices.push(\n\t\t\t\t\tvec3.transformMat4(vec3.create(), originalVertex, resultingMatrix)\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.verticesNeedsUpdate = false;\n\t\t}\n\t\treturn this.transformedVertices;\n\t}\n\n\tgetTransformedNormals(): Array<vec3> {\n\t\tif (this.normalsNeedsUpdate) {\n\t\t\tthis.transformedNormals.length = 0;\n\n\t\t\tfor (const originalNormal of this.originalNormals) {\n\t\t\t\tthis.transformedNormals.push(\n\t\t\t\t\tvec3.normalize(\n\t\t\t\t\t\tvec3.create(),\n\t\t\t\t\t\tvec3.transformMat3(\n\t\t\t\t\t\t\tvec3.create(),\n\t\t\t\t\t\t\toriginalNormal,\n\t\t\t\t\t\t\tmat3.normalFromMat4(mat3.create(), this.transformMatrix)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tthis.normalsNeedsUpdate = false;\n\t\t}\n\t\treturn this.transformedNormals;\n\t}\n\n\tgetTransformedEdges(): Array<vec3> {\n\t\treturn this.getTransformedNormals();\n\t}\n\n\tgetTransformedEdgeNormals(): Array<vec3> {\n\t\treturn this.getTransformedNormals();\n\t}\n\n\tgetTransformMatrix(): mat4 {\n\t\treturn this.transformMatrix;\n\t}\n}\n","import { mat4, vec3 } from \"../../../../Engine\";\nimport Transform from \"../../../Shared/Transform\";\nimport OBB from \"../Shapes/OBB\";\n\nexport default class PhysicsObject {\n    mass: number;\n    frictionCoefficient: number;\n    collisionCoefficient: number;\n    velocity: vec3;\n    impulse: vec3;\n    force: vec3; \n\n    /**\n\t * True if this object never moves\n\t */\n\tisStatic: boolean;\n\t/**\n\t * True if this object is not effected by collisions (but could potentially effect other objects through collision)\n\t */\n\tisImmovable: boolean;\n    /**\n     * True if it's possible to collide with this object\n     */\n    isCollidable: boolean;\n\n    onGround: boolean;\n    \n    boundingBox: OBB;\n\n    transform: Transform;\n    \n    constructor(transform?: Transform) {\n        this.mass = 1.0;\n\t\tthis.frictionCoefficient = 0.0;\n\t\tthis.collisionCoefficient = 0.0;\n        this.isStatic = false;\n\t\tthis.isImmovable = false;\n        this.isCollidable = true;\n        this.onGround = false;\n        this.velocity = vec3.create();\n        this.impulse = vec3.create();\n        this.force = vec3.create();\n        if (transform == undefined) {\n            this.transform = new Transform();\n        }\n        else {\n            this.transform = transform;\n        }\n        this.boundingBox = new OBB();\n        this.boundingBox.setTransformMatrix(this.transform.matrix);\n    }\n}","import { mat4, vec3 } from \"../../../Engine\";\nimport Transform from \"../../Shared/Transform\";\nimport { CollisionSolver } from \"./CollisionSolver\";\nimport { IntersectionTester } from \"./IntersectionTester\";\nimport PhysicsObject from \"./Objects/PhysicsObject\";\nimport Ray from \"./Shapes/Ray\";\n\nexport default class PhysicsScene {\n    gravity: vec3;\n\n    physicsObjects: Array<PhysicsObject>;\n\n    constructor() {\n        this.gravity = vec3.fromValues(0.0, -9.8, 0.0);\n        this.physicsObjects = new Array<PhysicsObject>();\n    }\n\n    /**\n     * Will add a physics object to the PhysicsScene. Will create a new object if none is passed as a parameter.\n     * @param physicsObject Optional: Already existing physics object, maybe from another physics scene\n     * @returns the physics object\n     */\n    addNewPhysicsObject(transform?: Transform, physicsObject?: PhysicsObject): PhysicsObject {\n        let length = -1;\n        if (physicsObject != undefined) {\n            length = this.physicsObjects.push(physicsObject);\n        }\n        else {\n            length = this.physicsObjects.push(new PhysicsObject(transform));\n        }\n        return this.physicsObjects[length - 1];\n    }\n\n    doRayCast(ray: Ray, maxDistance: number = Infinity): number {\n        let closestHit = Infinity;\n        for (let physicsObject of this.physicsObjects) {\n            let hit = IntersectionTester.doRayCast(ray, [physicsObject.boundingBox], Math.min(maxDistance, closestHit));\n            closestHit = Math.min(closestHit, hit);\n        }\n        return closestHit;\n    }\n\n    update(dt: number) {\n        // Update all bounding boxes\n        for (let physicsObject of this.physicsObjects) {\n            physicsObject.transform.calculateMatrix();\n            physicsObject.boundingBox.setUpdateNeeded();\n        }\n\n        for (let i = 0; i < this.physicsObjects.length; i++) {\n            let physicsObject = this.physicsObjects[i];\n            const oldVelocity = vec3.clone(physicsObject.velocity);\n\n            // Calculate collisions with other objects\n            for (let j = i + 1; j < this.physicsObjects.length; j++) {\n                if (IntersectionTester.identifyIntersection([physicsObject.boundingBox], [this.physicsObjects[j].boundingBox])) {\n                    // Bounding boxes are intersecting\n\n                    // Find out intersection information\n                    let inf = new Array<IntersectionTester.IntersectionInformation>(); \n                    IntersectionTester.identifyIntersectionInformation([physicsObject.boundingBox], [this.physicsObjects[j].boundingBox], inf);\n\n                    CollisionSolver.handleCollision(inf, physicsObject, this.physicsObjects[j]);\n\n                }\n            }\n\n            if (!physicsObject.isStatic) {\n                // Calculate new velocity based on gravity, forces and impulses\n                vec3.scaleAndAdd(physicsObject.velocity, physicsObject.velocity, this.gravity, dt);\n                vec3.scaleAndAdd(physicsObject.velocity, physicsObject.velocity, physicsObject.force, dt / physicsObject.mass);\n                vec3.scaleAndAdd(physicsObject.velocity, physicsObject.velocity, physicsObject.impulse, 1.0 / physicsObject.mass);\n\n                vec3.zero(physicsObject.force);\n                vec3.zero(physicsObject.impulse);\n\n                let translation = vec3.scale(vec3.create(), vec3.add(vec3.create(), oldVelocity, physicsObject.velocity), 0.5 * dt);\n                if (vec3.len(translation) > 0.001) {\n                    physicsObject.transform.translate(translation);\n                    physicsObject.transform.calculateMatrix();\n                }\n            }\n        }\n    }\n}","import Shape from \"./Shape\";\nimport { ReadonlyVec3, mat3, mat4, vec3 } from \"gl-matrix\";\n\nexport default class Ray extends Shape {\n\tprivate start: vec3;\n\tprivate dir: vec3;\n\tprivate inverseMatrix: mat4;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.start = vec3.create();\n\t\tthis.dir = vec3.fromValues(0.0, 0.0, 1.0);\n\t\tthis.inverseMatrix = mat4.create();\n\t}\n\n\tsetStart(start: ReadonlyVec3) {\n\t\tvec3.copy(this.start, start);\n\t}\n\n\tsetDir(dir: ReadonlyVec3) {\n\t\tvec3.normalize(this.dir, dir);\n\t}\n\n\tgetDir(): ReadonlyVec3 {\n\t\treturn this.getTransformedNormals()[0];\n\t}\n\n\tsetStartAndDir(start: ReadonlyVec3, dir: ReadonlyVec3) {\n\t\tvec3.copy(this.start, start);\n\t\tvec3.normalize(this.dir, dir);\n\t}\n\n\tsetInverseMatrix(matrix: mat4) {\n\t\tthis.inverseMatrix = matrix;\n\t}\n\n\tgetTransformedVertices(): Array<vec3> {\n\t\treturn [vec3.transformMat4(vec3.create(), this.start, this.inverseMatrix)];\n\t}\n\n\tgetTransformedNormals(): Array<vec3> {\n\t\tlet start = this.getTransformedVertices()[0];\n\t\tlet end = vec3.transformMat4(\n\t\t\tvec3.create(),\n\t\t\tvec3.add(vec3.create(), this.start, this.dir),\n\t\t\tthis.inverseMatrix\n\t\t);\n\n\t\treturn [vec3.subtract(vec3.create(), end, start)]; // Not normalized because we want to keep distances\n\t}\n\n\tgetTransformedEdges(): Array<vec3> {\n\t\treturn [];\n\t}\n\n\tgetTransformedEdgeNormals(): Array<vec3> {\n\t\treturn [];\n\t}\n}\n","import { mat4, vec2, vec3, vec4 } from \"gl-matrix\";\nimport Ray from \"../Physics/Shapes/Ray\";\nimport { Camera } from \"../../../Engine\";\n\nexport module MousePicking {\n\texport function GetRay(camera: Camera, mouseNDC: vec2): Ray {\n\t\tlet mouseRayClip = vec4.fromValues(mouseNDC[0], mouseNDC[1], -1.0, 1.0);\n\t\tlet mouseRayCamera = vec4.transformMat4(\n\t\t\tvec4.create(),\n\t\t\tmouseRayClip,\n\t\t\tmat4.invert(mat4.create(), camera.getProjectionMatrix())\n\t\t);\n\t\tmouseRayCamera[2] = -1.0;\n\t\tmouseRayCamera[3] = 0.0;\n\t\tlet mouseRayWorld4D = vec4.transformMat4(\n\t\t\tvec4.create(),\n\t\t\tmouseRayCamera,\n\t\t\tmat4.invert(mat4.create(), camera.getViewMatrix())\n\t\t);\n\t\tlet dir = vec3.normalize(\n\t\t\tvec3.create(),\n\t\t\tvec3.fromValues(mouseRayWorld4D[0], mouseRayWorld4D[1], mouseRayWorld4D[2])\n\t\t);\n\n\t\tlet ray = new Ray();\n\t\tray.setDir(dir);\n\t\tray.setStart(vec3.clone(camera.getPosition()));\n\n\t\treturn ray;\n\t}\n}\n","import { glMatrix } from \"gl-matrix\";\nimport Renderer from \"./Engine/Rendering/Renderer/Renderer\";\nimport Scene from \"./Engine/Rendering/Renderer/Scene\";\nimport Camera from \"./Engine/Rendering/Objects/Camera\";\nimport TextureStore from \"./Engine/Rendering/AssetHandling/TextureStore\";\nimport MeshStore from \"./Engine/Rendering/AssetHandling/MeshStore\";\nimport { GUIRenderer } from \"./Engine/Rendering/GUI/GUIRenderer\";\nimport PhysicsScene from \"./Engine/Physics/Physics/PhysicsScene\";\nimport PhysicsObject from \"./Engine/Physics/Physics/Objects/PhysicsObject\";\nimport Ray from \"./Engine/Physics/Physics/Shapes/Ray\";\nimport Transform from \"./Engine/Shared/Transform\";\nimport { MousePicking } from \"./Engine/Physics/Maths/MousePicking\";\n\nimport { vec2, vec3, mat4, quat} from \"gl-matrix\";\n\n// Rendering exports\nexport { Renderer, GUIRenderer, Scene, Camera }\n// Physics exports\nexport { PhysicsScene, PhysicsObject, Ray, MousePicking }\n// Math exports\nexport { vec2, vec3, mat4, quat }\n// Shared exports\nexport { Transform }\n\n// Global exports\nexport let applicationStartTime = Date.now();\nexport let textureStore = new TextureStore();\nexport let meshStore = new MeshStore(textureStore);\n\nglMatrix.setMatrixArrayType(Array);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAI,UAAU;AACd,IAAI,aAAa,OAAO,iBAAiB,cAAc,eAAe;AACtE,IAAI,SAAS,KAAK;AAOlB,SAAS,mBAAmB,MAAM;AACvC,eAAa;AACf;AACA,IAAI,SAAS,KAAK,KAAK;AAOhB,SAAS,SAAS,GAAG;AAC1B,SAAO,IAAI;AACb;AAWO,SAAS,OAAO,GAAG,GAAG;AAC3B,SAAO,KAAK,IAAI,IAAI,CAAC,KAAK,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AAC5E;AACA,IAAI,CAAC,KAAK;AAAO,OAAK,QAAQ,WAAY;AACxC,QAAI,IAAI,GACJ,IAAI,UAAU;AAElB,WAAO,KAAK;AACV,WAAK,UAAU,CAAC,IAAI,UAAU,CAAC;AAAA,IACjC;AAEA,WAAO,KAAK,KAAK,CAAC;AAAA,EACpB;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAA;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAAS,SAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,SAAS,KAAK,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,EAAE;AACb,SAAO;AACT;AAQO,SAAS,MAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAgBO,SAAS,WAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACtE,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAiBO,SAAS,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACpE,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAAS,SAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAEhC,MAAI,QAAQ,GAAG;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX,OAAO;AACL,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AAAA,EACd;AAEA,SAAO;AACT;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,CAAC,MAAM,MAAM,MAAM;AAC7B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,IAAI,MAAM;AACf,MAAI,CAAC,KAAK,CAAC,MAAM,MAAM,MAAM,OAAO;AACpC,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,OAAO;AACnC,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM;AAC3B,SAAO;AACT;AAQO,SAAS,YAAY,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,SAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,CAAC,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,SAAO;AACT;AAUO,SAAS,UAAU,KAAK,GAAG,GAAG;AACnC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI,MAAM;AAC7B,SAAO;AACT;AAUO,SAAS,OAAO,KAAK,GAAG,KAAK;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,IAAI,KAAK,IAAI,GAAG,GAChB,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI,IAAI,MAAM,IAAI;AACvB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAaO,SAAS,gBAAgB,KAAK,GAAG;AACtC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAaO,SAAS,aAAa,KAAK,KAAK;AACrC,MAAI,IAAI,KAAK,IAAI,GAAG,GAChB,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAaO,SAAS,YAAY,KAAK,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG;AACrC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAE5E,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,SAAO;AACT;AAUO,SAAS,WAAW,KAAK,OAAO,QAAQ;AAC7C,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAAS,IAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AAC1I;AAQO,SAAS,KAAK,GAAG;AACtB,SAAO,KAAK,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AACxE;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,SAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAAS,qBAAqB,KAAK,GAAG,GAAGC,QAAO;AACrD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAAS,YAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AAC7J;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACjwB;AAMO,IAAI,MAAM;AAMV,IAAI,MAAM;;;ACzwBjB;AAAA;AAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA,sBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,qBAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,sBAAAC;AAAA,EAAA,4BAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA,mBAAAC;AAAA,EAAA,iBAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AAEpC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAAA,EACZ;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AAuBO,SAASC,YAAW,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACzG,MAAI,MAAM,IAAa,WAAW,EAAE;AACpC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAwBO,SAASC,KAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AACvG,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASC,UAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAEhC,MAAI,QAAQ,GAAG;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,QAAI,MAAM,EAAE,EAAE;AACd,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AAAA,EACZ,OAAO;AACL,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,EAAE;AACb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,CAAC;AACb,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAEA,SAAO;AACT;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,MAAI,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAE5E,MAAI,CAAC,KAAK;AACR,WAAO;AAAA,EACT;AAEA,QAAM,IAAM;AACZ,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,CAAC,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAC/C,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,MAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,MAAM,OAAO;AAChD,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AAClG,MAAI,CAAC,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACpG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,MAAI,EAAE,IAAI,EAAE,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACrG,MAAI,EAAE,IAAI,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM,OAAO,OAAO,MAAM,MAAM,MAAM;AACnG,SAAO;AACT;AAQO,SAASC,aAAY,GAAG;AAC7B,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAC5B,MAAI,MAAM,MAAM,MAAM,MAAM;AAE5B,SAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AAC3E;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,CAAC,GACT,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AAEd,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,CAAC;AACR,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAC/C,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,OAAK,EAAE,EAAE;AACT,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,MAAI,EAAE,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK;AAChD,SAAO;AACT;AAUO,SAASC,WAAU,KAAK,GAAG,GAAG;AACnC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AAEnB,MAAI,MAAM,KAAK;AACb,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AAC/C,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AAC/C,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAChD,QAAI,EAAE,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAAA,EAClD,OAAO;AACL,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,CAAC;AACT,UAAM,EAAE,EAAE;AACV,UAAM,EAAE,EAAE;AACV,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAC5C,QAAI,EAAE,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,EAAE,EAAE;AAAA,EAC9C;AAEA,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,MAAI,EAAE,IAAI,EAAE,EAAE;AACd,SAAO;AACT;AAWO,SAASC,QAAO,KAAK,GAAG,KAAK,MAAM;AACxC,MAAI,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC;AACd,MAAIC,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AACV,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK,KAAK;AACnB,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AACd,MAAI,KAAK,KAAK;AAEd,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AACR,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,CAAC;AACT,QAAM,EAAE,EAAE;AACV,QAAM,EAAE,EAAE;AAEV,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAClB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI,IAAI;AACtB,QAAM,IAAI,IAAI,IAAI;AAElB,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,CAAC,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACvC,MAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AACxC,MAAI,EAAE,IAAI,MAAM,MAAM,MAAM,MAAM,MAAM;AAExC,MAAI,MAAM,KAAK;AAEb,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAEA,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE;AAEd,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE;AAEd,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,MAAI,EAAE,IAAI,MAAM,IAAI,MAAM;AAC1B,SAAO;AACT;AAUO,SAAS,QAAQ,KAAK,GAAG,KAAK;AACnC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AACb,MAAI,MAAM,EAAE,CAAC;AAEb,MAAI,MAAM,KAAK;AAEb,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,CAAC,IAAI,EAAE,CAAC;AACZ,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AACd,QAAI,EAAE,IAAI,EAAE,EAAE;AAAA,EAChB;AAGA,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,MAAI,CAAC,IAAI,MAAM,IAAI,MAAM;AACzB,SAAO;AACT;AAaO,SAASC,iBAAgB,KAAK,GAAG;AACtC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAASC,aAAY,KAAK,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAcO,SAASC,cAAa,KAAK,KAAK,MAAM;AAC3C,MAAI,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC,GACV,IAAI,KAAK,CAAC;AACd,MAAIH,OAAM,KAAK,MAAM,GAAG,GAAG,CAAC;AAC5B,MAAI,GAAG,GAAG;AAEV,MAAIA,OAAe,SAAS;AAC1B,WAAO;AAAA,EACT;AAEA,EAAAA,OAAM,IAAIA;AACV,OAAKA;AACL,OAAKA;AACL,OAAKA;AACL,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,KAAK,IAAI,GAAG;AAChB,MAAI,IAAI;AAER,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI;AACrB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI;AACzB,MAAI,EAAE,IAAI,IAAI,IAAI,IAAI;AACtB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAaO,SAAS,cAAc,KAAK,KAAK;AACtC,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,IAAI,KAAK,IAAI,GAAG;AAEpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,CAAC;AACV,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAiBO,SAAS,wBAAwB,KAAK,GAAG,GAAG;AAEjD,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,KAAK,KAAK;AACnB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK,KAAK;AACnB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,EAAE,IAAI,KAAK,KAAK;AACpB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,cAAc,IAAa,WAAW,CAAC;AAC3C,MAAI,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,CAAC,EAAE,CAAC,GACT,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,YAAY,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnD,MAAI,YAAY,GAAG;AACjB,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAC/D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,EACjE,OAAO;AACL,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAC3D,gBAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM;AAAA,EAC7D;AAEA,0BAAwB,KAAK,GAAG,WAAW;AAC3C,SAAO;AACT;AAWO,SAAS,eAAe,KAAK,KAAK;AACvC,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,MAAI,CAAC,IAAI,IAAI,EAAE;AACf,SAAO;AACT;AAYO,SAAS,WAAW,KAAK,KAAK;AACnC,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,CAAC;AACf,MAAI,MAAM,IAAI,EAAE;AAChB,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,MAAI,CAAC,IAAI,KAAK,MAAM,KAAK,KAAK,GAAG;AACjC,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,KAAK;AACpC,MAAI,UAAU,IAAa,WAAW,CAAC;AACvC,aAAW,SAAS,GAAG;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,MAAM,IAAI,QAAQ,CAAC;AACvB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,CAAC,IAAI;AACpB,MAAI,OAAO,IAAI,EAAE,IAAI;AACrB,MAAI,QAAQ,OAAO,OAAO;AAC1B,MAAI,IAAI;AAER,MAAI,QAAQ,GAAG;AACb,QAAI,KAAK,KAAK,QAAQ,CAAG,IAAI;AAC7B,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,QAAQ,OAAO,MAAM;AACrC,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,WAAW,OAAO,MAAM;AACtB,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAChB,QAAI,CAAC,KAAK,OAAO,QAAQ;AAAA,EAC3B,OAAO;AACL,QAAI,KAAK,KAAK,IAAM,OAAO,OAAO,IAAI,IAAI;AAC1C,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,KAAK,OAAO,QAAQ;AACzB,QAAI,CAAC,IAAI,OAAO;AAAA,EAClB;AAEA,SAAO;AACT;AAmBO,SAAS,6BAA6B,KAAK,GAAG,GAAG,GAAG;AAEzD,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,KAAK,KAAK,KAAK,OAAO;AAC3B,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,KAAK,OAAO;AAC3B,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,CAAC,KAAK,KAAK,MAAM;AACrB,MAAI,EAAE,KAAK,KAAK,KAAK,OAAO;AAC5B,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI,EAAE,CAAC;AACb,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAsBO,SAAS,mCAAmC,KAAK,GAAG,GAAG,GAAG,GAAG;AAElE,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,KAAK,OAAO;AAC7B,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,QAAQ,KAAK,MAAM;AACvB,MAAI,SAAS,KAAK,KAAK,OAAO;AAC9B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,OAAO;AACtD,MAAI,EAAE,IAAI,EAAE,CAAC,IAAI,MAAM,OAAO,KAAK,OAAO,KAAK,QAAQ;AACvD,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAUO,SAASI,UAAS,KAAK,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,KAAK,IAAI;AACb,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,IAAI,KAAK;AAClB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,EAAE,IAAI,IAAI,KAAK;AACnB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAcO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,QAAQ;AACtB,MAAI,KAAK,KAAK,MAAM;AACpB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,OAAO,IAAI;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,OAAO,IAAI;AACpB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,KAAK,QAAQ,QAAQ;AAC1B,MAAI,CAAC,KAAK,MAAM,UAAU;AAC1B,MAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,MAAM,OAAO,IAAI;AAC3B,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAeO,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,QAAI,EAAE,IAAI,IAAI,MAAM,OAAO;AAAA,EAC7B,OAAO;AACL,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,KAAK;AAAA,EACjB;AAEA,SAAO;AACT;AAMO,IAAI,cAAc;AAelB,SAAS,cAAc,KAAK,MAAM,QAAQ,MAAM,KAAK;AAC1D,MAAI,IAAI,IAAM,KAAK,IAAI,OAAO,CAAC,GAC3B;AACJ,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AAEV,MAAI,OAAO,QAAQ,QAAQ,UAAU;AACnC,SAAK,KAAK,OAAO;AACjB,QAAI,EAAE,IAAI,MAAM;AAChB,QAAI,EAAE,IAAI,MAAM,OAAO;AAAA,EACzB,OAAO;AACL,QAAI,EAAE,IAAI;AACV,QAAI,EAAE,IAAI,CAAC;AAAA,EACb;AAEA,SAAO;AACT;AAaO,SAAS,2BAA2B,KAAK,KAAK,MAAM,KAAK;AAC9D,MAAI,QAAQ,KAAK,IAAI,IAAI,YAAY,KAAK,KAAK,GAAK;AACpD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,UAAU,KAAK,IAAI,IAAI,cAAc,KAAK,KAAK,GAAK;AACxD,MAAI,WAAW,KAAK,IAAI,IAAI,eAAe,KAAK,KAAK,GAAK;AAC1D,MAAI,SAAS,KAAO,UAAU;AAC9B,MAAI,SAAS,KAAO,QAAQ;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,GAAG,UAAU,YAAY,SAAS;AAC3C,MAAI,CAAC,KAAK,QAAQ,WAAW,SAAS;AACtC,MAAI,EAAE,IAAI,OAAO,OAAO;AACxB,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,MAAM,QAAQ,OAAO;AAC/B,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAgBO,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI,IAAI;AACd,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,KAAK,OAAO,SAAS;AAC3B,MAAI,EAAE,KAAK,MAAM,UAAU;AAC3B,MAAI,EAAE,KAAK,MAAM,QAAQ;AACzB,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAMO,IAAI,QAAQ;AAgBZ,SAAS,QAAQ,KAAK,MAAM,OAAO,QAAQ,KAAK,MAAM,KAAK;AAChE,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,KAAK,KAAK,SAAS;AACvB,MAAI,KAAK,KAAK,OAAO;AACrB,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK;AACd,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,KAAK,OAAO,SAAS;AAC3B,MAAI,EAAE,KAAK,MAAM,UAAU;AAC3B,MAAI,EAAE,IAAI,OAAO;AACjB,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAYO,SAAS,OAAO,KAAK,KAAK,QAAQ,IAAI;AAC3C,MAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAIJ;AACxC,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,OAAO,IAAI,CAAC;AAChB,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,MAAM,GAAG,CAAC;AACd,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,UAAU,OAAO,CAAC;AACtB,MAAI,UAAU,OAAO,CAAC;AAEtB,MAAI,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,WAAW,KAAK,IAAI,OAAO,OAAO,IAAa,SAAS;AAC7I,WAAOT,UAAS,GAAG;AAAA,EACrB;AAEA,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,OAAK,OAAO;AACZ,EAAAS,OAAM,IAAI,KAAK,MAAM,IAAI,IAAI,EAAE;AAC/B,QAAMA;AACN,QAAMA;AACN,QAAMA;AACN,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,OAAK,MAAM,KAAK,MAAM;AACtB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,OAAK,KAAK,KAAK,KAAK;AACpB,EAAAA,OAAM,KAAK,MAAM,IAAI,IAAI,EAAE;AAE3B,MAAI,CAACA,MAAK;AACR,SAAK;AACL,SAAK;AACL,SAAK;AAAA,EACP,OAAO;AACL,IAAAA,OAAM,IAAIA;AACV,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI,EAAE,KAAK,OAAO,KAAK,OAAO,KAAK;AACzC,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAWO,SAAS,SAAS,KAAK,KAAK,QAAQ,IAAI;AAC7C,MAAI,OAAO,IAAI,CAAC,GACZ,OAAO,IAAI,CAAC,GACZ,OAAO,IAAI,CAAC,GACZ,MAAM,GAAG,CAAC,GACV,MAAM,GAAG,CAAC,GACV,MAAM,GAAG,CAAC;AACd,MAAI,KAAK,OAAO,OAAO,CAAC,GACpB,KAAK,OAAO,OAAO,CAAC,GACpB,KAAK,OAAO,OAAO,CAAC;AACxB,MAAIA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAEnC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM,IACtB,KAAK,MAAM,KAAK,MAAM;AAC1B,EAAAA,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK;AAE/B,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AACvB,UAAMA;AACN,UAAMA;AACN,UAAMA;AAAA,EACR;AAEA,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,MAAI,EAAE,IAAI;AACV,SAAO;AACT;AAQO,SAASK,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI,OAAO,EAAE,EAAE,IAAI;AAClP;AAQO,SAASC,MAAK,GAAG;AACtB,SAAO,KAAK,MAAM,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC;AACxH;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE;AACtB,SAAO;AACT;AAUO,SAASC,gBAAe,KAAK,GAAG,GAAG;AACxC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI;AAClB,SAAO;AACT;AAWO,SAASC,sBAAqB,KAAK,GAAG,GAAGZ,QAAO;AACrD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,MAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,IAAIA;AAC1B,SAAO;AACT;AASO,SAASa,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE;AAChS;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,MAAI,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE,GACV,MAAM,EAAE,EAAE;AACd,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,IAAI,MAAM,GAAG,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC;AAC52C;AAMO,IAAIC,OAAMjB;AAMV,IAAIkB,OAAMN;;;ACr3DjB;AAAA;AAAA,aAAAO;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA;AAAA,cAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA;AAAA,gBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA;;;ACAA;AAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA;AAAA;AAAA,oBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,iBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA;AAAA,eAAAC;AAAA,EAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAQO,SAAS,OAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AAUO,SAASC,YAAW,GAAG,GAAG,GAAG;AAClC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAWO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAAS,OAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAAS,KAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAAS,MAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAAS,YAAY,KAAK,GAAG,GAAGA,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAAS,SAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,GAAG,CAAC;AAC3B;AASO,SAAS,gBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AAQO,SAAS,cAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B;AASO,SAAS,OAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAAS,QAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI;AAE9B,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,SAAO;AACT;AASO,SAAS,IAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC/C;AAUO,SAAS,MAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAWO,SAAS,KAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AAaO,SAAS,QAAQ,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,gBAAgB,IAAI,IAAI,KAAK;AAC3C,MAAI,UAAU,gBAAgB,IAAI,KAAK;AACvC,MAAI,UAAU,gBAAgB,IAAI;AAClC,MAAI,UAAU,gBAAgB,IAAI,IAAI;AACtC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,SAAO;AACT;AAaO,SAAS,OAAO,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACzC,MAAI,gBAAgB,IAAI;AACxB,MAAI,wBAAwB,gBAAgB;AAC5C,MAAI,eAAe,IAAI;AACvB,MAAI,UAAU,wBAAwB;AACtC,MAAI,UAAU,IAAI,IAAI;AACtB,MAAI,UAAU,IAAI,eAAe;AACjC,MAAI,UAAU,eAAe;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI;AACnE,SAAO;AACT;AASO,SAAS,OAAO,KAAKD,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,IAAa,OAAO,IAAI,IAAM;AAClC,MAAI,SAAS,KAAK,KAAK,IAAM,IAAI,CAAC,IAAIA;AACtC,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI;AACvB,MAAI,CAAC,IAAI,IAAIA;AACb,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE;AAC9C,MAAI,KAAK;AACT,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK;AACpD,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK;AACpD,MAAI,CAAC,KAAK,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,KAAK;AACrD,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,MAAI,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AACtC,SAAO;AACT;AAWO,SAAS,cAAc,KAAK,GAAG,GAAG;AAEvC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AAGX,MAAI,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK,GACpB,MAAM,KAAK,IAAI,KAAK;AAExB,MAAI,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK,KACvB,OAAO,KAAK,MAAM,KAAK;AAE3B,MAAI,KAAK,KAAK;AACd,SAAO;AACP,SAAO;AACP,SAAO;AAEP,UAAQ;AACR,UAAQ;AACR,UAAQ;AAER,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,MAAI,CAAC,IAAI,IAAI,MAAM;AACnB,SAAO;AACT;AAUO,SAASE,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC;AACV,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AAEjD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC;AACV,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AAEjD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,GAAG,KAAK;AACtC,MAAI,IAAI,CAAC,GACL,IAAI,CAAC;AAET,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAEjB,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE,CAAC,IAAI,KAAK,IAAI,GAAG;AACjD,IAAE,CAAC,IAAI,EAAE,CAAC;AAEV,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAQO,SAAS,MAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAC5C,MAAM,OAAO,MACb,SAAS,OAAO,IAAI,GAAG,CAAC,IAAI;AAChC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAAS,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACtD;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACvD;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACnQ;AAMO,IAAIC,OAAMV;AAMV,IAAIW,OAAMV;AAMV,IAAI,MAAM;AAMV,IAAI,OAAO;AAMX,IAAI,UAAU;AAMd,IAAI,MAAM;AAMV,IAAI,SAAS;AAcb,IAAI,UAAU,WAAY;AAC/B,MAAI,MAAMP,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AClxBF;AAAA;AAAA,aAAAkB;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAWO,SAASC,YAAW,GAAG,GAAG,GAAG,GAAG;AACrC,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAYO,SAASC,KAAI,KAAK,GAAG,GAAG,GAAG,GAAG;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,GAAG,GAAG,CAAC;AAC9B;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACrC;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAEtC,MAAIA,OAAM,GAAG;AACX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,MAAI,CAAC,IAAI,IAAIA;AACb,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC7D;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG,GAAG;AAClC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GAC5B,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,CAAC,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,MAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAC7B,MAAI,CAAC,IAAI,EAAE,IAAI,KAAK,IAAI,IAAI,IAAI;AAChC,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AAIjB,MAAI,IAAI,IAAI,IAAI;AAChB,MAAI,IAAI;AAER,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,KAAG;AACD,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAc,OAAO,IAAI,IAAI;AAC7B,SAAK,KAAK,KAAK,KAAK;AAAA,EACtB,SAAS,MAAM;AAEf,MAAI,IAAI,KAAK,MAAM,IAAI,MAAM,EAAE;AAC/B,MAAI,CAAC,IAAIA,SAAQ;AACjB,MAAI,CAAC,IAAIA,SAAQ;AACjB,MAAI,CAAC,IAAIA,SAAQ,KAAK;AACtB,MAAI,CAAC,IAAIA,SAAQ,KAAK;AACtB,SAAO;AACT;AAUO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI;AAClD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI;AAClD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI;AACnD,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,IAAI,EAAE,EAAE,IAAI;AACnD,SAAO;AACT;AAUO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AAEZ,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,KAAK,IAAI,KAAK,IAAI,KAAK;AAChC,MAAI,KAAK,CAAC,KAAK,IAAI,KAAK,IAAI,KAAK;AAEjC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC,KAAK,KAAK,CAAC;AAC/C,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACpE;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACxE;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AACxV;AAMO,IAAIC,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,OAAM5B;AAMV,IAAI6B,QAAOrB;AAMX,IAAIsB,WAAUrB;AAMd,IAAIM,OAAML;AAMV,IAAIqB,UAASpB;AAcb,IAAIqB,WAAU,WAAY;AAC/B,MAAI,MAAMxC,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAChB,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AFvoBK,SAASyC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,UAAS,KAAK;AAC5B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAWO,SAAS,aAAa,KAAK,MAAM,KAAK;AAC3C,QAAM,MAAM;AACZ,MAAI,IAAI,KAAK,IAAI,GAAG;AACpB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,IAAI,KAAK,CAAC;AACnB,MAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AACrB,SAAO;AACT;AAeO,SAAS,aAAa,UAAU,GAAG;AACxC,MAAI,MAAM,KAAK,KAAK,EAAE,CAAC,CAAC,IAAI;AAC5B,MAAI,IAAI,KAAK,IAAI,MAAM,CAAG;AAE1B,MAAI,IAAa,SAAS;AACxB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACrB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AACrB,aAAS,CAAC,IAAI,EAAE,CAAC,IAAI;AAAA,EACvB,OAAO;AAEL,aAAS,CAAC,IAAI;AACd,aAAS,CAAC,IAAI;AACd,aAAS,CAAC,IAAI;AAAA,EAChB;AAEA,SAAO;AACT;AASO,SAAS,SAAS,GAAG,GAAG;AAC7B,MAAI,aAAaC,KAAI,GAAG,CAAC;AACzB,SAAO,KAAK,KAAK,IAAI,aAAa,aAAa,CAAC;AAClD;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC5C,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAUO,SAASC,SAAQ,KAAK,GAAG,KAAK;AACnC,SAAO;AACP,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,KAAK,IAAI,GAAG,GACjB,KAAK,KAAK,IAAI,GAAG;AACrB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK;AACxB,SAAO;AACT;AAWO,SAAS,WAAW,KAAK,GAAG;AACjC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,IAAI,IAAM,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC,CAAC;AACxD,SAAO;AACT;AASO,SAAS,IAAI,KAAK,GAAG;AAC1B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACvC,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,IAAI,IAAI,IAAI,KAAK,KAAK,IAAI,CAAC,IAAI,IAAI;AACvC,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC;AACxB,SAAO;AACT;AASO,SAAS,GAAG,KAAK,GAAG;AACzB,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACvC,MAAI,IAAI,IAAI,IAAI,KAAK,MAAM,GAAG,CAAC,IAAI,IAAI;AACvC,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,IAAI;AACb,MAAI,CAAC,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,CAAC;AACrD,SAAO;AACT;AAUO,SAAS,IAAI,KAAK,GAAG,GAAG;AAC7B,KAAG,KAAK,CAAC;AACT,EAAAC,OAAM,KAAK,KAAK,CAAC;AACjB,MAAI,KAAK,GAAG;AACZ,SAAO;AACT;AAWO,SAAS,MAAM,KAAK,GAAG,GAAG,GAAG;AAGlC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,OAAO,OAAO,OAAO,QAAQ;AAEjC,UAAQ,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAE3C,MAAI,QAAQ,GAAK;AACf,YAAQ,CAAC;AACT,SAAK,CAAC;AACN,SAAK,CAAC;AACN,SAAK,CAAC;AACN,SAAK,CAAC;AAAA,EACR;AAGA,MAAI,IAAM,QAAiB,SAAS;AAElC,YAAQ,KAAK,KAAK,KAAK;AACvB,YAAQ,KAAK,IAAI,KAAK;AACtB,aAAS,KAAK,KAAK,IAAM,KAAK,KAAK,IAAI;AACvC,aAAS,KAAK,IAAI,IAAI,KAAK,IAAI;AAAA,EACjC,OAAO;AAGL,aAAS,IAAM;AACf,aAAS;AAAA,EACX;AAGA,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,MAAI,CAAC,IAAI,SAAS,KAAK,SAAS;AAChC,SAAO;AACT;AAQO,SAASC,QAAO,KAAK;AAG1B,MAAI,KAAc,OAAO;AACzB,MAAI,KAAc,OAAO;AACzB,MAAI,KAAc,OAAO;AACzB,MAAI,eAAe,KAAK,KAAK,IAAI,EAAE;AACnC,MAAI,SAAS,KAAK,KAAK,EAAE;AACzB,MAAI,CAAC,IAAI,eAAe,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AACnD,MAAI,CAAC,IAAI,eAAe,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AACnD,MAAI,CAAC,IAAI,SAAS,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AAC7C,MAAI,CAAC,IAAI,SAAS,KAAK,IAAI,IAAM,KAAK,KAAK,EAAE;AAC7C,SAAO;AACT;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAIP,OAAM,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK;AAC7C,MAAI,SAASA,OAAM,IAAMA,OAAM;AAE/B,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,CAAC,KAAK;AACf,MAAI,CAAC,IAAI,KAAK;AACd,SAAO;AACT;AAUO,SAAS,UAAU,KAAK,GAAG;AAChC,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAaO,SAAS,SAAS,KAAK,GAAG;AAG/B,MAAI,SAAS,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAC9B,MAAI;AAEJ,MAAI,SAAS,GAAK;AAEhB,YAAQ,KAAK,KAAK,SAAS,CAAG;AAE9B,QAAI,CAAC,IAAI,MAAM;AACf,YAAQ,MAAM;AAEd,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AACzB,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AACzB,QAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,KAAK;AAAA,EAC3B,OAAO;AAEL,QAAI,IAAI;AACR,QAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAAG,UAAI;AACrB,QAAI,EAAE,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;AAAG,UAAI;AAC7B,QAAI,KAAK,IAAI,KAAK;AAClB,QAAI,KAAK,IAAI,KAAK;AAClB,YAAQ,KAAK,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,CAAG;AAClE,QAAI,CAAC,IAAI,MAAM;AACf,YAAQ,MAAM;AACd,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AACzC,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AACzC,QAAI,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK;AAAA,EAC3C;AAEA,SAAO;AACT;AAYO,SAAS,UAAU,KAAK,GAAG,GAAG,GAAG;AACtC,MAAI,YAAY,MAAM,KAAK,KAAK;AAChC,OAAK;AACL,OAAK;AACL,OAAK;AACL,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,KAAK,KAAK,IAAI,CAAC;AACnB,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,MAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAClC,SAAO;AACT;AAQO,SAASQ,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACpE;AASO,IAAIC,SAAaA;AAYjB,IAAIC,cAAkBA;AAUtB,IAAIC,QAAYA;AAahB,IAAIC,OAAWA;AAWf,IAAIC,OAAWA;AAMf,IAAIC,OAAMb;AAWV,IAAII,SAAaA;AAUjB,IAAIL,OAAWA;AAYf,IAAIe,QAAYA;AAQhB,IAAIC,UAAcA;AAMlB,IAAIC,OAAMD;AASV,IAAIE,iBAAqBA;AAMzB,IAAIC,UAASD;AAUb,IAAIE,aAAiBA;AASrB,IAAIC,eAAmBA;AASvB,IAAIC,UAAcA;AAalB,IAAI,aAAa,WAAY;AAClC,MAAI,UAAexB,QAAO;AAC1B,MAAI,YAAiBY,YAAW,GAAG,GAAG,CAAC;AACvC,MAAI,YAAiBA,YAAW,GAAG,GAAG,CAAC;AACvC,SAAO,SAAU,KAAK,GAAG,GAAG;AAC1B,QAAIV,OAAW,IAAI,GAAG,CAAC;AAEvB,QAAIA,OAAM,WAAW;AACnB,MAAK,MAAM,SAAS,WAAW,CAAC;AAChC,UAAS,IAAI,OAAO,IAAI;AAAU,QAAK,MAAM,SAAS,WAAW,CAAC;AAClE,MAAK,UAAU,SAAS,OAAO;AAC/B,mBAAa,KAAK,SAAS,KAAK,EAAE;AAClC,aAAO;AAAA,IACT,WAAWA,OAAM,UAAU;AACzB,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,UAAI,CAAC,IAAI;AACT,aAAO;AAAA,IACT,OAAO;AACL,MAAK,MAAM,SAAS,GAAG,CAAC;AACxB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,UAAI,CAAC,IAAI,IAAIA;AACb,aAAOoB,WAAU,KAAK,GAAG;AAAA,IAC3B;AAAA,EACF;AACF,EAAE;AAaK,IAAI,SAAS,WAAY;AAC9B,MAAI,QAAQtB,QAAO;AACnB,MAAI,QAAQA,QAAO;AACnB,SAAO,SAAU,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AACnC,UAAM,OAAO,GAAG,GAAG,CAAC;AACpB,UAAM,OAAO,GAAG,GAAG,CAAC;AACpB,UAAM,KAAK,OAAO,OAAO,IAAI,KAAK,IAAI,EAAE;AACxC,WAAO;AAAA,EACT;AACF,EAAE;AAYK,IAAI,UAAU,WAAY;AAC/B,MAAI,OAAY,OAAO;AACvB,SAAO,SAAU,KAAK,MAAM,OAAO,IAAI;AACrC,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,MAAM,CAAC;AACjB,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,GAAG,CAAC;AACd,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,SAAK,CAAC,IAAI,CAAC,KAAK,CAAC;AACjB,WAAOsB,WAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC3C;AACF,EAAE;;;AGrsBF;AAAA;AAAA,aAAAG;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,kBAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,YAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,iBAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,aAAAC;AAAA,EAAA,mBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,eAAAC;AAAA,EAAA,cAAAC;AAAA,EAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,WAAAC;AAAA,EAAA,gBAAAC;AAAA,EAAA;AAAA;AAAA,uBAAAC;AAAA,EAAA,qBAAAC;AAAA,EAAA,YAAAC;AAAA;AAYO,SAASC,UAAS;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AAEnC,MAAa,cAAc,cAAc;AACvC,QAAI,CAAC,IAAI;AACT,QAAI,CAAC,IAAI;AAAA,EACX;AAEA,SAAO;AACT;AAQO,SAASC,OAAM,GAAG;AACvB,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AASO,SAASC,YAAW,GAAG,GAAG;AAC/B,MAAI,MAAM,IAAa,WAAW,CAAC;AACnC,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,EAAE,CAAC;AACZ,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,UAAS,KAAK,GAAG,GAAG;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG;AAChC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACnB,SAAO;AACT;AASO,SAASC,MAAK,KAAK,GAAG;AAC3B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC;AACvB,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AAUO,SAASC,KAAI,KAAK,GAAG,GAAG;AAC7B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,MAAI,CAAC,IAAI,KAAK,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAC5B,SAAO;AACT;AASO,SAASC,OAAM,KAAK,GAAG;AAC5B,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,MAAI,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC,CAAC;AACxB,SAAO;AACT;AAUO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI;AAChB,SAAO;AACT;AAWO,SAASC,aAAY,KAAK,GAAG,GAAGD,QAAO;AAC5C,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAIA;AACvB,SAAO;AACT;AASO,SAASE,UAAS,GAAG,GAAG;AAC7B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GACd,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AASO,SAASC,iBAAgB,GAAG,GAAG;AACpC,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,GACd,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAClB,SAAO,IAAI,IAAI,IAAI;AACrB;AAQO,SAASC,QAAO,GAAG;AACxB,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,SAAO,KAAK,MAAM,GAAG,CAAC;AACxB;AAQO,SAASC,eAAc,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,SAAO,IAAI,IAAI,IAAI;AACrB;AASO,SAASC,QAAO,KAAK,GAAG;AAC7B,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,MAAI,CAAC,IAAI,CAAC,EAAE,CAAC;AACb,SAAO;AACT;AASO,SAASC,SAAQ,KAAK,GAAG;AAC9B,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,MAAI,CAAC,IAAI,IAAM,EAAE,CAAC;AAClB,SAAO;AACT;AASO,SAASC,WAAU,KAAK,GAAG;AAChC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAIC,OAAM,IAAI,IAAI,IAAI;AAEtB,MAAIA,OAAM,GAAG;AAEX,IAAAA,OAAM,IAAI,KAAK,KAAKA,IAAG;AAAA,EACzB;AAEA,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,MAAI,CAAC,IAAI,EAAE,CAAC,IAAIA;AAChB,SAAO;AACT;AASO,SAASC,KAAI,GAAG,GAAG;AACxB,SAAO,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AACjC;AAWO,SAASC,OAAM,KAAK,GAAG,GAAG;AAC/B,MAAI,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAChC,MAAI,CAAC,IAAI,IAAI,CAAC,IAAI;AAClB,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAWO,SAASC,MAAK,KAAK,GAAG,GAAG,GAAG;AACjC,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,MAAI,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI;AAC1B,SAAO;AACT;AASO,SAASC,QAAO,KAAKb,QAAO;AACjC,EAAAA,SAAQA,UAAS;AACjB,MAAI,IAAa,OAAO,IAAI,IAAM,KAAK;AACvC,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAIA;AACvB,MAAI,CAAC,IAAI,KAAK,IAAI,CAAC,IAAIA;AACvB,SAAO;AACT;AAUO,SAAS,cAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI;AAC3B,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI;AAC3B,SAAO;AACT;AAUO,SAAS,eAAe,KAAK,GAAG,GAAG;AACxC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,SAAO;AACT;AAWO,SAASc,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC;AAClC,SAAO;AACT;AAYO,SAASC,eAAc,KAAK,GAAG,GAAG;AACvC,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,IAAI,EAAE,CAAC;AACX,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AACnC,MAAI,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,EAAE,EAAE;AACnC,SAAO;AACT;AAUO,SAASC,QAAO,KAAK,GAAG,GAAG,KAAK;AAErC,MAAI,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GACf,KAAK,EAAE,CAAC,IAAI,EAAE,CAAC,GACf,OAAO,KAAK,IAAI,GAAG,GACnB,OAAO,KAAK,IAAI,GAAG;AAEvB,MAAI,CAAC,IAAI,KAAK,OAAO,KAAK,OAAO,EAAE,CAAC;AACpC,MAAI,CAAC,IAAI,KAAK,OAAO,KAAK,OAAO,EAAE,CAAC;AACpC,SAAO;AACT;AAQO,SAASC,OAAM,GAAG,GAAG;AAC1B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC,GAEZ,MAAM,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,EAAE,GAEhE,SAAS,QAAQ,KAAK,KAAK,KAAK,MAAM;AAEtC,SAAO,KAAK,KAAK,KAAK,IAAI,KAAK,IAAI,QAAQ,EAAE,GAAG,CAAC,CAAC;AACpD;AAQO,SAASC,MAAK,KAAK;AACxB,MAAI,CAAC,IAAI;AACT,MAAI,CAAC,IAAI;AACT,SAAO;AACT;AAQO,SAASC,KAAI,GAAG;AACrB,SAAO,UAAU,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,IAAI;AACxC;AASO,SAASC,aAAY,GAAG,GAAG;AAChC,SAAO,EAAE,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACtC;AASO,SAASC,QAAO,GAAG,GAAG;AAC3B,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,MAAI,KAAK,EAAE,CAAC,GACR,KAAK,EAAE,CAAC;AACZ,SAAO,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC,KAAK,KAAK,IAAI,KAAK,EAAE,KAAc,UAAU,KAAK,IAAI,GAAK,KAAK,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAC9K;AAMO,IAAIZ,OAAML;AAMV,IAAIkB,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,OAAM9B;AAMV,IAAI+B,QAAOvB;AAMX,IAAIwB,WAAUvB;AAMd,IAAIwB,UAAStB;AAcb,IAAIuB,WAAU,WAAY;AAC/B,MAAI,MAAM1C,QAAO;AACjB,SAAO,SAAU,GAAG,QAAQ,QAAQ,OAAO,IAAI,KAAK;AAClD,QAAI,GAAG;AAEP,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,CAAC,QAAQ;AACX,eAAS;AAAA,IACX;AAEA,QAAI,OAAO;AACT,UAAI,KAAK,IAAI,QAAQ,SAAS,QAAQ,EAAE,MAAM;AAAA,IAChD,OAAO;AACL,UAAI,EAAE;AAAA,IACR;AAEA,SAAK,IAAI,QAAQ,IAAI,GAAG,KAAK,QAAQ;AACnC,UAAI,CAAC,IAAI,EAAE,CAAC;AACZ,UAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AAChB,SAAG,KAAK,KAAK,GAAG;AAChB,QAAE,CAAC,IAAI,IAAI,CAAC;AACZ,QAAE,IAAI,CAAC,IAAI,IAAI,CAAC;AAAA,IAClB;AAEA,WAAO;AAAA,EACT;AACF,EAAE;;;AC5mBF,IAAqB,cAArB,MAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBhC,YAAY,OAAe,QAAgB,UAA0B,cAAuB;AAC3F,SAAK,QAAQ;AACb,SAAK,SAAS;AAEd,SAAK,WAAW;AAChB,SAAK,eAAe;AAEpB,SAAK,MAAM,GAAG,kBAAkB;AAChC,OAAG,gBAAgB,GAAG,aAAa,KAAK,GAAG;AAE3C,SAAK,iBAAiB;AAEtB,QAAI,GAAG,uBAAuB,GAAG,WAAW,KAAK,GAAG,sBAAsB;AACzE,cAAQ,KAAK,mDAAmD;AAAA,IACjE;AAEA,OAAG,gBAAgB,GAAG,aAAa,IAAI;AAAA,EACxC;AAAA,EAEU,mBAAmB;AAC5B,QAAI,cAAc,IAAI,MAAc;AACpC,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC9C,WAAK,SAAS,CAAC,EAAE,eAAe,MAAM,KAAK,OAAO,KAAK,MAAM;AAC7D,UAAI,KAAK,SAAS,CAAC,EAAE,iBAAiB,GAAG,kBAAkB;AAE1D,WAAG;AAAA,UACF,GAAG;AAAA,UACH,GAAG,oBAAoB;AAAA,UACvB,GAAG;AAAA,UACH,KAAK,SAAS,CAAC,EAAE;AAAA,UACjB;AAAA,QACD;AACA,oBAAY,KAAK,GAAG,oBAAoB,CAAC;AAAA,MAC1C,OAAO;AAEN,aAAK,SAAS,CAAC,EAAE,iBAAiB,GAAG,oBAAoB,GAAG,MAAM;AAClE,aAAK,SAAS,CAAC,EAAE,iBAAiB,GAAG,oBAAoB,GAAG,MAAM;AAClE,aAAK,SAAS,CAAC,EAAE,iBAAiB,GAAG,gBAAgB,GAAG,aAAa;AACrE,aAAK,SAAS,CAAC,EAAE,iBAAiB,GAAG,gBAAgB,GAAG,aAAa;AACrE,WAAG;AAAA,UACF,GAAG;AAAA,UACH,GAAG,oBAAoB;AAAA,UACvB,GAAG;AAAA,UACH,KAAK,SAAS,CAAC,EAAE;AAAA,UACjB;AAAA,QACD;AACA,oBAAY,KAAK,GAAG,oBAAoB,CAAC;AAAA,MAC1C;AAAA,IACD;AAGA,OAAG,YAAY,WAAW;AAE1B,QAAI,KAAK,gBAAgB,QAAW;AAEnC,WAAK,aAAa,eAAe,MAAM,KAAK,OAAO,KAAK,MAAM;AAE9D,UAAI,KAAK,aAAa,iBAAiB,GAAG,kBAAkB;AAE3D,WAAG;AAAA,UACF,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,KAAK,aAAa;AAAA,UAClB;AAAA,QACD;AAAA,MACD,OAAO;AAEN,WAAG;AAAA,UACF,GAAG;AAAA,UACH,GAAG;AAAA,UACH,GAAG;AAAA,UACH,KAAK,aAAa;AAAA,UAClB;AAAA,QACD;AAAA,MACD;AAAA,IACD,OAAO;AAEN,WAAK,MAAM,GAAG,mBAAmB;AACjC,SAAG,iBAAiB,GAAG,cAAc,KAAK,GAAG;AAC7C,SAAG,oBAAoB,GAAG,cAAc,GAAG,eAAe,KAAK,OAAO,KAAK,MAAM;AAEjF,SAAG;AAAA,QACF,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAG;AAAA,QACH,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,eAAe,OAAe,QAAgB;AAC7C,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,aAAS,WAAW,KAAK,UAAU;AAClC,cAAQ,eAAe,MAAM,KAAK,OAAO,KAAK,MAAM;AAAA,IACrD;AACA,QAAI,KAAK,cAAc;AACtB,WAAK,aAAa,eAAe,MAAM,KAAK,OAAO,KAAK,MAAM;AAAA,IAC/D;AAEA,QAAI,KAAK,KAAK;AACb,SAAG,gBAAgB,GAAG,aAAa,KAAK,GAAG;AAC3C,SAAG,iBAAiB,GAAG,cAAc,KAAK,GAAG;AAC7C,SAAG,oBAAoB,GAAG,cAAc,GAAG,kBAAkB,OAAO,MAAM;AAC1E,SAAG,gBAAgB,GAAG,aAAa,IAAI;AAAA,IACxC;AAAA,EACD;AAAA,EAEA,WAAmB;AAClB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,YAAoB;AACnB,WAAO,KAAK;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,KAAK,QAAgB;AACpB,OAAG,gBAAgB,QAAQ,KAAK,GAAG;AAAA,EACpC;AACD;;;ACpJA,IAAqB,UAArB,MAA6B;AAAA,EAe5B,YACC,YAAqB,MACrB,iBAAyB,GAAG,MAC5B,SAAiB,GAAG,MACpB,kBAA0B,GAAG,eAC7B,gBAAwB,GAAG,YAC1B;AACD,SAAK,YAAY;AAEjB,SAAK,iBAAiB;AACtB,SAAK,SAAS;AACd,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AAGrB,SAAK,UAAU,GAAG,cAAc;AAChC,OAAG,YAAY,KAAK,eAAe,KAAK,OAAO;AAG/C,OAAG,cAAc,KAAK,eAAe,GAAG,gBAAgB,GAAG,MAAM;AACjE,OAAG,cAAc,KAAK,eAAe,GAAG,gBAAgB,GAAG,MAAM;AACjE,OAAG,cAAc,KAAK,eAAe,GAAG,oBAAoB,GAAG,OAAO;AACtE,OAAG,cAAc,KAAK,eAAe,GAAG,oBAAoB,GAAG,OAAO;AACtE,OAAG,YAAY,GAAG,qBAAqB,IAAI;AAG3C,SAAK,eAAe,MAAM,GAAG,CAAC;AAE9B,OAAG,YAAY,KAAK,eAAe,IAAI;AAAA,EACxC;AAAA,EAEA,eAAe,MAAkB,OAAe,QAAgB;AAC/D,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,OAAG,YAAY,KAAK,eAAe,KAAK,OAAO;AAC/C,OAAG;AAAA,MACF,KAAK;AAAA,MACL;AAAA,MACA,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,IACD;AACA,QAAI,KAAK,WAAW;AACnB,SAAG,eAAe,KAAK,aAAa;AACpC,SAAG,cAAc,KAAK,eAAe,GAAG,oBAAoB,GAAG,oBAAoB;AAAA,IACpF;AACA,OAAG,YAAY,KAAK,eAAe,IAAI;AAEvC,SAAK,iBAAiB;AAAA,EACvB;AAAA,EAEA,KAAK,eAAuB,GAAG;AAC9B,OAAG,cAAc,GAAG,WAAW,YAAY;AAC3C,OAAG,YAAY,KAAK,eAAe,KAAK,OAAO;AAAA,EAChD;AAAA,EAEA,aAAa,KAAa;AACzB,QAAI,QAAQ,IAAI,MAAM;AACtB,UAAM,cAAc;AACpB,UAAM,MAAM;AACZ,QAAI,OAAO;AACX,UAAM,iBAAiB,QAAQ,WAAY;AAE1C,WAAK,QAAQ,MAAM;AACnB,WAAK,SAAS,MAAM;AACpB,SAAG,YAAY,KAAK,eAAe,KAAK,OAAO;AAC/C,SAAG;AAAA,QACF,KAAK;AAAA,QACL;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA,MACD;AACA,UAAI,KAAK,WAAW;AACnB,WAAG,eAAe,KAAK,aAAa;AACpC,WAAG,cAAc,KAAK,eAAe,GAAG,oBAAoB,GAAG,oBAAoB;AAAA,MACpF;AACA,WAAK,iBAAiB;AAAA,IACvB,CAAC;AAAA,EACF;AAAA,EAEA,wBAAwB,YAAoB;AAC3C,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,IAAI;AACR,QAAI,WAAW,WAAW,GAAG,GAAG;AAE/B,UAAI,WAAW,UAAU,GAAG;AAC3B,YAAI,SAAS,WAAW,MAAM,GAAG,CAAC,GAAG,EAAE;AACvC,YAAI,SAAS,WAAW,MAAM,GAAG,CAAC,GAAG,EAAE;AACvC,YAAI,SAAS,WAAW,MAAM,GAAG,CAAC,GAAG,EAAE;AACvC,YAAI,WAAW,UAAU,GAAG;AAC3B,cAAI,SAAS,WAAW,MAAM,GAAG,CAAC,GAAG,EAAE;AAAA,QACxC;AAAA,MACD;AAAA,IACD,WAAW,WAAW,WAAW,OAAO,GAAG;AAC1C,UAAI,cAAc,WAAW,YAAY,GAAG;AAC5C,UAAI,SAAS,WACX,UAAU,QAAQ,QAAQ,WAAW,EACrC,MAAM,GAAG,EACT,IAAI,CAAC,UAAU;AACf,eAAO,WAAW,KAAK;AAAA,MACxB,CAAC;AACF,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,CAAC,IAAI;AAAA,IACjB,WAAW,WAAW,WAAW,MAAM,GAAG;AACzC,UAAI,cAAc,WAAW,YAAY,GAAG;AAC5C,UAAI,SAAS,WACX,UAAU,OAAO,QAAQ,WAAW,EACpC,MAAM,GAAG,EACT,IAAI,CAAC,UAAU;AACf,eAAO,SAAS,KAAK;AAAA,MACtB,CAAC;AACF,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,CAAC;AACZ,UAAI,OAAO,CAAC;AAAA,IACb;AAEA,SAAK,eAAe,IAAI,WAAW,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;AAAA,EACvD;AAAA,EAEA,iBAAiB,GAAW,GAAW;AACtC,OAAG,YAAY,KAAK,eAAe,KAAK,OAAO;AAC/C,OAAG,cAAc,KAAK,eAAe,GAAG,CAAC;AACzC,OAAG,YAAY,KAAK,eAAe,IAAI;AAAA,EACxC;AACD;;;ACnJA,IAAqB,iBAArB,MAAoC;AAAA,EAQnC,YAAY,eAA8B;AACzC,SAAK,gBAAgB;AAErB,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,MAAM;AAEX,SAAK,KAAK;AAAA,EACX;AAAA,EAEA,OAAO;AAEN,SAAK,MAAM,GAAG,kBAAkB;AAChC,SAAK,MAAM,GAAG,aAAa;AAC3B,SAAK,MAAM,GAAG,aAAa;AAG3B,OAAG,gBAAgB,KAAK,GAAG;AAC3B,OAAG,WAAW,GAAG,cAAc,KAAK,GAAG;AAEvC,SAAK,cAAc,6BAA6B;AAEhD,OAAG,gBAAgB,IAAI;AAAA,EACxB;AAAA,EAEA,UAAU;AACT,OAAG,gBAAgB,KAAK,GAAG;AAAA,EAC5B;AAAA,EAEA,YAAY;AACX,OAAG,gBAAgB,IAAI;AAAA,EACxB;AAAA,EAEA,cAAc,MAAoB;AACjC,QAAI,QAAQ,UAAa,KAAK,UAAU,GAAG;AAC1C;AAAA,IACD;AACA,OAAG,gBAAgB,KAAK,GAAG;AAC3B,OAAG,WAAW,GAAG,cAAc,KAAK,GAAG;AACvC,OAAG,WAAW,GAAG,cAAc,MAAM,GAAG,WAAW;AACnD,OAAG,gBAAgB,IAAI;AAAA,EACxB;AAAA,EAEA,aAAa,MAAkB;AAC9B,OAAG,gBAAgB,KAAK,GAAG;AAE3B,OAAG,WAAW,GAAG,sBAAsB,KAAK,GAAG;AAC/C,OAAG,WAAW,GAAG,sBAAsB,MAAM,GAAG,WAAW;AAE3D,OAAG,gBAAgB,IAAI;AAAA,EACxB;AAAA,EAEA,qBAAkC;AACjC,WAAO;AAAA,EACR;AAAA,EAEA,OAAO;AAAA,EACP;AACD;;;ACjEA,IAAqB,aAArB,cAAwC,eAAe;AAAA,EAOtD,YAAY,eAA8B,UAA0B;AACnE,UAAM,aAAa;AAGnB,SAAK,WAAW,IAAI,aAAa;AAAA;AAAA,MAEvB;AAAA,MAAO;AAAA,MAAS;AAAA,MAAK;AAAA,MACrB;AAAA,MAAM;AAAA,MAAU;AAAA,MAAK;AAAA,MACpB;AAAA,MAAK;AAAA,MAAU;AAAA,MAAK;AAAA,MACpB;AAAA,MAAM;AAAA,MAAS;AAAA,MAAK;AAAA,IACzB,CAAC;AAGP,SAAK,UAAU,IAAI,WAAW;AAAA,MACpB;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,IACV,CAAC;AAEP,SAAK,cAAc,KAAK,QAAQ;AAChC,SAAK,aAAa,KAAK,OAAO;AAE9B,SAAK,WAAW;AAEhB,aAAS,WAAW,KAAK,UAAU;AAClC,cAAQ,iBAAiB,GAAG,gBAAgB,GAAG,aAAa;AAC5D,cAAQ,iBAAiB,GAAG,gBAAgB,GAAG,aAAa;AAAA,IAC7D;AAAA,EACD;AAAA,EAEA,KAAK,eAAwB,MAAM;AAClC,SAAK,QAAQ;AAEb,QAAI,cAAc;AACjB,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC9C,aAAK,SAAS,CAAC,EAAE,KAAK,CAAC;AAAA,MACxB;AAAA,IACD;AAEA,OAAG,aAAa,GAAG,WAAW,GAAG,GAAG,cAAc,CAAC;AAAA,EACpD;AACD;;;AClDA,IAAqB,gBAArB,MAAmC;AAAA,EAKlC,YACC,mBACA,kBACA,oBACA,yBAAkC,OACjC;AACD,SAAK,gBAAgB;AACrB,SAAK;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AACA,SAAK,kBAAkB,oBAAI,IAAkC;AAAA,EAC9D;AAAA,EAEA,YACC,mBACA,oBACA,sBACA,wBACC;AAED,QAAI,KAAK,iBAAiB,MAAM;AAC/B,SAAG,cAAc,KAAK,aAAa;AAAA,IACpC;AAEA,YAAQ,IAAI,+BAA+B,iBAAiB;AAG5D,UAAM,eAAe,GAAG,aAAa,GAAG,aAAa;AACrD,OAAG,aAAa,cAAc,kBAAkB;AAChD,OAAG,cAAc,YAAY;AAG7B,QAAI,CAAC,GAAG,mBAAmB,cAAc,GAAG,cAAc,KAAK,wBAAwB;AACtF,cAAQ;AAAA,QACP,0CACC,GAAG,mBAAmB,cAAc,GAAG,cAAc;AAAA,MACvD;AACA,cAAQ,IAAI,mCAAmC,GAAG,iBAAiB,YAAY,CAAC;AAAA,IACjF;AAGA,UAAM,iBAAiB,GAAG,aAAa,GAAG,eAAe;AACzD,OAAG,aAAa,gBAAgB,oBAAoB;AACpD,OAAG,cAAc,cAAc;AAG/B,QAAI,CAAC,GAAG,mBAAmB,gBAAgB,GAAG,cAAc,KAAK,wBAAwB;AACxF,cAAQ;AAAA,QACP,4CACC,GAAG,mBAAmB,gBAAgB,GAAG,cAAc;AAAA,MACzD;AACA,cAAQ,IAAI,qCAAqC,GAAG,iBAAiB,cAAc,CAAC;AAAA,IACrF;AAEA,SAAK,gBAAgB,GAAG,cAAc;AAEtC,OAAG,aAAa,KAAK,eAAe,YAAY;AAChD,OAAG,aAAa,KAAK,eAAe,cAAc;AAClD,OAAG,YAAY,KAAK,aAAa;AAGjC,QAAI,gBAAgB,GAAG,oBAAoB,KAAK,eAAe,GAAG,WAAW;AAC7E,QAAI,CAAC,iBAAiB,wBAAwB;AAC7C,cAAQ,IAAI,kCAAkC,aAAa;AAC3D,cAAQ,IAAI,4BAA4B,GAAG,kBAAkB,KAAK,aAAa,CAAC;AAAA,IACjF;AAGA,OAAG,aAAa,YAAY;AAC5B,OAAG,aAAa,cAAc;AAAA,EAC/B;AAAA,EAEA,MAAM;AACL,OAAG,WAAW,KAAK,aAAa;AAAA,EACjC;AAAA,EAEA,+BAA+B;AAAA,EAC/B;AAAA,EAEA,wCAAwC;AAAA,EAAC;AAAA,EAEzC,mBAAmB,aAAqB;AACvC,SAAK,gBAAgB,IAAI,aAAa,GAAG,mBAAmB,KAAK,eAAe,WAAW,CAAC;AAAA,EAC7F;AAAA,EAEA,mBAAmB,aAAsD;AACxE,QAAI,KAAK,gBAAgB,IAAI,WAAW,GAAG;AAC1C,aAAO,CAAC,KAAK,gBAAgB,IAAI,WAAW,GAAG,IAAI;AAAA,IACpD;AAGA,WAAO,CAAC,GAAG,KAAK;AAAA,EACjB;AACD;;;ACpGO,IAAM,sBAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAc3C,IAAM,wBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAatC,IAAM,0BAAN,cAAsC,cAAc;AAAA,EACnD,cAAc;AACb,UAAM,2BAA2B,qBAAqB,qBAAqB;AAE3E,SAAK,mBAAmB,eAAe;AAEvC,OAAG,UAAU,KAAK,gBAAgB,eAAe,GAAG,CAAC;AAAA,EACtD;AAAA,EAEA,+BAA+B;AAE9B,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AACD;AAEO,IAAI,0BAA0B;AAE9B,IAAI,gCAAgC,WAAY;AACtD,4BAA0B,IAAI,wBAAwB;AACvD;;;AChDA,IAAqB,iBAArB,MAAoC;AAAA,EAInC,YAAY,eAAwB;AACnC,SAAK,aAAa,IAAI,WAAW,yBAAyB,CAAC,aAAa,CAAC;AACzE,SAAK,oBAAoB;AAAA,EAC1B;AAAA,EAEQ,aAAa;AACpB,QAAI,KAAK,qBAAqB,QAAW;AACxC,SAAG,gBAAgB,GAAG,kBAAkB,IAAI;AAAA,IAC7C,OACK;AACJ,WAAK,kBAAkB,KAAK,GAAG,gBAAgB;AAAA,IAChD;AAAA,EACD;AAAA,EAEA,OAAO;AACN,SAAK,WAAW;AAChB,OAAG,QAAQ,GAAG,UAAU;AAExB,4BAAwB,IAAI;AAC5B,SAAK,WAAW,KAAK,IAAI;AAEzB,OAAG,OAAO,GAAG,UAAU;AAAA,EACxB;AACD;;;AC5BA,IAAqB,SAArB,cAAoC,eAAe;AAAA,EAQlD,YAAY,eAA8B,SAAkB;AAC3D,UAAM,aAAa;AAGnB,SAAK,WAAW,IAAI,aAAa;AAAA;AAAA,MAEvB;AAAA,MAAO;AAAA,MAAK;AAAA;AAAA,MACZ;AAAA,MAAM;AAAA,MAAM;AAAA;AAAA,MACX;AAAA,MAAK;AAAA,MAAM;AAAA;AAAA,MACX;AAAA,MAAM;AAAA,MAAK;AAAA;AAAA,MACZ;AAAA,MAAO;AAAA,MAAM;AAAA;AAAA,MACb;AAAA,MAAM;AAAA,MAAO;AAAA;AAAA,MACZ;AAAA,MAAK;AAAA,MAAO;AAAA;AAAA,MACZ;AAAA,MAAM;AAAA,MAAM;AAAA;AAAA,IACjB,CAAC;AAGP,SAAK,UAAU,IAAI,WAAW;AAAA,MACpB;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,MAEf;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,MAEN;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,MAEN;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,MAEN;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,MAEN;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,IACD,CAAC;AACP,SAAK,cAAc,KAAK,QAAQ;AAChC,SAAK,aAAa,KAAK,OAAO;AAE9B,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,OAAO;AACN,SAAK,QAAQ;AAEb,SAAK,QAAQ,KAAK;AAElB,OAAG,aAAa,GAAG,WAAW,KAAK,QAAQ,QAAQ,GAAG,cAAc,CAAC;AAAA,EACtE;AACD;;;AC3DO,IAAM,kBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBvC,IAAM,oBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBlC,IAAM,sBAAN,cAAkC,cAAc;AAAA,EAC/C,cAAc;AACb,UAAM,uBAAuB,iBAAiB,iBAAiB;AAE/D,SAAK,mBAAmB,QAAQ;AAChC,OAAG,UAAU,KAAK,gBAAgB,QAAQ,GAAG,CAAC;AAE9C,SAAK,mBAAmB,gBAAgB;AAAA,EACzC;AAAA,EAEA,+BAA+B;AAE9B,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AACD;AAEO,IAAI,sBAAsB;AAE1B,IAAI,4BAA4B,WAAY;AAClD,wBAAsB,IAAI,oBAAoB;AAC/C;;;ACrDA,IAAqB,mBAArB,MAAsC;AAAA,EAGrC,cAAc;AACb,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,UAAU,SAAkB;AAC3B,SAAK,SAAS,IAAI,OAAO,qBAAqB,OAAO;AAAA,EACtD;AAAA,EAEA,KAAK,QAAgB;AACpB,QAAI,KAAK,UAAU,QAAW;AAC7B,SAAG,OAAO,GAAG,UAAU;AACvB,0BAAoB,IAAI;AACxB,aAAO,mBAAmB,oBAAoB,mBAAmB,gBAAgB,EAAE,CAAC,GAAG,IAAI;AAC3F,SAAG,UAAU,GAAG,MAAM;AACtB,WAAK,OAAO,KAAK;AACjB,SAAG,UAAU,GAAG,IAAI;AAAA,IACrB;AAAA,EACD;AACD;;;ACxBA,IAAM,0BAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BjC,IAAM,4BAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0DjD,IAAM,4BAAN,cAAwC,cAAc;AAAA,EACrD,cAAc;AACb,UAAM,gBAAgB,yBAAyB,yBAAyB;AAExE,SAAK,IAAI;AAET,SAAK,mBAAmB,aAAa;AACrC,SAAK,mBAAmB,cAAc;AACtC,SAAK,mBAAmB,gBAAgB;AACxC,SAAK,mBAAmB,eAAe;AAEvC,SAAK,mBAAmB,kBAAkB;AAC1C,SAAK,mBAAmB,mBAAmB;AAC3C,SAAK,mBAAmB,mBAAmB;AAE3C,SAAK,mBAAmB,eAAe;AAEvC,OAAG,UAAU,KAAK,mBAAmB,kBAAkB,EAAE,CAAC,GAAG,CAAC;AAC9D,OAAG,UAAU,KAAK,mBAAmB,mBAAmB,EAAE,CAAC,GAAG,CAAC;AAC/D,OAAG,UAAU,KAAK,mBAAmB,mBAAmB,EAAE,CAAC,GAAG,CAAC;AAAA,EAChE;AAAA,EAEA,+BAAqC;AAEpC,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AACD;AAEO,IAAI,4BAA4B;AAEhC,IAAI,kCAAkC,WAAY;AACxD,8BAA4B,IAAI,0BAA0B;AAC3D;;;ACxHA,IAAqB,qBAArB,MAAwC;AAAA,EAGvC,cAAc;AACb,SAAK,oBAAoB,IAAI;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,QACC,IAAI,QAAQ,OAAO,GAAG,SAAS,GAAG,MAAM,GAAG,KAAK;AAAA,QAChD,IAAI,QAAQ,OAAO,GAAG,SAAS,GAAG,MAAM,GAAG,KAAK;AAAA,QAChD,IAAI,QAAQ,KAAK;AAAA,QACjB,IAAI,QAAQ,KAAK;AAAA,MAClB;AAAA,MACA;AAAA,IACD;AAAA,EACD;AAAA,EAEA,cAAc,GAAW,GAAW;AACnC,SAAK,kBAAkB,eAAe,GAAG,CAAC;AAAA,EAC3C;AAAA,EAEA,KAAK,OAAc,QAAgB;AAClC,8BAA0B,IAAI;AAC9B,OAAG,SAAS,GAAK,GAAK,KAAK,kBAAkB,SAAS,GAAG,KAAK,kBAAkB,UAAU,CAAC;AAG3F,SAAK,kBAAkB,KAAK,GAAG,WAAW;AAC1C,OAAG,WAAW,GAAK,GAAK,GAAK,CAAG;AAChC,OAAG,MAAM,GAAG,mBAAmB,GAAG,mBAAmB,GAAG,kBAAkB;AAE1E,OAAG,QAAQ,GAAG,KAAK;AAEnB,WAAO,mBAAmB,0BAA0B,mBAAmB,gBAAgB,EAAE,CAAC,CAAC;AAE3F,UAAM,YAAY,2BAA2B,IAAI;AAAA,EAClD;AACD;;;ACvCO,IAAM,wBAAgC;AACtC,IAAI,yBAAiC;AAE5C,IAAI;AAEJ,IAAM,4BAAN,cAAwC,cAAc;AAAA,EACrD,cAAc;AACb,UAAM,gBAAgB,qBAAqB,yBAAyB;AAEpE,SAAK,IAAI;AAET,SAAK,mBAAmB,WAAW;AACnC,SAAK,mBAAmB,SAAS;AACjC,SAAK,mBAAmB,aAAa;AACrC,SAAK,mBAAmB,WAAW;AACnC,SAAK,mBAAmB,UAAU;AAElC,OAAG,UAAU,KAAK,mBAAmB,WAAW,EAAE,CAAC,GAAG,CAAC;AACvD,OAAG,UAAU,KAAK,mBAAmB,SAAS,EAAE,CAAC,GAAG,CAAC;AACrD,OAAG,UAAU,KAAK,mBAAmB,aAAa,EAAE,CAAC,GAAG,CAAC;AACzD,OAAG,UAAU,KAAK,mBAAmB,WAAW,EAAE,CAAC,GAAG,CAAC;AACvD,OAAG,UAAU,KAAK,mBAAmB,UAAU,EAAE,CAAC,GAAG,CAAC;AAEtD,aAAS,IAAI,GAAG,IAAI,wBAAwB,KAAK;AAChD,WAAK,mBAAmB,oBAAoB,IAAI,GAAG;AACnD,SAAG,UAAU,KAAK,mBAAmB,oBAAoB,IAAI,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AAAA,IAC5E;AAEA,aAAS,IAAI,GAAG,IAAI,uBAAuB,KAAK;AAC/C,WAAK,mBAAmB,iBAAiB,IAAI,YAAY;AACzD,WAAK,mBAAmB,iBAAiB,IAAI,UAAU;AAEvD,WAAK,mBAAmB,iBAAiB,IAAI,YAAY;AACzD,WAAK,mBAAmB,iBAAiB,IAAI,UAAU;AACvD,WAAK,mBAAmB,iBAAiB,IAAI,aAAa;AAE1D,WAAK,mBAAmB,iBAAiB,IAAI,sBAAsB;AAAA,IACpE;AAEA,SAAK,mBAAmB,4BAA4B;AACpD,SAAK,mBAAmB,yBAAyB;AACjD,SAAK,mBAAmB,oCAAoC;AAC5D,SAAK,mBAAmB,iBAAiB;AACzC,SAAK,mBAAmB,QAAQ;AAChC,SAAK,mBAAmB,kBAAkB;AAAA,EAC3C;AAAA,EAEA,+BAAqC;AAEpC,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AACD;AAEO,IAAI,4BAA4B;AAEhC,IAAI,kCAAkC,WAAY;AACxD,2BAAyB,KAAK;AAAA,IAC7B;AAAA,IACA,GAAG,aAAa,GAAG,uBAAuB,IAAI;AAAA,EAC/C;AAEA,8BACC;AAAA;AAAA;AAAA,4BAIA,wBACA;AAAA,6BAEA,ywBAAwB,KAAK;AAChD,QAAI,KAAK,GAAG;AACX,mCACC;AAAA,qCAEA,IACA;AAAA,4CAEA,IACA;AAAA;AAAA;AAAA,IAGF,OAAO;AACN,mCACC;AAAA,0CAEA,IACA;AAAA,4CAEA,IACA;AAAA;AAAA;AAAA,IAGF;AAAA,EACD;AAEA,+BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAa7B,8BAA4B,IAAI,0BAA0B;AAC3D;;;ACxRA,IAAqB,qBAArB,MAAwC;AAAA,EAGvC,YAAY,eAA0B;AACrC,SAAK,aAAa,IAAI,WAAW,2BAA2B,aAAa;AAAA,EAC1E;AAAA,EAEA,KAAK,OAAc,QAAgB;AAElC,OAAG,QAAQ,GAAG,UAAU;AAGxB,8BAA0B,IAAI;AAE9B,OAAG,WAAW,0BAA0B,mBAAmB,QAAQ,EAAE,CAAC,GAAG,OAAO,YAAY,CAAC;AAC7F,UAAM,iBAAiB,KAAK,yBAAyB;AACrD,UAAM,iBAAiB;AAAA,MACtB,aAAK,KAAK,aAAK,OAAO,CAAC;AAAA,MACvB;AAAA,MACA,0BAA0B,mBAAmB,kBAAkB,EAAE,CAAC;AAAA,IACnE;AAEA,OAAG,UAAU,0BAA0B,mBAAmB,iBAAiB,EAAE,CAAC,GAAG,MAAM,YAAY,MAAM;AAGzG,QAAI,UAAU;AACd,aAAS,IAAI,GAAG,IAAI,MAAM,YAAY,QAAQ,KAAK;AAClD,YAAM,YAAY,CAAC,EAAE,KAAK,GAAG,SAAS,yBAAyB;AAC/D,UAAI,MAAM,YAAY,CAAC,EAAE,YAAY;AACpC;AAAA,MACD;AAAA,IACD;AAGA,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,SAAS,QAAQ,KAAK;AACzD,WAAK,WAAW,SAAS,CAAC,EAAE,KAAK,CAAC;AAAA,IACnC;AAGA,cAAU,KAAK,WAAW,SAAS;AACnC,eAAW,cAAc,MAAM,aAAa;AAC3C,UAAI,UAAU,KAAK,WAAW,SAAS,UAAU,wBAAwB;AACxE;AAAA,MACD;AACA,UAAI,WAAW,YAAY;AAC1B,mBAAW,oBAAoB,KAAK,SAAS;AAAA,MAC9C;AAAA,IACD;AAEA,SAAK,WAAW,KAAK,KAAK;AAI1B,OAAG,OAAO,GAAG,UAAU;AAAA,EACxB;AACD;;;AChEA,IAAM,wBAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkB/B,IAAM,0BAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4B/C,IAAM,iCAAN,cAA6C,cAAc;AAAA,EAC1D,cAAc;AACb,UAAM,cAAc,uBAAuB,uBAAuB;AAElE,SAAK,IAAI;AAET,SAAK,mBAAmB,kBAAkB;AAC1C,SAAK,mBAAmB,aAAa;AACrC,SAAK,mBAAmB,eAAe;AAAA,EACxC;AAAA,EAEA,+BAAqC;AAEpC,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AACD;AAEO,IAAI,iCAAiC;AAErC,IAAI,uCAAuC,WAAY;AAC7D,mCAAiC,IAAI,+BAA+B;AACrE;;;ACtEA,IAAqB,8BAArB,MAAiD;AAAA;AAAA,EAOhD,cAAc;AAEb,SAAK,mBAAmB;AACxB,SAAK,eAAe;AACpB,SAAK,eAAe,IAAI;AAAA,MACvB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,CAAC;AAAA,MACD,IAAI,QAAQ,OAAO,GAAG,oBAAoB,GAAG,iBAAiB,GAAG,KAAK;AAAA,IACvE;AAAA,EAED;AAAA,EAEA,2BAA2B,KAAa;AACvC,SAAK,mBAAmB;AACxB,SAAK,aAAa,eAAe,KAAK,GAAG;AAAA,EAC1C;AAAA,EAEA,KAAK,OAAc;AAClB,SAAK,aAAa,KAAK,GAAG,WAAW;AAErC,OAAG,OAAO,GAAG,UAAU;AAGvB,mCAA+B,IAAI;AACnC,OAAG,SAAS,GAAG,GAAG,KAAK,kBAAkB,KAAK,gBAAgB;AAC9D,OAAG,WAAW,GAAK,GAAK,GAAK,CAAG;AAChC,OAAG,MAAM,GAAG,mBAAmB,GAAG,gBAAgB;AAMlD,UACE,iBACA;AAAA,MACA,aAAK,KAAK,aAAK,OAAO,CAAC;AAAA,MACvB,KAAK;AAAA,MACL,+BAA+B,mBAAmB,kBAAkB,EAAE,CAAC;AAAA,IACxE;AAGD,UAAM,YAAY,gCAAgC,KAAK;AAAA,EAIxD;AACD;;;AC3DA,IAAqB,SAArB,MAA4B;AAAA,EAa3B,cAAc;AAEb,SAAK,MAAM,aAAK,OAAO;AACvB,SAAK,MAAM,aAAK,WAAW,GAAK,GAAK,EAAI;AACzC,SAAK,KAAK,aAAK,WAAW,GAAK,GAAK,CAAG;AACvC,SAAK,aAAa,aAAK,OAAO;AAC9B,SAAK,wBAAwB;AAI7B,SAAK,mBAAmB,aAAK,OAAO;AACpC,SAAK,wBAAwB;AAC7B,SAAK,QAAQ,KAAO;AACpB,SAAK,MAAO,KAAO,KAAK,KAAM;AAC9B,SAAK,mBAAmB;AAGxB,SAAK,iBAAiB,aAAK,OAAO;AAAA,EACnC;AAAA,EAEA,oBAA0B;AACzB,SAAK,qBAAqB;AAC1B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,gBAAsB;AACrB,SAAK,qBAAqB;AAC1B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,sBAA4B;AAC3B,SAAK,qBAAqB;AAC1B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,SAAiB;AAChB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,cAAoB;AACnB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,SAAuB;AACtB,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,WAAiB;AAChB,QAAI,YAAY,aAAK,OAAO;AAC5B,iBAAK,MAAM,WAAW,KAAK,KAAK,KAAK,EAAE;AACvC,iBAAK,UAAU,WAAW,SAAS;AACnC,WAAO;AAAA,EACR;AAAA,EAEA,YAAY,KAAmB;AAC9B,iBAAK,KAAK,KAAK,KAAK,GAAG;AACvB,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,UAAU,aAA2B;AACpC,iBAAK,IAAI,KAAK,KAAK,KAAK,KAAK,WAAW;AACxC,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,OAAO,KAAW;AACjB,iBAAK,UAAU,KAAK,KAAK,GAAG;AAC5B,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,MAAM,IAAU;AACf,iBAAK,UAAU,KAAK,IAAI,EAAE;AAC1B,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,mBAAmB,OAAe,KAAa;AAC9C,iBAAK;AAAA,MACJ,KAAK;AAAA,MACL,KAAK,IAAK,QAAQ,KAAK,KAAM,GAAG,IAAI,KAAK,IAAK,MAAM,KAAK,KAAM,GAAG;AAAA,MAClE,KAAK,IAAK,QAAQ,KAAK,KAAM,GAAG;AAAA,MAChC,KAAK,IAAK,QAAQ,KAAK,KAAM,GAAG,IAAI,KAAK,IAAK,MAAM,KAAK,KAAM,GAAG;AAAA,IACnE;AACA,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,mBAAmB,OAAe,KAAa;AAC9C,iBAAK;AAAA,MACJ,KAAK;AAAA,MACL,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG;AAAA,MAC9B,KAAK,IAAI,KAAK;AAAA,MACd,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,GAAG;AAAA,IAC/B;AACA,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,OAAO,KAAa;AACnB,SAAK,MAAO,MAAM,KAAK,KAAM;AAC7B,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,eAAe,OAAe;AAC7B,SAAK,QAAQ;AACb,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,oBAAoB2C,WAAkB;AACrC,SAAK,mBAAmBA;AACxB,SAAK;AAAA,EACN;AAAA,EAEQ,uBAAuB;AAC9B,QAAI,iBAAiB;AACrB,QAAI,KAAK,uBAAuB;AAC/B,mBAAK,OAAO,KAAK,YAAY,KAAK,KAAK,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK,GAAG,GAAG,KAAK,EAAE;AAC3F,WAAK,wBAAwB;AAC7B,uBAAiB;AAAA,IAClB;AAEA,QAAI,KAAK,uBAAuB;AAC/B,mBAAK,YAAY,KAAK,kBAAkB,KAAK,KAAK,KAAK,OAAO,MAAM,KAAK,gBAAgB;AACzF,WAAK,wBAAwB;AAC7B,uBAAiB;AAAA,IAClB;AAEA,QAAI,gBAAgB;AACnB,mBAAK,IAAI,KAAK,gBAAgB,KAAK,kBAAkB,KAAK,UAAU;AAAA,IACrE;AAAA,EACD;AAAA,EAEA,mBAAmB,iBAAuC,SAAkB,OAAO;AAClF,SAAK,qBAAqB;AAE1B,QAAI,QAAQ;AACX,UAAI,iBAAiB,aAAK,OAAO,aAAK,OAAO,GAAG,aAAK,OAAO,GAAG,KAAK,KAAK,KAAK,EAAE;AAChF,UAAI,eAAe,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,kBAAkB,cAAc;AAEhF,SAAG,iBAAiB,iBAAiB,OAAO,YAAY;AAAA,IACzD,OAAO;AACN,SAAG,iBAAiB,iBAAiB,OAAO,KAAK,cAAc;AAAA,IAChE;AAAA,EACD;AACD;;;ACzJA,IAAM,6BAAqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoB3C,IAAM,+BAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsC7C,IAAM,2BAAN,cAAuC,cAAc;AAAA,EACpD,cAAc;AACb,UAAM,mBAAmB,4BAA4B,4BAA4B;AAEjF,SAAK,IAAI;AAET,SAAK,mBAAmB,kBAAkB;AAC1C,SAAK,mBAAmB,aAAa;AACrC,SAAK,mBAAmB,eAAe;AACvC,SAAK,mBAAmB,WAAW;AAAA,EACpC;AAAA,EAEA,+BAAqC;AAEpC,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AACD;AAEO,IAAI,2BAA2B;AAE/B,IAAI,iCAAiC,WAAY;AACvD,6BAA2B,IAAI,yBAAyB;AACzD;;;ACpFA,IAAqB,wBAArB,MAA2C;AAAA,EAG1C,cAAc;AACb,SAAK,mBAAmB;AAAA,EACzB;AAAA,EAEA,2BAA2B,KAAa;AACvC,SAAK,mBAAmB;AAAA,EACzB;AAAA,EAEA,KAAK,OAAc;AAClB,OAAG,OAAO,GAAG,UAAU;AACvB,OAAG,OAAO,GAAG,SAAS;AACtB,OAAG,SAAS,GAAG,KAAK;AAEpB,QAAI,mBAAmB,IAAI,OAAO;AAClC,qBAAiB,OAAO,EAAE;AAC1B,qBAAiB,eAAe,CAAC;AACjC,qBAAiB,oBAAoB,GAAK;AAE1C,UAAM,aAAa;AAAA,MAClB,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,MAC7B,aAAK,WAAW,IAAM,GAAK,CAAG;AAAA,MAC9B,aAAK,WAAW,GAAK,IAAM,CAAG;AAAA,MAC9B,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,MAC7B,aAAK,WAAW,GAAK,GAAK,EAAI;AAAA,MAC9B,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,IAC9B;AACA,UAAM,MAAM;AAAA,MACX,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,MAC7B,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,MAC7B,aAAK,WAAW,GAAK,GAAK,EAAI;AAAA,MAC9B,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,MAC7B,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,MAC7B,aAAK,WAAW,GAAK,GAAK,CAAG;AAAA,IAC9B;AAEA,QAAI,UAAU;AACd,aAAS,cAAc,MAAM,aAAa;AACzC,UAAI,WAAW,wBAAwB;AACtC;AAAA,MACD;AACA,UAAI,WAAW,YAAiD;AAC/D;AAGA,yBAAiB,YAAY,WAAW,QAAQ;AAEhD,mBAAW,kBAAkB,KAAK,GAAG,WAAW;AAChD,mBAAW,oBAAoB;AAAA,UAC9B;AAAA,UACA,KAAK;AAAA,UACL,KAAK;AAAA,QACN;AAEA,iBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KAAK;AAC3C,2BAAiB,OAAO,WAAW,CAAC,CAAC;AACrC,2BAAiB,MAAM,IAAI,CAAC,CAAC;AAC7B,aAAG;AAAA,YACF,GAAG;AAAA,YACH,GAAG;AAAA,YACH,GAAG,8BAA8B;AAAA,YACjC,WAAW,oBAAoB;AAAA,YAC/B;AAAA,UACD;AAGA,mCAAyB,IAAI;AAC7B,aAAG,SAAS,GAAG,GAAG,KAAK,kBAAkB,KAAK,gBAAgB;AAC9D,aAAG,MAAM,GAAG,gBAAgB;AAG5B,2BAAiB;AAAA,YAChB,yBAAyB,mBAAmB,kBAAkB,EAAE,CAAC;AAAA,UAClE;AACA,aAAG;AAAA,YACF,yBAAyB,mBAAmB,WAAW,EAAE,CAAC;AAAA,YAC1D,iBAAiB,YAAY;AAAA,UAC9B;AAGA,gBAAM,YAAY,0BAA0B,KAAK;AAAA,QAClD;AAAA,MACD;AAAA,IACD;AAEA,OAAG,QAAQ,GAAG,SAAS;AAAA,EACxB;AACD;;;AC3FA,IAAI;AAEJ,IAAM,kCAAN,cAA8C,cAAc;AAAA,EAC3D,cAAc;AACb;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAEA,SAAK,IAAI;AAET,SAAK,mBAAmB,gBAAgB;AACxC,SAAK,mBAAmB,WAAW;AACnC,SAAK,mBAAmB,gBAAgB;AACxC,SAAK,mBAAmB,YAAY;AACpC,SAAK,mBAAmB,WAAW;AACnC,SAAK,mBAAmB,UAAU;AAElC,OAAG,UAAU,KAAK,mBAAmB,WAAW,EAAE,CAAC,GAAG,CAAC;AACvD,OAAG,UAAU,KAAK,mBAAmB,UAAU,EAAE,CAAC,GAAG,CAAC;AAEtD,SAAK,mBAAmB,iBAAiB;AAEzC,aAAS,IAAI,GAAG,IAAI,wBAAwB,KAAK;AAChD,WAAK,mBAAmB,oBAAoB,IAAI,GAAG;AACnD,SAAG,UAAU,KAAK,mBAAmB,oBAAoB,IAAI,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC;AAAA,IAC5E;AAEA,aAAS,IAAI,GAAG,IAAI,uBAAuB,KAAK;AAC/C,WAAK,mBAAmB,iBAAiB,IAAI,YAAY;AACzD,WAAK,mBAAmB,iBAAiB,IAAI,UAAU;AAEvD,WAAK,mBAAmB,iBAAiB,IAAI,YAAY;AACzD,WAAK,mBAAmB,iBAAiB,IAAI,UAAU;AACvD,WAAK,mBAAmB,iBAAiB,IAAI,aAAa;AAE1D,WAAK,mBAAmB,iBAAiB,IAAI,sBAAsB;AAAA,IACpE;AAEA,SAAK,mBAAmB,4BAA4B;AACpD,SAAK,mBAAmB,yBAAyB;AACjD,SAAK,mBAAmB,oCAAoC;AAC5D,SAAK,mBAAmB,kBAAkB;AAAA,EAC3C;AAAA,EAEA,+BAAqC;AAEpC,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AACD;AAEO,IAAI,kCAAmE;AAEvE,IAAI,wCAAwC,WAAY;AAC9D,wCACC;AAAA;AAAA;AAAA,4BAIA,wBACA;AAAA,6BAEA,yBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+DD,WAAS,IAAI,GAAG,IAAI,wBAAwB,KAAK;AAChD,QAAI,KAAK,GAAG;AACX,6CACC;AAAA,qCAEA,IACA;AAAA,4CAEA,IACA;AAAA;AAAA;AAAA,IAGF,OAAO;AACN,6CACC;AAAA,0CAEA,IACA;AAAA,4CAEA,IACA;AAAA;AAAA;AAAA,IAGF;AAAA,EACD;AAEA,yCAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkHvC,oCAAkC,IAAI,gCAAgC;AACvE;;;AC7QA,IAAqB,yBAArB,MAA4C;AAAA,EAO3C,YAAY,iBAA0B,qBAA8B;AACnE,SAAK,eAAe;AACpB,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAClB,SAAK,aAAa,IAAI,WAAW,iCAAiC,CAAC,iBAAiB,mBAAmB,CAAC;AAAA,EACzG;AAAA,EAEA,mBAAmB;AAElB,QAAI,KAAK,gBAAgB,QAAW;AACnC,SAAG,gBAAgB,GAAG,kBAAkB,IAAI;AAAA,IAC7C,OAAO;AACN,WAAK,aAAa,KAAK,GAAG,gBAAgB;AAAA,IAC3C;AAAA,EACD;AAAA,EAEA,KAAK,OAAc,QAAgB;AAClC,SAAK,iBAAiB;AACtB,oCAAgC,IAAI;AACpC,OAAG,QAAQ,GAAG,UAAU;AACxB,OAAG,OAAO,GAAG,KAAK;AAClB,OAAG,UAAU,GAAG,WAAW,GAAG,GAAG;AACjC,WAAO;AAAA,MACN,gCAAgC,mBAAmB,gBAAgB,EAAE,CAAC;AAAA,IACvE;AACA,OAAG;AAAA,MACF,gCAAgC,mBAAmB,WAAW,EAAE,CAAC;AAAA,MACjE,OAAO,YAAY;AAAA,IACpB;AACA,UAAM,iBAAiB,KAAK,+BAA+B;AAC3D,UAAM,iBAAiB;AAAA,MACtB,aAAK,KAAK,aAAK,OAAO,CAAC;AAAA,MACvB;AAAA,MACA,gCAAgC,mBAAmB,kBAAkB,EAAE,CAAC;AAAA,IACzE;AAEA,OAAG,UAAU,gCAAgC,mBAAmB,gBAAgB,EAAE,CAAC,GAAG,KAAK,cAAc;AACzG,OAAG,UAAU,gCAAgC,mBAAmB,YAAY,EAAE,CAAC,GAAG,KAAK,UAAU;AAIjG,OAAG;AAAA,MACF,gCAAgC,mBAAmB,iBAAiB,EAAE,CAAC;AAAA,MACvE,MAAM,YAAY;AAAA,IACnB;AAGA,QAAI,UAAU;AACd,aAAS,IAAI,GAAG,IAAI,MAAM,YAAY,QAAQ,KAAK;AAClD,YAAM,YAAY,CAAC,EAAE,KAAK,GAAG,SAAS,+BAA+B;AACrE,UAAI,MAAM,YAAY,CAAC,EAAE,YAAY;AACpC;AAAA,MACD;AAAA,IACD;AAGA,cAAU,KAAK,WAAW,SAAS;AACnC,eAAW,cAAc,MAAM,aAAa;AAC3C,UAAI,UAAU,KAAK,WAAW,SAAS,UAAU,wBAAwB;AACxE;AAAA,MACD;AACA,UAAI,WAAW,YAAY;AAC1B,mBAAW,oBAAoB,KAAK,SAAS;AAAA,MAC9C;AAAA,IACD;AAEA,SAAK,WAAW,KAAK,IAAI;AACzB,OAAG,QAAQ,GAAG,KAAK;AACnB,OAAG,OAAO,GAAG,UAAU;AAAA,EACxB;AACD;;;ACpFA,IAAM,0BAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2CxC,IAAM,4BAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkC1C,IAAM,wBAAN,cAAoC,cAAc;AAAA,EACjD,cAAc;AACb,UAAM,yBAAyB,yBAAyB,2BAA2B,KAAK;AAExF,SAAK,IAAI;AAET,SAAK,mBAAmB,UAAU;AAClC,OAAG,UAAU,KAAK,mBAAmB,UAAU,EAAE,CAAC,GAAG,CAAC;AAEtD,SAAK,mBAAmB,gBAAgB;AACxC,SAAK,mBAAmB,WAAW;AACnC,SAAK,mBAAmB,aAAa;AACrC,SAAK,mBAAmB,eAAe;AACvC,SAAK,mBAAmB,qBAAqB;AAC7C,SAAK,mBAAmB,UAAU;AAAA,EACnC;AAAA,EAEA,+BAAqC;AAEpC,UAAM,SAAS,IAAI;AACnB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAE5B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAAA,EAC7B;AAAA,EAEA,wCAA8C;AAC7C,UAAM,SAAS,KAAK;AACpB,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,CAAC;AACvD,OAAG,wBAAwB,CAAC;AAC5B,OAAG,oBAAoB,GAAG,CAAC;AAE3B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAC5B,OAAG,oBAAoB,GAAG,CAAC;AAE3B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAC5B,OAAG,oBAAoB,GAAG,CAAC;AAE3B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAC5B,OAAG,oBAAoB,GAAG,CAAC;AAE3B,OAAG,oBAAoB,GAAG,GAAG,GAAG,OAAO,OAAO,QAAQ,IAAI,CAAC;AAC3D,OAAG,wBAAwB,CAAC;AAC5B,OAAG,oBAAoB,GAAG,CAAC;AAAA,EAK5B;AACD;AAEO,IAAI,wBAA+C;AAEnD,IAAI,8BAA8B,WAAY;AACpD,0BAAwB,IAAI,sBAAsB;AACnD;;;AClIA,IAAqB,qBAArB,MAAwC;AAAA,EAGvC,cAAc;AACb,SAAK,eAAe;AAAA,EACrB;AAAA,EAEA,mBAAmB;AAElB,QAAI,KAAK,gBAAgB,QAAW;AACnC,SAAG,gBAAgB,GAAG,kBAAkB,IAAI;AAAA,IAC7C,OAAO;AACN,WAAK,aAAa,KAAK,GAAG,gBAAgB;AAAA,IAC3C;AAAA,EACD;AAAA,EAEA,KAAK,OAAc,QAAgB;AAClC,OAAG,cAAc,GAAG,OAAO,GAAG,CAAC,GAAK,GAAK,GAAK,CAAG,CAAC;AAClD,QAAI,MAAM,iBAAiB,SAAS,GAAG;AAEtC,4BAAsB,IAAI;AAC1B,aAAO,mBAAmB,sBAAsB,mBAAmB,gBAAgB,EAAE,CAAC,CAAC;AACvF,SAAG,WAAW,sBAAsB,mBAAmB,WAAW,EAAE,CAAC,GAAG,OAAO,YAAY,CAAC;AAC5F,SAAG;AAAA,QACF,sBAAsB,mBAAmB,aAAa,EAAE,CAAC;AAAA,SACxD,KAAK,IAAI,IAAI,qBAAqB;AAAA,MACpC;AACA,iBAAW,mBAAmB,MAAM,iBAAiB,OAAO,GAAG;AAC9D,wBAAgB,KAAK;AAAA,MACtB;AAAA,IACD;AAAA,EACD;AACD;;;ACnBO,IAAI;AACJ,IAAI,oBAA4B,KAAK,IAAI;AAEhD,IAAqB,WAArB,MAA8B;AAAA;AAAA,EAsC7B,cAAc;AACb,SAAK,OAAO;AACZ,SAAK,cAAc;AACnB,SAAK,QAAQ;AACb,SAAK,SAAS;AAGd,SAAK,8BAA8B,IAAI,4BAA4B;AACnE,SAAK,wBAAwB,IAAI,sBAAsB;AAIvD,SAAK,qBAAqB,IAAI,mBAAmB;AAEjD,QAAI,eAAe,IAAI,MAAe;AACtC,aAAS,IAAI,GAAG,IAAI,KAAK,mBAAmB,kBAAkB,SAAS,QAAQ,KAAK;AACnF,mBAAa,KAAK,KAAK,mBAAmB,kBAAkB,SAAS,CAAC,CAAC;AAAA,IACxE;AACA,iBAAa,KAAK,KAAK,4BAA4B,aAAa,YAAY;AAC5E,SAAK,qBAAqB,IAAI,mBAAmB,YAAY;AAI7D,SAAK,YAAY;AACjB,SAAK,mBAAmB,IAAI,iBAAiB;AAI7C,SAAK,qBAAqB,IAAI,mBAAmB;AAIjD,SAAK,yBAAyB,IAAI,uBAAuB,KAAK,mBAAmB,kBAAkB,SAAS,CAAC,GAAG,KAAK,4BAA4B,aAAa,YAAY;AAC1K,SAAK,gBAAgB;AAGrB,SAAK,sBAAsB,IAAI;AAAA,MAC9B,KAAK;AAAA,MACL,KAAK;AAAA,MACL,CAAC,IAAI,QAAQ,KAAK,CAAC;AAAA,MACnB;AAAA,IACD;AAGA,SAAK,uBAAuB,eAAe,KAAK;AAChD,SAAK,mBAAmB,eAAe,KAAK;AAE5C,SAAK,2BAA2B,IAAI,eAAe,KAAK,oBAAoB,SAAS,CAAC,CAAC;AAAA,EACxF;AAAA,EAEQ,gBAAgB;AACvB,oCAAgC;AAChC,oCAAgC;AAChC,yCAAqC;AACrC,mCAA+B;AAC/B,gCAA4B;AAC5B,0CAAsC;AACtC,8BAA0B;AAC1B,kCAA8B;AAAA,EAC/B;AAAA,EAEA,SAAS;AACL,SAAK,aAAgC,SAAS,cAAc,QAAQ;AAEjE,SAAK,KAAK,WAAW,WAAW,UAAU,EAAE,WAAW,MAAM,CAAC;AAC9D,QAAI,CAAC,GAAG,aAAa,wBAAwB,GAAG;AAC5C,YAAM,wEAAwE;AAAA,IAClF;AACA,QAAI,CAAC,GAAG,aAAa,0BAA0B,GAAG;AAC9C,YAAM,wDAAwD;AAAA,IAClE;AAEA,QAAI,CAAC,IAAI;AACL,cAAQ,IAAI,2CAA2C;AACvD;AAAA,IACJ;AAEN,SAAK,cAAc,EAAE,GAAG,GAAK,GAAG,GAAK,GAAG,GAAK,GAAG,EAAI;AACpD,OAAG,WAAW,KAAK,YAAY,GAAG,KAAK,YAAY,GAAG,KAAK,YAAY,GAAG,KAAK,YAAY,CAAC;AAG5F,OAAG,OAAO,GAAG,UAAU;AAGvB,OAAG,QAAQ,GAAG,KAAK;AAGnB,OAAG,SAAS,GAAG,IAAI;AACnB,OAAG,OAAO,GAAG,SAAS;AAAA,EACvB;AAAA,EAEA,QAAQ,GAAW,GAAW,cAAuB,OAAO;AAC3D,SAAK,QAAQ;AACb,SAAK,SAAS;AAEd,SAAK,WAAW,QAAQ,KAAK;AAC7B,SAAK,WAAW,SAAS,KAAK;AAE9B,SAAK,mBAAmB,cAAc,GAAG,CAAC;AAC1C,SAAK,oBAAoB,eAAe,GAAG,CAAC;AAAA,EAC7C;AAAA,EAEA,UAAU,MAAe;AACxB,QAAI,QAAQ,QAAW;AACtB,WAAK,iBAAiB,UAAU,aAAa,WAAW,IAAI,CAAC;AAE7D,WAAK,YAAY;AAAA,IAClB,OACK;AACJ,WAAK,YAAY;AAAA,IAClB;AAAA,EACD;AAAA,EAEA,cAAc,SAAiB;AAC9B,SAAK,uBAAuB,aAAa;AAAA,EAC1C;AAAA,EAEQ,eAAe,gBAAwB;AAC9C,QAAI,kBAAkB,SAAS,cAAc,QAAQ;AACrD,oBAAgB,QAAQ,GAAG,OAAO;AAClC,oBAAgB,SAAS,GAAG,OAAO;AACnC,QAAI,MAAM,gBAAgB,WAAW,IAAI;AAEzC,QAAI,UAAU,GAAG,QAAQ,GAAG,CAAC;AAE7B,UAAM,WAAY,WAAY;AAC7B,YAAM,IAAI,SAAS,cAAc,GAAG;AACpC,eAAS,KAAK,YAAY,CAAC;AAC3B,QAAE,MAAM,UAAU;AAClB,aAAO,SAAS,SAAS,MAAM,UAAU;AACxC,cAAM,MAAM,OAAO,IAAI,gBAAgB,IAAI;AAC3C,UAAE,OAAO;AACT,UAAE,WAAW;AACb,UAAE,MAAM;AAAA,MACT;AAAA,IACD,EAAG;AAEH,oBAAgB,OAAO,CAAC,SAAS;AAChC,eAAS,MAAM,cAAc;AAAA,IAC9B,CAAC;AAAA,EACF;AAAA,EAEA,OAAO,OAAc,QAAgB,iBAA0B,OAAO,iBAAyB,iBAAiB;AAC/G,OAAG,OAAO,GAAG,UAAU;AAEvB,UAAM,uBAAuB;AAG7B,SAAK,4BAA4B,KAAK,KAAK;AAC3C,SAAK,sBAAsB,KAAK,KAAK;AAIrC,SAAK,mBAAmB,KAAK,OAAO,MAAM;AAI1C,SAAK,mBAAmB,iBAAiB;AAGzC,OAAG,WAAW,KAAK,YAAY,GAAG,KAAK,YAAY,GAAG,KAAK,YAAY,GAAG,KAAK,YAAY,CAAC;AAC5F,OAAG,MAAM,GAAG,mBAAmB,GAAG,mBAAmB,GAAG,kBAAkB;AAG1E,SAAK,mBAAmB,KAAK,OAAO,MAAM;AAI1C,SAAK,mBAAmB,kBAAkB,KAAK,GAAG,gBAAgB;AAClE,OAAG;AAAA,MACF;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,KAAK;AAAA,MACL,KAAK;AAAA,MACL,GAAG;AAAA,MACH,GAAG;AAAA,IACJ;AAGA,QAAI,KAAK,WAAW;AACnB,WAAK,iBAAiB,KAAK,MAAM;AAAA,IAClC;AAIA,SAAK,mBAAmB,KAAK,OAAO,MAAM;AAI1C,QAAI,KAAK,eAAe;AACvB,WAAK,uBAAuB,KAAK,OAAO,MAAM;AAAA,IAC/C;AAGA,SAAK,yBAAyB,KAAK;AAE7B,QAAI,gBAAgB;AAChB,WAAK,eAAe,cAAc;AAAA,IACtC;AAAA,EACP;AACD;;;ACvQA,IAAqB,mBAArB,MAAsC;AAAA,EAOrC,cAAc;AACb,SAAK,YAAY,aAAK,WAAW,GAAK,IAAM,IAAI;AAChD,SAAK,SAAS,aAAK,WAAW,KAAK,KAAK,GAAG;AAC3C,SAAK,oBAAoB;AACzB,SAAK,+BAA+B;AAAA,EACrC;AAAA,EAEA,KAAK,eAA8B;AAClC,OAAG;AAAA,MACF,cAAc,mBAAmB,4BAA4B,EAAE,CAAC;AAAA,MAChE,aAAK,UAAU,KAAK,WAAW,KAAK,SAAS;AAAA,IAC9C;AACA,OAAG,WAAW,cAAc,mBAAmB,yBAAyB,EAAE,CAAC,GAAG,KAAK,MAAM;AACzF,OAAG;AAAA,MACF,cAAc,mBAAmB,oCAAoC,EAAE,CAAC;AAAA,MACxE,KAAK;AAAA,IACN;AAAA,EACD;AAAA,EAEA,4BACC,UACA,QACA,iBACC;AACD,QAAI,YAAY,aAAK,MAAM,QAAQ;AACnC,QAAI,YAAY,aAAK;AAAA,MACpB,aAAK,OAAO;AAAA,MACZ,aAAK,UAAU,aAAK,OAAO,GAAG,KAAK,SAAS;AAAA,MAC5C;AAAA,IACD;AACA,QAAI,mBAAmB,aAAK;AAAA,MAC3B,aAAK,OAAO;AAAA,MACZ,CAAC,KAAK;AAAA,MACN,KAAK;AAAA,MACL,CAAC,KAAK;AAAA,MACN,KAAK;AAAA,MACL;AAAA,MACA,SAAS;AAAA,IACV;AACA,iBAAK,SAAS,WAAW,WAAW,SAAS;AAC7C,QAAI,YAAY,aAAK,OAAO,aAAK,OAAO,GAAG,WAAW,UAAU,aAAK,WAAW,GAAK,GAAK,CAAG,CAAC;AAC9F,iBAAK,IAAI,kBAAkB,kBAAkB,SAAS;AACtD,OAAG,iBAAiB,iBAAiB,OAAO,gBAAgB;AAAA,EAC7D;AACD;;;ACpDA,IAAqB,UAArB,cAAqC,QAAQ;AAAA,EAG5C,YACC,YAAqB,MACrB,iBAAyB,GAAG,MAC5B,SAAiB,GAAG,MACpB,kBAA0B,GAAG,eAC7B,gBAAwB,GAAG,kBAC1B;AACD,UAAM,WAAW,gBAAgB,QAAQ,iBAAiB,aAAa;AAEvE,SAAK,iBAAiB,GAAG,gBAAgB,GAAG,MAAM;AAClD,SAAK,cAAc;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,MAAkB,OAAe,QAAgB,MAAe;AAC9E,SAAK,QAAQ;AACb,SAAK,SAAS;AACd,OAAG,YAAY,KAAK,eAAe,KAAK,OAAO;AAE/C,QAAI,QAAQ,QAAW;AAEtB,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,WAAG;AAAA,UACF,GAAG,8BAA8B;AAAA,UACjC;AAAA,UACA,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,UACA,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,QACD;AAAA,MACD;AAAA,IACD,OAAO;AAEN,SAAG;AAAA,QACF;AAAA,QACA;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA,MACD;AAAA,IACD;AAGA,OAAG,YAAY,KAAK,eAAe,IAAI;AAAA,EACxC;AAAA,EAEA,YAAY,MAAwD;AACnE,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACrC,UAAI,QAAQ,IAAI,MAAM;AACtB,YAAM,cAAc;AACpB,YAAM,MAAM,KAAK,CAAC;AAClB,UAAI,OAAO;AACX,YAAM,iBAAiB,QAAQ,WAAY;AAE1C,aAAK,QAAQ,MAAM;AACnB,aAAK,SAAS,MAAM;AACpB,WAAG,YAAY,KAAK,eAAe,KAAK,OAAO;AAC/C,WAAG;AAAA,UACF,GAAG,8BAA8B;AAAA,UACjC;AAAA,UACA,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL;AAAA,QACD;AACA,aAAK;AACL,YAAI,KAAK,eAAe,GAAG;AAC1B,eAAK,iBAAiB;AACtB,cAAI,KAAK,WAAW;AACnB,eAAG,eAAe,KAAK,aAAa;AACpC,eAAG,cAAc,KAAK,eAAe,GAAG,oBAAoB,GAAG,oBAAoB;AAAA,UACpF;AAAA,QACD;AAAA,MACD,CAAC;AAAA,IACF;AAAA,EACD;AACD;;;ACzFA,IAAqB,aAArB,MAAgC;AAAA,EAc/B,cAAc;AACb,SAAK,WAAW,aAAK,WAAW,GAAK,GAAK,CAAG;AAC7C,SAAK,SAAS,aAAK,WAAW,GAAK,GAAK,CAAG;AAE3C,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,aAAa;AAIlB,SAAK,sBAAsB,IAAI;AAAA,MAC9B;AAAA,MACA,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACJ;AACA,SAAK,oBAAoB,eAAe,MAAM,MAAM,IAAI;AAExD,SAAK,oBAAoB,IAAI,YAAY,MAAM,MAAM,CAAC,GAAG,KAAK,mBAAmB;AAAA,EAClF;AAAA,EAEA,KAAK,YAAoB,eAAuB,eAA8B;AAC7E,QAAI,KAAK,cAAc,mBAAmB,iBAAiB,aAAa,YAAY;AACpF,QAAI,GAAG,CAAC,GAAG;AACV,SAAG,WAAW,GAAG,CAAC,GAAG,KAAK,QAAQ;AAAA,IACnC;AACA,SAAK,cAAc,mBAAmB,iBAAiB,aAAa,UAAU;AAC9E,QAAI,GAAG,CAAC,GAAG;AACV,SAAG,WAAW,GAAG,CAAC,GAAG,KAAK,MAAM;AAAA,IACjC;AAEA,SAAK,cAAc,mBAAmB,iBAAiB,aAAa,YAAY;AAChF,QAAI,GAAG,CAAC,GAAG;AACV,SAAG,UAAU,GAAG,CAAC,GAAG,KAAK,QAAQ;AAAA,IAClC;AACA,SAAK,cAAc,mBAAmB,iBAAiB,aAAa,UAAU;AAC9E,QAAI,GAAG,CAAC,GAAG;AACV,SAAG,UAAU,GAAG,CAAC,GAAG,KAAK,MAAM;AAAA,IAChC;AACA,SAAK,cAAc,mBAAmB,iBAAiB,aAAa,aAAa;AACjF,QAAI,GAAG,CAAC,GAAG;AACV,SAAG,UAAU,GAAG,CAAC,GAAG,KAAK,SAAS;AAAA,IACnC;AAEA,SAAK,cAAc,mBAAmB,iBAAiB,aAAa,sBAAsB;AAC1F,QAAI,GAAG,CAAC,GAAG;AACV,SAAG,UAAU,GAAG,CAAC,GAAG,KAAK,aAAa,gBAAgB,EAAE;AAAA,IACzD;AAAA,EACD;AACD;;;AChEA,IAAqB,YAArB,MAA+B;AAAA,EAS9B,cAAc;AACb,SAAK,kBAAkB;AACvB,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,QAAQ,aAAK,WAAW,GAAK,GAAK,CAAG;AAC1C,SAAK,SAAS,aAAK,OAAO;AAC1B,SAAK,SAAS,aAAK,OAAO;AAAA,EAC3B;AAAA,EAEA,UAAU,aAAmB;AAC5B,iBAAK,IAAI,KAAK,UAAU,KAAK,UAAU,WAAW;AAAA,EACnD;AAAA,EAEA,eAAe,aAAmB;AACjC,iBAAK,KAAK,KAAK,UAAU,WAAW;AAAA,EACrC;AAAA,EAEA,gBAAgB,SAAe,KAAK,QAAQ,sBAA+B,MAAM;AAChF,QAAI,qBAAqB;AACxB,mBAAK,SAAS,MAAM;AAAA,IACrB;AAEA,QAAI,KAAK,mBAAmB,QAAW;AACtC,WAAK,gBAAgB,gBAAgB,QAAQ,KAAK;AAAA,IACnD;AACA,iBAAK,UAAU,QAAQ,QAAQ,KAAK,QAAQ;AAC5C,iBAAK,SAAS,QAAQ,QAAQ,aAAK,SAAS,aAAK,OAAO,GAAG,KAAK,QAAQ,CAAC;AACzE,iBAAK,MAAM,QAAQ,QAAQ,KAAK,KAAK;AACrC,iBAAK,UAAU,QAAQ,QAAQ,aAAK,OAAO,aAAK,OAAO,GAAG,KAAK,MAAM,CAAC;AAAA,EACvE;AACD;;;ACvCA,IAAqB,iBAArB,MAAoC;AAAA,EAcnC,YACC,SACA,UACA,gBACA,aACC;AACD,SAAK,UAAU;AACf,SAAK,WAAW;AAEhB,QAAI,eAAe,QAAW;AAC7B,WAAK,WAAW;AAAA,IACjB,OAAO;AACN,WAAK,WAAW,IAAI,QAAQ;AAC5B,WAAK,SAAS,eAAe,IAAI,WAAW,CAAC,GAAK,GAAK,GAAK,CAAG,CAAC,GAAG,GAAG,CAAC;AAAA,IACxE;AACA,SAAK,gBAAgB,aAAK,WAAW,GAAK,GAAK,CAAG;AAElD,SAAK,YAAY,IAAI,UAAU;AAC/B,SAAK,gBAAgB,aAAK,OAAO;AACjC,SAAK,eAAe,aAAK,OAAO;AAEhC,SAAK,iBAAiB;AACtB,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,KAAK,sBAA+B,MAAM;AACzC,QAAI,KAAK,SAAS;AACjB,WAAK,QAAQ,KAAK,CAAC;AAEnB,UAAI,qBAAqB;AACxB,aAAK,SAAS,KAAK,CAAC;AACpB,aAAK,SAAS,KAAK,CAAC;AAAA,MACrB;AAEA,UAAI,iBACH,KAAK,eAAe,cAAc,mBAAmB,eAAe;AACrE,UAAI,eAAe,CAAC,GAAG;AACtB,WAAG,WAAW,eAAe,CAAC,GAAG,KAAK,aAAa;AAAA,MACpD;AACA,UAAI,cACH,KAAK,eAAe,cAAc,mBAAmB,aAAa;AACnE,UAAI,YAAY,CAAC,GAAG;AACnB,WAAG,iBAAiB,YAAY,CAAC,GAAG,OAAO,KAAK,UAAU,MAAM;AAAA,MACjE;AACA,UAAI,gBACH,KAAK,eAAe,cAAc,mBAAmB,eAAe;AACrE,UAAI,cAAc,CAAC,GAAG;AACrB,WAAG,iBAAiB,cAAc,CAAC,GAAG,OAAO,KAAK,aAAa;AAAA,MAChE;AACA,UAAI,eACH,KAAK,eAAe,cAAc,mBAAmB,cAAc;AACpE,UAAI,aAAa,CAAC,GAAG;AACpB,WAAG,iBAAiB,aAAa,CAAC,GAAG,OAAO,KAAK,YAAY;AAAA,MAC9D;AAEA,WAAK,eAAe,KAAK;AAAA,IAC1B;AAAA,EACD;AACD;;;ACtEA,IAAqB,kBAArB,cAA6C,eAAe;AAAA,EAY3D,YACC,eACA,SACA,4BAAoC,GACnC;AACD,UAAM,aAAa;AAEnB,SAAK,UAAU;AAEf,SAAK,QAAQ;AACb,SAAK,cAAc,GAAG,aAAa;AACnC,OAAG,WAAW,GAAG,cAAc,KAAK,WAAW;AAC/C,OAAG,WAAW,GAAG,cAAc,4BAA4B,KAAK,GAAG,GAAG,YAAY;AAClF,kBAAc,sCAAsC;AACpD,SAAK,UAAU;AAGf,SAAK,WAAW,IAAI,aAAa;AAAA;AAAA,MAEvB;AAAA,MAAO;AAAA,MAAO;AAAA,MAAK;AAAA,MACnB;AAAA,MAAM;AAAA,MAAQ;AAAA,MAAK;AAAA,MAClB;AAAA,MAAK;AAAA,MAAQ;AAAA,MAAK;AAAA,MAClB;AAAA,MAAM;AAAA,MAAO;AAAA,MAAK;AAAA,IACvB,CAAC;AAGP,SAAK,UAAU,IAAI,WAAW;AAAA,MACpB;AAAA,MAAG;AAAA,MAAG;AAAA,MACN;AAAA,MAAG;AAAA,MAAG;AAAA,IACV,CAAC;AACP,SAAK,cAAc,KAAK,QAAQ;AAChC,SAAK,aAAa,KAAK,OAAO;AAG9B,SAAK,eAAe;AAEpB,SAAK,gBAAgB;AACrB,SAAK,sBAAsB;AAC3B,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,gBAAgB,QAAgB;AAC/B,SAAK,eAAe;AAEpB,SAAK,QAAQ;AACb,OAAG,WAAW,GAAG,cAAc,KAAK,WAAW;AAC/C,OAAG,WAAW,GAAG,cAAc,KAAK,eAAe,KAAK,GAAG,GAAG,YAAY;AAC1E,SAAK,UAAU;AAAA,EAChB;AAAA,EAEA,uBAA+B;AAC9B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,gBACC,eACA,eACA,MACA,UACA,cACA,WACU;AACV,QAAI,gBAAgB,KAAK,cAAc;AACtC,aAAO;AAAA,IACR;AACA,QAAI,QAAQ,KAAK,IAAI,IAAI,wBAAwB;AAEjD,QAAI,aAAa,QAAW;AAC3B,aAAO;AAAA,IACR;AAEA,QAAI,OAAO,IAAI,aAAa;AAAA,MAC3B,cAAc,CAAC;AAAA,MACf,cAAc,CAAC;AAAA,MACf,cAAc,CAAC;AAAA,MACf;AAAA,MACA,SAAS,CAAC;AAAA,MACV,SAAS,CAAC;AAAA,MACV,SAAS,CAAC;AAAA,MACV;AAAA,MACA,aAAa,CAAC;AAAA,MACd,aAAa,CAAC;AAAA,MACd,aAAa,CAAC;AAAA,IACf,CAAC;AAED,SAAK,oBAAoB,gBAAgB,IAAI,IAAI;AAEjD,WAAO;AAAA,EACR;AAAA,EAEA,yBAAyB,eAAuB,UAAyB;AACxE,QAAI,gBAAgB,KAAK,cAAc;AACtC,aAAO;AAAA,IACR;AACA,SAAK,oBAAoB,gBAAgB,IAAkB,QAAQ;AACnE,WAAO;AAAA,EACR;AAAA,EAEA,gBAAgB,eAAuB,MAAuB;AAC7D,QAAI,gBAAgB,KAAK,cAAc;AACtC,aAAO;AAAA,IACR;AACA,SAAK,oBAAoB,gBAAgB,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;AACzE,WAAO;AAAA,EACR;AAAA,EAEA,yBAAyB,eAAuB,KAAoB;AACnE,QAAI,gBAAgB,KAAK,cAAc;AACtC,aAAO;AAAA,IACR;AACA,SAAK,oBAAoB,gBAAgB,KAAK,GAAiB,GAAG;AAClE,WAAO;AAAA,EACR;AAAA,EAEA,qBAAqB,eAAuB,MAAuB;AAClE,QAAI,gBAAgB,KAAK,cAAc;AACtC,aAAO;AAAA,IACR;AACA,SAAK,oBAAoB,gBAAgB,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC;AACzE,WAAO;AAAA,EACR;AAAA,EAEA,uBAAuB,eAAgC;AACtD,QAAI,gBAAgB,KAAK,cAAc;AACtC,aAAO;AAAA,IACR;AACA,SAAK;AAAA,MACJ,gBAAgB,KAAK;AAAA,MACrB,IAAI,aAAa,EAAE,KAAK,IAAI,IAAI,wBAAwB,IAAK,CAAC;AAAA,IAC/D;AACA,WAAO;AAAA,EACR;AAAA,EAEA,wBAAwB,eAAuB,KAAoB;AAClE,QAAI,gBAAgB,KAAK,cAAc;AACtC,aAAO;AAAA,IACR;AACA,SAAK,oBAAoB,gBAAgB,KAAK,GAAiB,GAAG;AAClE,WAAO;AAAA,EACR;AAAA,EAEQ,oBAAoB,OAAe,MAA6B;AACvE,QAAI,QAAQ,KAAK,eAAe,IAAI;AACnC,aAAO;AAAA,IACR;AACA,SAAK,QAAQ;AACb,OAAG,WAAW,GAAG,cAAc,KAAK,WAAW;AAC/C,OAAG,cAAc,GAAG,cAAc,QAAQ,GAAG,IAAI;AACjD,SAAK,UAAU;AACf,WAAO;AAAA,EACR;AAAA,EAEA,OAAO;AACN,SAAK,QAAQ;AAEb,SAAK,QAAQ,KAAK,CAAC;AACnB,OAAG,UAAU,KAAK,cAAc,mBAAmB,eAAe,EAAE,CAAC,GAAG,KAAK,aAAa;AAC1F,OAAG;AAAA,MACF,KAAK,cAAc,mBAAmB,qBAAqB,EAAE,CAAC;AAAA,MAC9D,KAAK;AAAA,IACN;AACA,OAAG;AAAA,MACF,KAAK,cAAc,mBAAmB,UAAU,EAAE,CAAC;AAAA,MACnD,KAAK;AAAA,IACN;AAEA,OAAG,sBAAsB,GAAG,WAAW,GAAG,GAAG,cAAc,GAAG,KAAK,qBAAqB,CAAC;AACzF,SAAK,UAAU;AAAA,EAChB;AACD;;;AClLA,IAAqB,QAArB,MAA2B;AAAA;AAAA,EAW1B,cAAc;AAGb,SAAK,iBAAiB,IAAI,MAAsB;AAChD,SAAK,mBAAmB,IAAI,MAAuB;AAInD,SAAK,mBAAmB,IAAI,iBAAiB;AAC7C,SAAK,cAAc,IAAI,MAAkB;AAAA,EAE1C;AAAA,EAEA,WAAW,UAAkB,aAAqB,cAAsC;AACvF,UAAMC,UAAS,KAAK,eAAe;AAAA,MAClC,IAAI;AAAA,QACH,aAAa,WAAW,WAAW;AAAA,QACnC,aAAa,WAAW,YAAY;AAAA,QAEpC,UAAU,QAAQ,2BAA2B,QAAQ;AAAA,MACtD;AAAA,IACD;AAEA,WAAO,KAAK,eAAeA,UAAS,CAAC;AAAA,EACtC;AAAA,EAEA,sBACC,aACA,4BAAoC,GAClB;AAClB,QAAIA,UAAS,KAAK,iBAAiB;AAAA,MAClC,IAAI;AAAA,QACH;AAAA,QACA,aAAa,WAAW,WAAW;AAAA,QACnC;AAAA,MACD;AAAA,IACD;AACA,WAAO,KAAK,iBAAiBA,UAAS,CAAC;AAAA,EACxC;AAAA,EAGA,mBAA+B;AAC9B,UAAMA,UAAS,KAAK,YAAY,KAAK,IAAI,WAAW,CAAC;AACrD,WAAO,KAAK,YAAYA,UAAS,CAAC;AAAA,EACnC;AAAA,EAEA,sBAAwC;AACvC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,qBAAqB,QAAwB;AAC5C,SAAK,iBAAiB,KAAK,eAAe,OAAO,CAAC,MAAM,WAAW,CAAC;AAAA,EACrE;AAAA,EAEA,iBAAiB,OAAmB;AACnC,SAAK,cAAc,KAAK,YAAY,OAAO,CAAC,MAAM,UAAU,CAAC;AAAA,EAC9D;AAAA,EAEA,yBAAyB;AACxB,aAAS,UAAU,KAAK,gBAAgB;AACvC,aAAO,UAAU,gBAAgB;AAAA,IAClC;AAAA,EACD;AAAA,EAEA,YAAY,eAA8B,sBAA+B,MAAM;AAC9E,aAAS,UAAU,KAAK,gBAAgB;AACvC,aAAO,eAAe,gBAAgB;AACtC,aAAO,KAAK,mBAAmB;AAAA,IAChC;AAAA,EACD;AACD;;;ACzFA,IAAqB,eAArB,MAAkC;AAAA,EAIjC,cAAc;AACb,SAAK,WAAW,oBAAI,IAAqB;AACzC,SAAK,WAAW,oBAAI,IAAqB;AAAA,EAC1C;AAAA,EAEA,WAAW,MAAc,SAAkB;AAC1C,SAAK,SAAS,IAAI,MAAM,OAAO;AAAA,EAChC;AAAA,EAEA,WAAW,MAAuB;AACjC,QAAI,MAAM,KAAK,SAAS,IAAI,IAAI;AAChC,QAAI,KAAK;AACR,aAAO;AAAA,IACR;AAEA,QAAI,aAAa,IAAI,QAAQ;AAC7B,UAAM,YAAY;AAClB,QAAI,KAAK,WAAW,SAAS,GAAG;AAE/B,iBAAW,wBAAwB,KAAK,UAAU,UAAU,MAAM,CAAC;AAAA,IACpE,OAAO;AACN,iBAAW,aAAa,IAAI;AAAA,IAC7B;AAEA,SAAK,SAAS,IAAI,MAAM,UAAU;AAClC,WAAO;AAAA,EACR;AAAA,EAEA,WAAW,MAAuB;AACjC,QAAI,UAAU,KAAK,SAAS,IAAI,IAAI;AACpC,QAAI,SAAS;AACZ,aAAO;AAAA,IACR;AAEA,QAAI,aAAa,IAAI,QAAQ;AAC7B,eAAW,YAAY;AAAA,MACtB,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACR,CAAC;AACD,SAAK,SAAS,IAAI,MAAM,UAAU;AAClC,WAAO;AAAA,EACR;AACD;;;AChDA,IAAqB,OAArB,cAAkC,eAAe;AAAA,EAIhD,YAAY,eAA8B,UAAwB;AACjE,UAAM,aAAa;AAEnB,SAAK,WAAW;AAChB,SAAK,cAAc,KAAK,QAAQ;AAAA,EACjC;AAAA,EAEA,cAAc,MAAoB;AACjC,UAAM,cAAc,IAAI;AACxB,SAAK,WAAW;AAAA,EACjB;AAAA,EAEA,qBAAkC;AACjC,QAAI,YAAY,IAAI,MAAY;AAChC,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK,GAAG;AACjD,gBAAU,KAAK,aAAK,WAAW,KAAK,SAAS,CAAC,GAAG,KAAK,SAAS,IAAI,CAAC,GAAG,KAAK,SAAS,IAAI,CAAC,CAAC,CAAC;AAAA,IAC7F;AACA,WAAO;AAAA,EACR;AAAA,EAEA,OAAO;AACN,QAAI,KAAK,YAAY,UAAa,KAAK,SAAS,SAAS,GAAG;AAC3D,WAAK,QAAQ;AACb,SAAG,WAAW,GAAG,WAAW,GAAG,KAAK,SAAS,SAAS,CAAC;AAAA,IACxD;AAAA,EACD;AACD;;;AC5BA,IAAqB,YAArB,MAA+B;AAAA,EAK9B,YAAYC,eAA4B;AACvC,SAAK,UAAU,oBAAI,IAAkB;AACrC,SAAK,eAAe,oBAAI,IAAuB;AAC/C,SAAK,eAAeA;AAAA,EACrB;AAAA,EAEA,QAAQ,eAA8B,MAAc,gBAAyB,MAAY;AACxF,QAAI,OAAO,KAAK,QAAQ,IAAI,IAAI;AAChC,QAAI,MAAM;AACT,aAAO;AAAA,IACR;AAEA,SAAK,QAAQ,IAAI,MAAM,IAAI,KAAK,eAAe,IAAI,CAAC;AACpD,QAAI,mBAAmB,KAAK,QAAQ,IAAI,IAAI;AAC5C,SAAK,gBAAgB,IAAI,EAAE,KAAK,CAAC,SAAS;AACzC,uBAAiB,cAAc,IAAI;AAAA,IACpC,CAAC;AAED,WAAO;AAAA,EACR;AAAA,EAEc,gBAAgB,UAAyC;AAAA;AAKtE,YAAM,WAAW,MAAM,MAAM,QAAQ;AACrC,YAAM,aAAa,MAAM,SAAS,KAAK;AAEvC,YAAM,QAAQ,WAAW,MAAM,IAAI;AACnC,UAAI,kBAAkB,IAAI,MAAY;AACtC,UAAI,kBAAkB,IAAI,MAAY;AACtC,UAAI,gBAAgB,IAAI,MAAY;AACpC,UAAI,WAAW,IAAI,MAKhB;AACH,UAAI,OAAO,oBAAI,IASb;AACF,UAAI,WAAmB;AAEvB,eAAS,QAAQ,OAAO;AACvB,eAAO,KAAK,KAAK;AAEjB,YAAI,KAAK,WAAW,QAAQ,GAAG;AAC9B,gBAAM,UAAU,KAAK,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACrD,mBAAO,WAAW;AAAA,UACnB,CAAC;AACD,cAAI,QAAQ,UAAU,GAAG;AACxB,gBAAI,UAAU,SAAS,UAAU,GAAG,SAAS,YAAY,GAAG,IAAI,CAAC,IAAI;AACrE,gBAAI;AACH,oBAAM,cAAc,MAAM,MAAM,OAAO;AAEvC,kBAAI,YAAY,IAAI;AACnB,sBAAM,aAAa,MAAM,YAAY,KAAK;AAC1C,oBAAI,UAAkB;AACtB,oBAAI,QAAQ;AAEZ,2BAAW,OAAO,WAAW,MAAM,IAAI,GAAG;AACzC,sBAAI,IAAI,WAAW,QAAQ,GAAG;AAC7B,wBAAI,WAAW,IAAI,MAAM,KAAK;AAC9B,wBAAI,SAAS,SAAS,GAAG;AACxB,gCAAU,SAAS,CAAC;AACpB,2BAAK,IAAI,SAAS;AAAA,wBACjB,cAAc,aAAK,OAAO;AAAA,wBAC1B,eAAe,aAAK,OAAO;AAAA,wBAC3B,eAAe,aAAK,OAAO;AAAA,wBAC3B,UAAU;AAAA,wBACV,aAAa;AAAA,sBACd,CAAC;AACD;AAAA,oBACD;AAAA,kBACD,WAAW,IAAI,WAAW,IAAI,KAAK,WAAW,IAAI;AACjD,0BAAM,cAAc,IAAI,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACxD,6BAAO,WAAW;AAAA,oBACnB,CAAC;AACD,wBAAI,YAAY,SAAS,GAAG;AAC3B,mCAAK;AAAA,wBACJ,KAAK,IAAI,OAAO,EAAE;AAAA,wBAClB,WAAW,YAAY,CAAC,CAAC;AAAA,wBACzB,WAAW,YAAY,CAAC,CAAC;AAAA,wBACzB,WAAW,YAAY,CAAC,CAAC;AAAA,sBAC1B;AAAA,oBACD;AAAA,kBACD,WAAW,IAAI,WAAW,IAAI,KAAK,WAAW,IAAI;AACjD,0BAAM,cAAc,IAAI,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACxD,6BAAO,WAAW;AAAA,oBACnB,CAAC;AACD,wBAAI,YAAY,SAAS,GAAG;AAC3B,mCAAK;AAAA,wBACJ,KAAK,IAAI,OAAO,EAAE;AAAA,wBAClB,WAAW,YAAY,CAAC,CAAC;AAAA,wBACzB,WAAW,YAAY,CAAC,CAAC;AAAA,wBACzB,WAAW,YAAY,CAAC,CAAC;AAAA,sBAC1B;AAAA,oBACD;AAAA,kBACD,WAAW,IAAI,WAAW,IAAI,KAAK,WAAW,IAAI;AACjD,0BAAM,cAAc,IAAI,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACxD,6BAAO,WAAW;AAAA,oBACnB,CAAC;AACD,wBAAI,YAAY,SAAS,GAAG;AAC3B,mCAAK;AAAA,wBACJ,KAAK,IAAI,OAAO,EAAE;AAAA,wBAClB,WAAW,YAAY,CAAC,CAAC;AAAA,wBACzB,WAAW,YAAY,CAAC,CAAC;AAAA,wBACzB,WAAW,YAAY,CAAC,CAAC;AAAA,sBAC1B;AAAA,oBACD;AAAA,kBACD,WAAW,IAAI,WAAW,GAAG,KAAK,WAAW,IAAI;AAChD,0BAAM,cAAc,IAAI,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACxD,6BAAO,WAAW;AAAA,oBACnB,CAAC;AACD,wBAAI,YAAY,SAAS,GAAG;AAC3B,2BAAK,IAAI,OAAO,EAAE,WAAW,WAAW,YAAY,CAAC,CAAC;AAAA,oBACvD;AAAA,kBACD;AAAA,gBACD;AAEA,oBAAI,qBAAqB,IAAI,WAAW,QAAQ,CAAC;AACjD,yBAAS,OAAO,MAAM;AACrB,qCAAmB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,aAAa,CAAC,IAAI;AAC1E,qCAAmB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,aAAa,CAAC,IAAI;AAC1E,qCAAmB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,aAAa,CAAC,IAAI;AAC1E,qCAAmB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,WAAW;AAAA,gBACpE;AACA,oBAAI,cAAc,IAAI,QAAQ,KAAK;AACnC,4BAAY,eAAe,oBAAoB,OAAO,CAAC;AACvD,qBAAK,aAAa,WAAW,SAAS,WAAW;AAEjD,oBAAI,sBAAsB,IAAI,WAAW,QAAQ,CAAC;AAClD,yBAAS,OAAO,MAAM;AACrB,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,cAAc,CAAC,IAAI;AAC5E,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,cAAc,CAAC,IAAI;AAC5E,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,cAAc,CAAC,IAAI;AAC5E,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI;AAAA,gBACnD;AACA,8BAAc,IAAI,QAAQ,KAAK;AAC/B,4BAAY,eAAe,qBAAqB,OAAO,CAAC;AACxD,qBAAK,aAAa;AAAA,kBACjB,QAAQ,UAAU,GAAG,QAAQ,SAAS,CAAC,IAAI;AAAA,kBAC3C;AAAA,gBACD;AAEA,oBAAI,sBAAsB,IAAI,WAAW,QAAQ,CAAC;AAClD,yBAAS,OAAO,MAAM;AACrB,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,cAAc,CAAC,IAAI;AAC5E,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,cAAc,CAAC,IAAI;AAC5E,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,cAAc,CAAC,IAAI;AAC5E,sCAAoB,IAAI,CAAC,EAAE,cAAc,IAAI,CAAC,IAAI;AAAA,gBACnD;AACA,8BAAc,IAAI,QAAQ,KAAK;AAC/B,4BAAY,eAAe,qBAAqB,OAAO,CAAC;AACxD,qBAAK,aAAa;AAAA,kBACjB,QAAQ,UAAU,GAAG,QAAQ,SAAS,CAAC,IAAI;AAAA,kBAC3C;AAAA,gBACD;AAAA,cACD;AAAA,YACD,SAAS,GAAG;AAAA,YAAC;AAAA,UACd;AAAA,QACD,WAAW,KAAK,WAAW,QAAQ,KAAK,KAAK,OAAO,GAAG;AACtD,qBAAW,KAAK,MAAM,KAAK,EAAE,CAAC;AAAA,QAC/B,WAAW,KAAK,WAAW,IAAI,GAAG;AAEjC,gBAAM,SAAS,KAAK,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACpD,mBAAO,WAAW;AAAA,UACnB,CAAC;AACD,0BAAgB,KAAK,aAAK,WAAW,WAAW,OAAO,CAAC,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC,CAAC,CAAC;AAAA,QACnF,WAAW,KAAK,WAAW,IAAI,GAAG;AAEjC,gBAAM,SAAS,KAAK,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACpD,mBAAO,WAAW;AAAA,UACnB,CAAC;AACD,wBAAc;AAAA,YACb,aAAK,WAAW,WAAW,OAAO,CAAC,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC,CAAC;AAAA,UACpF;AAAA,QACD,WAAW,KAAK,WAAW,GAAG,GAAG;AAEhC,gBAAM,SAAS,KAAK,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACpD,mBAAO,WAAW;AAAA,UACnB,CAAC;AACD,0BAAgB;AAAA,YACf,aAAK,WAAW,WAAW,OAAO,CAAC,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC,GAAG,WAAW,OAAO,CAAC,CAAC,CAAC;AAAA,UACpF;AAAA,QACD,WAAW,KAAK,WAAW,GAAG,GAAG;AAEhC,gBAAM,SAAS,KAAK,MAAM,KAAK,EAAE,OAAO,CAAC,YAAY;AACpD,mBAAO,WAAW;AAAA,UACnB,CAAC;AACD,mBAAS,IAAI,GAAG,IAAI,OAAO,SAAS,GAAG,KAAK;AAC3C,qBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,kBAAI,QAAQ,KAAK,IAAI,IAAI,IAAI;AAC7B,oBAAM,UAAU,OAAO,KAAK,EAAE,MAAM,GAAG;AAEvC,oBAAM,OAAO,SAAS,KAAK;AAAA,gBAC1B,UAAU;AAAA,gBACV,eAAe;AAAA,gBACf,aAAa;AAAA,gBACb,UAAU;AAAA,cACX,CAAC;AACD,kBAAI,QAAQ,SAAS,GAAG;AACvB,yBAAS,OAAO,CAAC,EAAE,WAAW,SAAS,QAAQ,CAAC,CAAC,IAAI;AAAA,cACtD;AAEA,kBAAI,QAAQ,SAAS,GAAG;AACvB,yBAAS,OAAO,CAAC,EAAE,gBAAgB,SAAS,QAAQ,CAAC,CAAC,IAAI;AAAA,cAC3D;AAEA,kBAAI,QAAQ,SAAS,GAAG;AACvB,yBAAS,OAAO,CAAC,EAAE,cAAc,SAAS,QAAQ,CAAC,CAAC,IAAI;AAAA,cACzD;AAEA,kBAAI,YAAY,IAAI;AACnB,sBAAM,MAAM,KAAK,IAAI,QAAQ;AAC7B,oBAAI,OAAO,QAAW;AACrB,2BAAS,OAAO,CAAC,EAAE,WAAW,IAAI;AAAA,gBACnC,OAAO;AACN,0BAAQ,KAAK,YAAY,WAAW,wBAAwB;AAAA,gBAC7D;AAAA,cACD;AAAA,YACD;AAAA,UACD;AAAA,QACD,WAAW,KAAK,WAAW,GAAG,GAAG;AAAA,QAEjC,WAAW,KAAK,SAAS,GAAG;AAAA,QAG5B;AAAA,MACD;AAEA,UAAI,YAAY,IAAI,aAAa,SAAS,SAAS,CAAC;AAEpD,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACzC,YAAI,CAAC,MAAM,SAAS,CAAC,EAAE,QAAQ,GAAG;AACjC,oBAAU,IAAI,CAAC,IAAI,gBAAgB,SAAS,CAAC,EAAE,QAAQ,EAAE,CAAC;AAC1D,oBAAU,IAAI,IAAI,CAAC,IAAI,gBAAgB,SAAS,CAAC,EAAE,QAAQ,EAAE,CAAC;AAC9D,oBAAU,IAAI,IAAI,CAAC,IAAI,gBAAgB,SAAS,CAAC,EAAE,QAAQ,EAAE,CAAC;AAAA,QAC/D,OAAO;AACN,oBAAU,IAAI,CAAC,IAAI;AACnB,oBAAU,IAAI,IAAI,CAAC,IAAI;AACvB,oBAAU,IAAI,IAAI,CAAC,IAAI;AAAA,QACxB;AAEA,YAAI,CAAC,MAAM,SAAS,CAAC,EAAE,WAAW,GAAG;AACpC,oBAAU,IAAI,IAAI,CAAC,IAAI,cAAc,SAAS,CAAC,EAAE,WAAW,EAAE,CAAC;AAC/D,oBAAU,IAAI,IAAI,CAAC,IAAI,cAAc,SAAS,CAAC,EAAE,WAAW,EAAE,CAAC;AAC/D,oBAAU,IAAI,IAAI,CAAC,IAAI,cAAc,SAAS,CAAC,EAAE,WAAW,EAAE,CAAC;AAAA,QAChE,OAAO;AACN,oBAAU,IAAI,IAAI,CAAC,IAAI;AACvB,oBAAU,IAAI,IAAI,CAAC,IAAI;AACvB,oBAAU,IAAI,IAAI,CAAC,IAAI;AAAA,QACxB;AAEA,YAAI,CAAC,MAAM,SAAS,CAAC,EAAE,QAAQ,GAAG;AACjC,oBAAU,IAAI,IAAI,CAAC,IAAI,SAAS,CAAC,EAAE,WAAW,KAAK,OAAO,MAAM,KAAK;AACrE,oBAAU,IAAI,IAAI,CAAC,IAAI;AAAA,QACxB,WAAW,CAAC,MAAM,SAAS,CAAC,EAAE,aAAa,GAAG;AAC7C,oBAAU,IAAI,IAAI,CAAC,IAAI,gBAAgB,SAAS,CAAC,EAAE,aAAa,EAAE,CAAC;AACnE,oBAAU,IAAI,IAAI,CAAC,IAAI,gBAAgB,SAAS,CAAC,EAAE,aAAa,EAAE,CAAC;AAAA,QACpE,OAAO;AACN,oBAAU,IAAI,IAAI,CAAC,IAAI;AACvB,oBAAU,IAAI,IAAI,CAAC,IAAI;AAAA,QACxB;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAAA;AACD;;;AC5RA,IAAqB,YAArB,MAA+B;AAAA,EAc9B,YAAY,YAA4B,WAAiB;AACxD,SAAK,UAAU;AACf,SAAK,aAAa,aAAK,OAAO;AAC9B,SAAK,WAAW;AAChB,SAAK,kBAAkB;AACvB,SAAK,aAAa;AAClB,SAAK,SAAS;AAEd,SAAK,aAAa;AAGlB,SAAK,MAAM,SAAS,cAAc,KAAK;AACvC,SAAK,IAAI,MAAM,WAAW;AAC1B,SAAK,IAAI,MAAM,QAAQ;AACvB,SAAK,IAAI,MAAM,SAAS;AACxB,SAAK,IAAI,MAAM,aAAa;AAE5B,QAAI,aAAa,QAAW;AAC3B,gBAAU,YAAY,IAAI;AAC1B,WAAK,YAAY;AAAA,IAClB,OAAO;AAEN,iBAAW,YAAY,KAAK,GAAG;AAC/B,WAAK,YAAY;AAAA,IAClB;AAAA,EACD;AAAA,EAEA,aAA6B;AAC5B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,YAAqB;AACpB,WAAO,KAAK,IAAI;AAAA,EACjB;AAAA,EAEA,UAAU,QAAiB;AAC1B,SAAK,IAAI,SAAS;AAAA,EACnB;AAAA,EAEA,eAAwB;AACvB,SAAK,IAAI,SAAS,CAAC,KAAK,IAAI;AAC5B,WAAO,KAAK,IAAI;AAAA,EACjB;AAAA,EAEA,SAAS;AACR,SAAK,IAAI,OAAO;AAChB,SAAK,UAAU;AAAA,EAChB;AAAA,EAEU,aAAa;AACtB,SAAK,IAAI,MAAM,OAAO,KAAK,WAAW,CAAC,IAAI,MAAM;AACjD,SAAK,IAAI,MAAM,MAAM,KAAK,WAAW,CAAC,IAAI,MAAM;AAChD,QAAI,KAAK,iBAAiB;AACzB,WAAK,IAAI,MAAM,WAAW,KAAK,YAAY,KAAK,WAAW,eAAe,QAAU;AAAA,IACrF,OAAO;AACN,WAAK,IAAI,MAAM,WAAW,KAAK,WAAW;AAAA,IAC3C;AAEA,QAAI,KAAK,QAAQ;AAChB,WAAK,IAAI,MAAM,YAAY;AAAA,IAC5B;AAAA,EACD;AAAA,EAEA,OAAO;AAAA,EAAC;AACT;;;AC7EA,IAAqB,SAArB,cAAoC,UAAU;AAAA,EAO7C,YAAY,YAA4B,WAAiB;AACxD,UAAM,YAAY,SAAS;AAC3B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,WAAW;AAGhB,SAAK,YAAY,SAAS,cAAc,OAAO;AAC/C,SAAK,UAAU,OAAO;AACtB,SAAK,UAAU,YAAY;AAE3B,SAAK,IAAI,YAAY,KAAK,SAAS;AAAA,EACpC;AAAA,EAEA,aAA6B;AAC5B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,kBAAoC;AACnC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,QAAQ,IAAS;AAChB,SAAK,kBAAkB;AACvB,SAAK,UAAU,iBAAiB,SAAS,KAAK,eAAe;AAAA,EAC9D;AAAA,EAEA,SAAe;AACd,QAAI,KAAK,mBAAmB,QAAW;AACtC,WAAK,UAAU,oBAAoB,SAAS,KAAK,eAAe;AAAA,IACjE;AACA,UAAM,OAAO;AAAA,EACd;AAAA,EAEA,OAAO;AACN,SAAK,aAAa,KAAK;AACvB,SAAK,UAAU,QAAQ,KAAK;AAC5B,SAAK,WAAW,KAAK;AAErB,SAAK,WAAW;AAAA,EACjB;AACD;;;AC/CA,IAAqB,WAArB,cAAsC,UAAU;AAAA,EAO/C,YAAY,YAA4B,WAAiB;AACxD,UAAM,YAAY,SAAS;AAC3B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,WAAW;AAGhB,QAAI,YAAY,SAAS,cAAc,OAAO;AAC9C,cAAU,YAAY;AAEtB,SAAK,QAAQ,SAAS,cAAc,OAAO;AAE3C,SAAK,YAAY,SAAS,cAAc,OAAO;AAC/C,SAAK,UAAU,OAAO;AAEtB,QAAI,gBAAgB,SAAS,cAAc,MAAM;AACjD,kBAAc,YAAY;AAE1B,cAAU,YAAY,KAAK,KAAK;AAChC,cAAU,YAAY,KAAK,SAAS;AACpC,cAAU,YAAY,aAAa;AAEnC,SAAK,IAAI,YAAY,SAAS;AAAA,EAC/B;AAAA,EAEA,aAA6B;AAC5B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,kBAAoC;AACnC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,aAAsB;AACrB,WAAO,KAAK,UAAU;AAAA,EACvB;AAAA,EAEA,OAAO;AACN,SAAK,aAAa,KAAK;AACvB,SAAK,WAAW,KAAK;AACrB,SAAK,MAAM,cAAc,KAAK;AAC9B,SAAK,WAAW;AAAA,EACjB;AACD;;;AClDA,IAAqB,MAArB,cAAiC,UAAU;AAAA,EAK1C,YAAY,YAA4B,WAAiB;AACxD,UAAM,YAAY,SAAS;AAE3B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,OAAO;AACZ,SAAK,WAAW,IAAI,MAAiB;AAAA,EACtC;AAAA,EAEA,YAAY,UAAqB;AAChC,SAAK,SAAS,KAAK,QAAQ;AAC3B,SAAK,IAAI,YAAY,SAAS,WAAW,CAAC;AAAA,EAC3C;AAAA,EAEA,OAAa;AACZ,SAAK,aAAa,KAAK;AACvB,SAAK,WAAW,KAAK;AACrB,SAAK,WAAW;AAAA,EACjB;AACD;;;ACtBA,IAAqB,WAArB,cAAsC,UAAU;AAAA,EAM/C,YAAY,YAA4B,WAAiB;AACxD,UAAM,YAAY,SAAS;AAE3B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,OAAO;AAGZ,SAAK,eAAe,SAAS,cAAc,UAAU;AACrD,SAAK,IAAI,YAAY,KAAK,YAAY;AAAA,EACvC;AAAA,EAEA,qBAA0C;AACzC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,OAAa;AACZ,SAAK,aAAa,KAAK;AACvB,SAAK,WAAW,KAAK;AACrB,SAAK,aAAa,cAAc,KAAK;AACrC,SAAK,WAAW;AAAA,EACjB;AACD;;;AC3BA,IAAqB,SAArB,cAAoC,UAAU;AAAA,EAO7C,YAAY,YAA4B,WAAiB;AACxD,UAAM,YAAY,SAAS;AAC3B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,WAAW;AAGhB,SAAK,YAAY,SAAS,cAAc,OAAO;AAC/C,SAAK,UAAU,OAAO;AACtB,SAAK,UAAU,YAAY;AAE3B,SAAK,QAAQ,SAAS,cAAc,OAAO;AAC3C,SAAK,MAAM,cAAc,KAAK;AAC9B,SAAK,MAAM,YAAY;AAEvB,SAAK,IAAI,YAAY,KAAK,KAAK;AAC/B,SAAK,IAAI,YAAY,KAAK,SAAS;AAAA,EACpC;AAAA,EAEA,aAA6B;AAC5B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,kBAAoC;AACnC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,WAAmB;AAClB,WAAO,OAAO,KAAK,UAAU,KAAK;AAAA,EACnC;AAAA,EAEA,OAAO;AACN,SAAK,aAAa,KAAK;AACvB,SAAK,WAAW,KAAK;AACrB,SAAK,MAAM,cAAc,KAAK;AAC9B,UAAM,WAAW;AAAA,EAClB;AACD;;;AC3CA,IAAqB,WAArB,cAAsC,UAAU;AAAA,EAQ/C,YAAY,YAA4B,WAAiB;AACxD,UAAM,YAAY,SAAS;AAC3B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,WAAW;AAGhB,SAAK,YAAY,SAAS,cAAc,OAAO;AAC/C,SAAK,UAAU,OAAO;AAEtB,SAAK,QAAQ,SAAS,cAAc,OAAO;AAC3C,SAAK,MAAM,cAAc,KAAK;AAE9B,SAAK,IAAI,YAAY,KAAK,KAAK;AAC/B,SAAK,IAAI,YAAY,KAAK,SAAS;AAAA,EACpC;AAAA,EAEA,aAA6B;AAC5B,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,kBAAoC;AACnC,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,SAAS,IAAS;AACjB,SAAK,aAAa;AAClB,SAAK,UAAU,iBAAiB,UAAU,KAAK,UAAU;AAAA,EAC1D;AAAA,EAEA,SAAS;AACR,QAAI,KAAK,cAAc,QAAW;AACjC,WAAK,UAAU,oBAAoB,UAAU,KAAK,UAAU;AAAA,IAC7D;AACA,UAAM,OAAO;AAAA,EACd;AAAA,EAEA,OAAO;AACN,SAAK,aAAa,KAAK;AACvB,SAAK,WAAW,KAAK;AACrB,SAAK,MAAM,cAAc,KAAK;AAC9B,SAAK,WAAW;AAAA,EACjB;AACD;;;AClDA,IAAqB,eAArB,cAA0C,UAAU;AAAA,EAInD,YAAY,YAA4B,WAAiB;AACxD,UAAM,YAAY,SAAS;AAE3B,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,OAAO;AAAA,EACb;AAAA,EAEA,OAAa;AACZ,SAAK,aAAa,KAAK;AACvB,SAAK,WAAW,KAAK;AACrB,SAAK,IAAI,cAAc,KAAK;AAC5B,SAAK,WAAW;AAAA,EACjB;AACD;;;AClBA,IAAqB,eAArB,cAA0C,UAAU;AAAA,EAOnD,YAAY,YAA4B;AACvC,UAAM,UAAU;AAEhB,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,OAAO;AACZ,SAAK,wBAAwB;AAAA,EAC9B;AAAA,EAEA,UAAU,QAAiB;AAC1B,UAAM,UAAU,MAAM;AACtB,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,OAAO,UAAsB;AAC5B,QAAI,MAAM,aAAK,WAAW,KAAK,SAAS,CAAC,GAAG,KAAK,SAAS,CAAC,GAAG,KAAK,SAAS,CAAC,GAAG,CAAG;AACnF,QAAI,eAAe,aAAK,cAAc,aAAK,OAAO,GAAG,KAAK,QAAQ;AAClE,iBAAa,CAAC,KAAK,aAAa,CAAC,IAAI,aAAa,CAAC,IAAI,KAAO;AAC9D,iBAAa,CAAC,IAAI,KAAO,aAAa,CAAC,IAAI,aAAa,CAAC,IAAI,KAAO;AAEpE,QAAI,aAAa,CAAC,IAAI,KAAO,CAAC,KAAK,QAAQ;AAC1C,WAAK,WAAW,CAAC,IAAI,aAAa,CAAC;AACnC,WAAK,WAAW,CAAC,IAAI,aAAa,CAAC;AAEnC,UAAI,OAAO,KAAK;AAChB,UAAI,KAAK,uBAAuB;AAC/B,eAAO,KAAK,OAAO,aAAa,CAAC;AAAA,MAClC;AACA,WAAK,WAAW;AAEhB,WAAK,IAAI,SAAS;AAClB,WAAK,IAAI,cAAc,KAAK;AAC5B,WAAK,WAAW;AAAA,IACjB,OAAO;AACN,WAAK,IAAI,SAAS;AAAA,IACnB;AAAA,EACD;AACD;;;ACnCO,IAAM,cAAN,MAAkB;AAAA,EAQxB,cAAc;AAEb,SAAK,eAAe,IAAI,MAAoB;AAC5C,SAAK,eAAe,IAAI,MAAiB;AAGzC,SAAK,aAAa,SAAS,cAAc,KAAK;AAC9C,SAAK,WAAW,MAAM,WAAW;AAAA,EAClC;AAAA,EAEA,QAAQ,OAAe,QAAgB;AACtC,SAAK,WAAW,MAAM,QAAQ,QAAQ;AACtC,SAAK,WAAW,MAAM,SAAS,SAAS;AAAA,EACzC;AAAA,EAEA,QAAQ;AACP,aAAS,eAAe,KAAK,cAAc;AAC1C,kBAAY,OAAO;AAAA,IACpB;AAEA,aAAS,eAAe,KAAK,cAAc;AAC1C,kBAAY,OAAO;AAAA,IACpB;AAAA,EACD;AAAA,EAEA,OAAO;AACN,aAAS,eAAe,KAAK,cAAc;AAC1C,UAAI,CAAC,YAAY,WAAW;AAE3B,oBAAY,UAAU,IAAI;AAAA,MAC3B;AAAA,IACD;AAEA,aAAS,eAAe,KAAK,cAAc;AAC1C,kBAAY,UAAU,IAAI;AAAA,IAC3B;AAAA,EACD;AAAA,EAEA,OAAO;AACN,aAAS,eAAe,KAAK,cAAc;AAC1C,UAAI,CAAC,YAAY,WAAW;AAE3B,oBAAY,UAAU,KAAK;AAAA,MAC5B;AAAA,IACD;AAEA,aAAS,eAAe,KAAK,cAAc;AAC1C,kBAAY,UAAU,KAAK;AAAA,IAC5B;AAAA,EACD;AAAA,EAEA,eAA6B;AAC5B,UAAMC,UAAS,KAAK,aAAa,KAAK,IAAI,aAAa,KAAK,UAAU,CAAC;AACvE,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,aAAa,WAA+B;AAC3C,UAAMA,UAAS,KAAK,aAAa,KAAK,IAAI,aAAa,KAAK,YAAY,SAAS,CAAC;AAClF,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,eAAe,WAA2B;AACzC,UAAMA,UAAS,KAAK,aAAa,KAAK,IAAI,SAAS,KAAK,YAAY,SAAS,CAAC;AAC9E,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,aAAa,WAAyB;AACrC,UAAMA,UAAS,KAAK,aAAa,KAAK,IAAI,OAAO,KAAK,YAAY,SAAS,CAAC;AAC5E,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,aAAa,WAAyB;AACrC,UAAMA,UAAS,KAAK,aAAa,KAAK,IAAI,OAAO,KAAK,YAAY,SAAS,CAAC;AAC5E,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,eAAe,WAA2B;AACzC,UAAMA,UAAS,KAAK,aAAa,KAAK,IAAI,SAAS,KAAK,YAAY,SAAS,CAAC;AAC9E,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,eAAe,WAA2B;AACzC,UAAMA,UAAS,KAAK,aAAa,KAAK,IAAI,SAAS,KAAK,YAAY,SAAS,CAAC;AAC9E,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,UAAU,WAAsB;AAC/B,UAAMA,UAAS,KAAK,aAAa,KAAK,IAAI,IAAI,KAAK,YAAY,SAAS,CAAC;AACzE,WAAO,KAAK,aAAaA,UAAS,CAAC;AAAA,EACpC;AAAA,EAEA,KAAK,QAAgB;AAEpB,aAAS,IAAI,GAAG,IAAI,KAAK,aAAa,QAAQ,KAAK;AAClD,UAAI,CAAC,KAAK,aAAa,CAAC,EAAE,SAAS;AAClC,aAAK,aAAa,CAAC,EAAE,OAAO,OAAO,kBAAkB,CAAC;AAAA,MACvD,OAAO;AACN,aAAK,aAAa,OAAO,GAAG,CAAC;AAC7B;AAAA,MACD;AAAA,IACD;AAEA,aAAS,IAAI,GAAG,IAAI,KAAK,aAAa,QAAQ,KAAK;AAClD,UAAI,CAAC,KAAK,aAAa,CAAC,EAAE,SAAS;AAClC,aAAK,aAAa,CAAC,EAAE,KAAK;AAAA,MAC3B,OAAO;AACN,aAAK,aAAa,OAAO,GAAG,CAAC;AAC7B;AAAA,MACD;AAAA,IACD;AAAA,EAED;AACD;;;AC9HO,IAAO;AAAA,CAAP,CAAOC,qBAAP;AACC,WAAS,qBACf,yBACO;AACP,QAAI,wBAAwB,UAAU,GAAG;AACxC,aAAO,aAAK,OAAO;AAAA,IACpB;AAGA,QAAI,eAAe,aAAK,OAAO;AAC/B,QAAI,WAAW;AACf,aAAS,OAAO,yBAAyB;AAExC,UAAI,IAAI,OAAO,sBAAsB,EAAE,UAAU,GAAG;AACnD,YAAI,aAAK,IAAI,IAAI,MAAM,IAAI,OAAO,sBAAsB,EAAE,CAAC,CAAC,IAAI,MAAM;AACrE;AAAA,QACD;AAAA,MACD;AAEA,UAAI,IAAI,QAAQ,UAAU;AACzB,qBAAK,KAAK,cAAc,IAAI,IAAI;AAChC,mBAAW,IAAI;AAAA,MAChB;AAAA,IACD;AACA,iBAAK,MAAM,cAAc,cAAc,QAAQ;AAE/C,WAAO;AAAA,EACR;AA1BO,EAAAA,iBAAS;AA4BT,WAAS,gBACf,yBACA,KACA,KACC;AACD,aAAS,OAAO,yBAAyB;AACxC,UAAI,OAAO,aAAK,MAAM,IAAI,IAAI;AAC9B,UAAI,IAAI,OAAO,sBAAsB,EAAE,UAAU,GAAG;AACnD,qBAAK,KAAK,MAAM,IAAI,OAAO,sBAAsB,EAAE,CAAC,CAAC;AAAA,MACtD,WAAW,IAAI,OAAO,sBAAsB,EAAE,UAAU,GAAG;AAC1D,qBAAK,KAAK,MAAM,IAAI,OAAO,sBAAsB,EAAE,CAAC,CAAC;AACrD,qBAAK,OAAO,MAAM,IAAI;AAAA,MACvB;AAEA,UAAI,QAAQ,IAAI;AAChB,UAAI,QAAQ,IAAI;AAEhB,UAAI,gBAAgB,aAAK,IAAI,aAAK,OAAO,GAAG,OAAO,KAAK;AACxD,UAAI,UAAU,aAAK,IAAI,eAAe,IAAI;AAC1C,UAAI,UAAU,GAAK;AAClB,YAAI,KAAK,aAAK,MAAM,aAAK,OAAO,GAAG,aAAK,MAAM,aAAK,OAAO,GAAG,eAAe,IAAI,GAAG,IAAI;AAEvF,YAAI,aAAK,cAAc,EAAE,IAAI,MAAQ;AACpC,uBAAK,UAAU,IAAI,EAAE;AAAA,QACtB;AAEA,YAAI,WAAW,aAAK,OAAO;AAC3B,YAAI,WAAW,aAAK,OAAO;AAE3B,YAAI,uBAAuB,KAAK,IAAI,IAAI,sBAAsB,IAAI,oBAAoB;AACtF,YAAI,sBAAsB,KAAK,IAAI,IAAI,qBAAqB,IAAI,mBAAmB;AAEnF,YACC,OACA,CAAC,IAAI,YACL,CAAC,IAAI,eACL,OACA,CAAC,IAAI,YACL,CAAC,IAAI,aACJ;AACD,cAAI,QAAQ,aAAK,IAAI,OAAO,IAAI;AAChC,cAAI,QAAQ,aAAK,IAAI,OAAO,IAAI;AAChC,cAAI,cAAc,aAAK,IAAI,eAAe,EAAE;AAC5C,cAAI,cAAc,CAAC;AACnB,cAAI,SACD,IAAI,OAAO,uBAAuB,IAAI,SACtC,IAAI,OAAO,IAAI,QAChB,SACE,IAAM,wBAAwB,IAAI,QACnC,IAAI,OAAO,IAAI,QAChB;AACF,cAAI,SACD,IAAI,OAAO,uBAAuB,IAAI,SACtC,IAAI,OAAO,IAAI,QAChB,SACE,IAAM,wBAAwB,IAAI,QACnC,IAAI,OAAO,IAAI,QAChB;AAEF,cAAI,qBACH,CAAC,cAAc,KAAK,IAAI,qBAAqB,sBAAsB,KAAK,IAAI,QAAQ,KAAK,CAAC;AAC3F,cAAI,qBACH,CAAC,cAAc,KAAK,IAAI,qBAAqB,sBAAsB,KAAK,IAAI,QAAQ,KAAK,CAAC;AAE3F,uBAAK,YAAY,UAAU,UAAU,MAAM,QAAQ,KAAK;AACxD,uBAAK,YAAY,UAAU,UAAU,IAAI,kBAAkB;AAE3D,uBAAK,YAAY,UAAU,UAAU,MAAM,QAAQ,KAAK;AACxD,uBAAK,YAAY,UAAU,UAAU,IAAI,kBAAkB;AAAA,QAC5D,WAAW,IAAI,YAAY,IAAI,aAAa;AAC3C,cAAI,uBAAuB,aAAK,OAAO,aAAK,OAAO,GAAG,aAAa;AACnE,cAAI,QAAQ,aAAK,IAAI,sBAAsB,IAAI;AAC/C,cAAI,qBAAqB,aAAK,IAAI,sBAAsB,EAAE;AAC1D,cAAI,oBAAoB,qBAAqB,KAAK,IAAI,qBAAqB,sBAAsB,KAAK,IAAI,KAAK,CAAC;AAEhH,uBAAK,YAAY,UAAU,UAAU,MAAM,CAAC,SAAS,IAAM,qBAAqB;AAChF,uBAAK,YAAY,UAAU,UAAU,IAAI,CAAC,iBAAiB;AAAA,QAC5D,WAAW,IAAI,YAAY,IAAI,aAAa;AAC3C,cAAI,QAAQ,aAAK,IAAI,eAAe,IAAI;AACxC,cAAI,qBAAqB,aAAK,IAAI,eAAe,EAAE;AACnD,cAAI,oBAAoB,qBAAqB,KAAK,IAAI,qBAAqB,sBAAsB,KAAK,IAAI,KAAK,CAAC;AAEhH,uBAAK,YAAY,UAAU,UAAU,MAAM,CAAC,SAAS,IAAM,qBAAqB;AAChF,uBAAK,YAAY,UAAU,UAAU,IAAI,CAAC,iBAAiB;AAAA,QAC5D;AAGA,qBAAK,IAAI,OAAO,OAAO,QAAQ;AAC/B,YAAI,SAAS,CAAC,IAAI,GAAK;AACtB,cAAI,WAAW;AAAA,QAChB;AAGA,qBAAK,IAAI,OAAO,OAAO,QAAQ;AAC/B,YAAI,SAAS,CAAC,IAAI,GAAK;AACtB,cAAI,WAAW;AAAA,QAChB;AAEA,YAAI,eAAeA,iBAAgB,qBAAqB,CAAC,GAAG,CAAC;AAE7D,YAAI,CAAC,IAAI,eAAe,CAAC,IAAI,UAAU;AACtC,cAAI,UAAU,UAAW,aAAK;AAAA,YAC7B,aAAK,OAAO;AAAA,YACZ;AAAA,YACA,aAAK,IAAI,QAAQ,KAAK,aAAK,IAAI,QAAQ,IAAI,aAAK,IAAI,QAAQ;AAAA,UAC7D,CAAC;AAAA,QACF;AAEA,YAAI,CAAC,IAAI,eAAe,CAAC,IAAI,UAAU;AACtC,cAAI,UAAU,UAAU,aAAK;AAAA,YAC5B,aAAK,OAAO;AAAA,YACZ;AAAA,YACA,CAAC,aAAK,IAAI,QAAQ,KAAK,aAAK,IAAI,QAAQ,IAAI,aAAK,IAAI,QAAQ;AAAA,UAC9D,CAAC;AAAA,QACF;AAAA,MACD;AAAA,IACD;AAAA,EACD;AArHO,EAAAA,iBAAS;AAAA,GA7BH;;;ACFP,IAAO;AAAA,CAAP,CAAOC,SAAP;AAUC,WAAS,WACf,eACA,gBACA,gBACA,SACA,QACS;AACT,QAAI,OAAO,aAAK,IAAI,eAAe,eAAe,CAAC,CAAC;AACpD,QAAI,OAAO;AACX,QAAI,OAAO,aAAK,IAAI,eAAe,eAAe,CAAC,CAAC;AACpD,QAAI,OAAO;AAEX,QAAI,UAAU;AAEd,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC/C,gBAAU,aAAK,IAAI,eAAe,eAAe,CAAC,CAAC;AACnD,aAAO,KAAK,IAAI,SAAS,IAAI;AAC7B,aAAO,KAAK,IAAI,SAAS,IAAI;AAAA,IAC9B;AAEA,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC/C,gBAAU,aAAK,IAAI,eAAe,eAAe,CAAC,CAAC;AACnD,aAAO,KAAK,IAAI,SAAS,IAAI;AAC7B,aAAO,KAAK,IAAI,SAAS,IAAI;AAAA,IAC9B;AAEA,QAAI,WAAW,OAAO;AACtB,QAAI,WAAW,OAAO;AACtB,QAAI,YAAY,CAAC,UAAU,YAAY,CAAC,QAAQ;AAC/C,UAAI,WAAW,UAAU;AACxB,gBAAQ,QAAQ;AAChB,eAAO;AAAA,MACR,OAAO;AACN,gBAAQ,QAAQ;AAChB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAvCO,EAAAA,KAAS;AAmDT,WAAS,oBACf,SACA,gBACA,gBACA,kBACA,MACU;AACV,QAAI,OAAO,UACV,OAAO;AACR,QAAI,OAAO,WACV,OAAO;AAER,QAAI,UAAU;AAEd,eAAW,QAAQ,gBAAgB;AAClC,gBAAU,aAAK,IAAI,MAAM,OAAO;AAEhC,aAAO,KAAK,IAAI,MAAM,OAAO;AAC7B,aAAO,KAAK,IAAI,MAAM,OAAO;AAAA,IAC9B;AAEA,eAAW,QAAQ,gBAAgB;AAClC,gBAAU,aAAK,IAAI,MAAM,OAAO;AAEhC,aAAO,KAAK,IAAI,MAAM,OAAO;AAC7B,aAAO,KAAK,IAAI,MAAM,OAAO;AAAA,IAC9B;AAIA,QAAI;AACJ,QAAI,QAAQ,aAAK,IAAI,SAAS,gBAAgB;AAE9C,QAAI,QAAQ,MAAM;AACjB,UAAI,SAAS,GAAK;AAEjB,eAAO;AAAA,MACR;AAEA,WAAK,OAAO,QAAQ;AACpB,UAAI,IAAI,KAAK,OAAO;AACnB,aAAK,QAAQ;AACb,qBAAK,KAAK,KAAK,iBAAiB,OAAO;AAAA,MACxC;AACA,UAAI,KAAK,QAAQ,KAAK,KAAK;AAC1B,eAAO;AAAA,MACR;AAEA,WAAK,OAAO,QAAQ;AACpB,UAAI,IAAI,KAAK,MAAM;AAClB,aAAK,OAAO;AAAA,MACb;AACA,UAAI,KAAK,QAAQ,KAAK,MAAM;AAC3B,eAAO;AAAA,MACR;AAAA,IACD,WAAW,QAAQ,MAAM;AAExB,UAAI,SAAS,GAAK;AACjB,eAAO;AAAA,MACR;AAEA,WAAK,OAAO,QAAQ;AACpB,UAAI,IAAI,KAAK,OAAO;AACnB,aAAK,QAAQ;AACb,qBAAK,KAAK,KAAK,iBAAiB,OAAO;AAAA,MACxC;AACA,UAAI,KAAK,QAAQ,KAAK,KAAK;AAC1B,eAAO;AAAA,MACR;AAEA,WAAK,OAAO,QAAQ;AACpB,UAAI,IAAI,KAAK,MAAM;AAClB,aAAK,OAAO;AAAA,MACb;AACA,UAAI,KAAK,QAAQ,KAAK,MAAM;AAC3B,eAAO;AAAA,MACR;AAAA,IACD,OAAO;AAEN,UAAI,QAAQ,GAAK;AAChB,aAAK,OAAO,QAAQ;AACpB,YAAI,IAAI,KAAK,MAAM;AAClB,eAAK,OAAO;AAAA,QACb;AACA,YAAI,KAAK,QAAQ,KAAK,MAAM;AAC3B,iBAAO;AAAA,QACR;AAAA,MACD,WAAW,QAAQ,GAAK;AACvB,aAAK,OAAO,QAAQ;AACpB,YAAI,IAAI,KAAK,MAAM;AAClB,eAAK,OAAO;AAAA,QACb;AACA,YAAI,KAAK,QAAQ,KAAK,MAAM;AAC3B,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAnGO,EAAAA,KAAS;AA6GT,WAAS,qBAAqB,QAAe,QAAe,UAAsB;AACxF,QAAI,iBAAiB,OAAO,uBAAuB;AACnD,QAAI,iBAAiB,OAAO,uBAAuB;AAEnD,QAAI,aAA4B,IAAI,MAAc;AAClD,QAAI,aAA4B,IAAI,MAAc;AAClD,QAAI,aAA4B,IAAI,MAAc;AAClD,QAAI,aAA4B,IAAI,MAAc;AAElD,QAAI,OAAO,aAAK,IAAI,UAAU,eAAe,CAAC,CAAC;AAC/C,eAAW,KAAK,CAAC;AACjB,QAAI,OAAO;AACX,eAAW,KAAK,CAAC;AACjB,QAAI,OAAO,aAAK,IAAI,UAAU,eAAe,CAAC,CAAC;AAC/C,eAAW,KAAK,CAAC;AACjB,QAAI,OAAO;AACX,eAAW,KAAK,CAAC;AAEjB,QAAI,UAAU;AAEd,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC/C,gBAAU,aAAK,IAAI,UAAU,eAAe,CAAC,CAAC;AAC9C,UAAI,UAAU,MAAM;AACnB,eAAO;AACP,mBAAW,SAAS;AACpB,mBAAW,KAAK,CAAC;AAAA,MAClB,WAAW,KAAK,IAAI,UAAU,IAAI,IAAI,MAAQ;AAC7C,mBAAW,KAAK,CAAC;AAAA,MAClB;AACA,UAAI,UAAU,MAAM;AACnB,eAAO;AACP,mBAAW,SAAS;AACpB,mBAAW,KAAK,CAAC;AAAA,MAClB,WAAW,KAAK,IAAI,UAAU,IAAI,IAAI,MAAQ;AAC7C,mBAAW,KAAK,CAAC;AAAA,MAClB;AAAA,IACD;AAEA,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC/C,gBAAU,aAAK,IAAI,UAAU,eAAe,CAAC,CAAC;AAC9C,UAAI,UAAU,MAAM;AACnB,eAAO;AACP,mBAAW,SAAS;AACpB,mBAAW,KAAK,CAAC;AAAA,MAClB,WAAW,KAAK,IAAI,UAAU,IAAI,IAAI,MAAQ;AAC7C,mBAAW,KAAK,CAAC;AAAA,MAClB;AACA,UAAI,UAAU,MAAM;AACnB,eAAO;AACP,mBAAW,SAAS;AACpB,mBAAW,KAAK,CAAC;AAAA,MAClB,WAAW,KAAK,IAAI,UAAU,IAAI,IAAI,MAAQ;AAC7C,mBAAW,KAAK,CAAC;AAAA,MAClB;AAAA,IACD;AAEA,QAAI,WAAW,KAAK,IAAI,OAAO,IAAI;AACnC,QAAI,WAAW,KAAK,IAAI,OAAO,IAAI;AAInC,QAAI,oBAAoB,aAAK,OAAO;AAEpC,QAAI,WAAW,UAAU;AAWxB,UAAI,WAAW,UAAU,GAAG;AAC3B,qBAAK,KAAK,mBAAmB,eAAe,WAAW,CAAC,CAAC,CAAC;AAAA,MAC3D,WAAW,WAAW,UAAU,GAAG;AAClC,qBAAK,KAAK,mBAAmB,eAAe,WAAW,CAAC,CAAC,CAAC;AAAA,MAC3D;AAAA,IACD,OAAO;AAWN,UAAI,WAAW,UAAU,GAAG;AAC3B,qBAAK,KAAK,mBAAmB,eAAe,WAAW,CAAC,CAAC,CAAC;AAAA,MAC3D,WAAW,WAAW,UAAU,GAAG;AAClC,qBAAK,KAAK,mBAAmB,eAAe,WAAW,CAAC,CAAC,CAAC;AAAA,MAC3D;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAlGO,EAAAA,KAAS;AAgHT,WAAS,kBACf,QACA,QACA,kBACA,mBACU;AACV,sBAAkB,QAAQ;AAE1B,QAAI,iBAAiB,OAAO,uBAAuB;AACnD,QAAI,iBAAiB,OAAO,uBAAuB;AAGnD,QAAI,cAAc,SAAU,QAAuB;AAClD,UAAI,UAAU,EAAE,OAAO,MAAM;AAC7B,UAAI,UAAUA,KAAI;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO,SAAS,OAAO;AAAA,MACxB;AAEA,UAAI,UAAU,GAAK;AAClB,eAAO;AAAA,MACR;AAEA,UAAI,UAAU,kBAAkB,OAAO;AACtC,0BAAkB,QAAQ;AAC1B,qBAAK,KAAK,kBAAkB,MAAM;AAClC,YAAI,QAAQ,OAAO;AAClB,uBAAK,MAAM,kBAAkB,kBAAkB,EAAE;AAAA,QAClD;AAAA,MACD;AACA,aAAO;AAAA,IACR;AAEA,QAAI,gBAAgB,OAAO,sBAAsB;AACjD,aAAS,UAAU,eAAe;AACjC,UAAI,CAAC,YAAY,MAAM,GAAG;AACzB,eAAO;AAAA,MACR;AAAA,IACD;AAEA,QAAI,gBAAgB,OAAO,sBAAsB;AACjD,aAAS,UAAU,eAAe;AACjC,UAAI,CAAC,YAAY,MAAM,GAAG;AACzB,eAAO;AAAA,MACR;AAAA,IACD;AAUA,QAAI,cAAc,UAAU,KAAK,cAAc,UAAU,GAAG;AAE3D,UAAI,cAAc,aAAK,MAAM,aAAK,OAAO,GAAG,cAAc,CAAC,GAAG,cAAc,CAAC,CAAC;AAE9E,UAAI,YAAY,CAAC,KAAK,KAAO,YAAY,CAAC,KAAK,KAAO,YAAY,CAAC,KAAK,GAAK;AAG5E,mBAAW,eAAe,OAAO,0BAA0B,GAAG;AAC7D,cAAI,CAAC,YAAY,WAAW,GAAG;AAC9B,mBAAO;AAAA,UACR;AAAA,QACD;AAEA,mBAAW,eAAe,OAAO,0BAA0B,GAAG;AAC7D,cAAI,CAAC,YAAY,WAAW,GAAG;AAC9B,mBAAO;AAAA,UACR;AAAA,QACD;AAGA,eAAO;AAAA,MACR;AAAA,IACD;AAGA,eAAW,MAAM,OAAO,oBAAoB,GAAG;AAC9C,iBAAW,MAAM,OAAO,oBAAoB,GAAG;AAC9C,cAAM,UAAU,aAAK,IAAI,IAAI,EAAE;AAC/B,YAAI,UAAU,QAAQ,UAAU,OAAO;AACtC,cAAI,UAAU,aAAK,MAAM,EAAE;AAC3B,uBAAK,UAAU,SAAS,aAAK,MAAM,SAAS,SAAS,EAAE,CAAC;AACxD,cAAI,CAAC,YAAY,OAAO,GAAG;AAC1B,mBAAO;AAAA,UACR;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAjGO,EAAAA,KAAS;AA4GT,WAAS,2BACf,QACA,QACA,WACA,WACA,SACiB;AAEjB,QAAI,cAAc,aAAK,SAAS,aAAK,OAAO,GAAG,WAAW,SAAS;AAEnE,QAAI,OAAO;AAAA,MACV,OAAO;AAAA,MACP,MAAM;AAAA,MACN,KAAK;AAAA,MACL,iBAAiB,aAAK,OAAO;AAAA,IAC9B;AAEA,QAAI,iBAAiB,OAAO,uBAAuB;AACnD,QAAI,iBAAiB,OAAO,uBAAuB;AAEnD,QAAI,gBAAgB,OAAO,sBAAsB;AACjD,aAAS,UAAU,eAAe;AACjC,UAAI,CAAC,oBAAoB,QAAQ,gBAAgB,gBAAgB,aAAa,IAAI,GAAG;AACpF,eAAO,CAAC,UAAU,IAAI;AAAA,MACvB;AAAA,IACD;AAEA,QAAI,gBAAgB,OAAO,sBAAsB;AACjD,aAAS,UAAU,eAAe;AACjC,UAAI,CAAC,oBAAoB,QAAQ,gBAAgB,gBAAgB,aAAa,IAAI,GAAG;AACpF,eAAO,CAAC,UAAU,IAAI;AAAA,MACvB;AAAA,IACD;AAUA,QAAI,cAAc,UAAU,KAAK,cAAc,UAAU,GAAG;AAE3D,UAAI,cAAc,aAAK,MAAM,aAAK,OAAO,GAAG,cAAc,CAAC,GAAG,cAAc,CAAC,CAAC;AAE9E,UAAI,YAAY,CAAC,KAAK,KAAO,YAAY,CAAC,KAAK,KAAO,YAAY,CAAC,KAAK,GAAK;AAG5E,mBAAW,eAAe,OAAO,0BAA0B,GAAG;AAC7D,cACC,CAAC,oBAAoB,aAAa,gBAAgB,gBAAgB,aAAa,IAAI,GAClF;AACD,mBAAO,CAAC,UAAU,IAAI;AAAA,UACvB;AAAA,QACD;AAEA,mBAAW,eAAe,OAAO,0BAA0B,GAAG;AAC7D,cACC,CAAC,oBAAoB,aAAa,gBAAgB,gBAAgB,aAAa,IAAI,GAClF;AACD,mBAAO,CAAC,UAAU,IAAI;AAAA,UACvB;AAAA,QACD;AAIA,YAAI,KAAK,QAAQ,GAAK;AACrB,iBAAO,CAAC,UAAU,IAAI;AAAA,QACvB;AACA,eAAO,CAAC,KAAK,OAAO,KAAK,eAAe;AAAA,MACzC;AAAA,IACD;AAGA,eAAW,MAAM,OAAO,oBAAoB,GAAG;AAC9C,iBAAW,MAAM,OAAO,oBAAoB,GAAG;AAC9C,cAAM,UAAU,aAAK,IAAI,IAAI,EAAE;AAC/B,YAAI,UAAU,QAAQ,UAAU,OAAO;AACtC,cAAI,UAAU,aAAK,MAAM,EAAE;AAC3B,uBAAK,UAAU,SAAS,aAAK,MAAM,SAAS,SAAS,EAAE,CAAC;AACxD,cAAI,CAAC,oBAAoB,SAAS,gBAAgB,gBAAgB,aAAa,IAAI,GAAG;AACrF,mBAAO,CAAC,UAAU,IAAI;AAAA,UACvB;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAGA,QAAI,KAAK,QAAQ,GAAK;AACrB,aAAO,CAAC,UAAU,IAAI;AAAA,IACvB;AACA,WAAO,CAAC,KAAK,OAAO,KAAK,eAAe;AAAA,EACzC;AA7FO,EAAAA,KAAS;AAAA,GAtYH;;;ACEP,IAAO;AAAA,CAAP,CAAOC,wBAAP;AAAA,EAIC,MAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAepC,YAAY,MAAY,OAAe,OAAa,QAAe,QAAe;AACjF,WAAK,OAAO,aAAK,MAAM,IAAI;AAC3B,WAAK,QAAQ;AACb,WAAK,QAAQ,aAAK,MAAM,KAAK;AAC7B,WAAK,SAAS;AACd,WAAK,SAAS;AAAA,IACf;AAAA,EACD;AAtBO,EAAAA,oBAAM;AA8BN,WAAS,qBACf,aACA,aACU;AACV,QAAI,mBAAmB,aAAK,OAAO;AACnC,QAAI,oBAAoB,EAAE,OAAO,SAAS;AAC1C,aAAS,UAAU,aAAa;AAC/B,eAAS,UAAU,aAAa;AAC/B,YAAI,IAAI,kBAAkB,QAAQ,QAAQ,kBAAkB,iBAAiB,GAAG;AAC/E,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AAfO,EAAAA,oBAAS;AAwBT,WAAS,gCACf,aACA,aACA,yBACU;AACV,QAAI,eAAe;AACnB,QAAI,uBAAuB,aAAK,OAAO;AACvC,QAAI,wBAAwB,EAAE,OAAO,SAAS;AAE9C,aAAS,UAAU,aAAa;AAC/B,eAAS,UAAU,aAAa;AAC/B,YAAI,IAAI,kBAAkB,QAAQ,QAAQ,sBAAsB,qBAAqB,GAAG;AACvF,yBAAe;AAGf,kCAAwB;AAAA,YACvB,IAAI;AAAA,cACH;AAAA,cACA,sBAAsB;AAAA,cACtB,IAAI,qBAAqB,QAAQ,QAAQ,oBAAoB;AAAA,cAC7D;AAAA,cACA;AAAA,YACD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AA7BO,EAAAA,oBAAS;AAuCT,WAAS,UACf,KACA,YACA,cAAsB,UACtB,kBAA2B,OAClB;AACT,QAAI,aAAa;AAEjB,eAAW,SAAS,YAAY;AAC/B,UAAI,CAACC,OAAM,CAAC,IAAI,IAAI;AAAA,QACnB;AAAA,QACA;AAAA,QACA,IAAI,OAAO;AAAA,QACX,aAAK,OAAO;AAAA,QACZ;AAAA,MACD;AACA,UAAIA,QAAO,YAAY;AACtB,qBAAaA;AACb,sBAAc;AAEd,YAAI,iBAAiB;AACpB,iBAAO;AAAA,QACR;AAAA,MACD;AAAA,IACD;AAEA,WAAO;AAAA,EACR;AA3BO,EAAAD,oBAAS;AAqCT,WAAS,wBACf,aACA,gBACA,aACA,gBACA,cAAsB,UACtB,kBAA2B,MAC3B,kBAA2B,OACV;AACjB,QAAI,cAAc;AAClB,QAAI,kBAAkB;AAEtB,aAAS,UAAU,aAAa;AAC/B,eAAS,UAAU,aAAa;AAC/B,YAAI,CAACC,OAAM,IAAI,IAAI,IAAI;AAAA,UACtB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACD;AAEA,aACG,mBAAmBA,SAAQ,KAAQA,QAAO,MAC3CA,QAAO,aACP;AACD,wBAAcA;AACd,4BAAkB;AAClB,wBAAc;AAEd,cAAI,iBAAiB;AACpB,mBAAO,CAAC,aAAa,eAAe;AAAA,UACrC;AAAA,QACD;AAAA,MACD;AAAA,IACD;AAEA,WAAO,CAAC,aAAa,eAAe;AAAA,EACrC;AAtCO,EAAAD,oBAAS;AAAA,GAtIH;;;ACHd,IAAqB,QAArB,MAA2B;AAAA,EAG1B,cAAc;AACb,SAAK,SAAS;AAAA,EACf;AAAA,EAEA,kBAAkB;AAAA,EAAC;AAAA,EAEnB,mBAAmB,QAAc;AAAA,EAAC;AAAA,EAElC,sBAAmC;AAClC,WAAO;AAAA,EACR;AAAA,EAEA,yBAAsC;AACrC,WAAO;AAAA,EACR;AAAA,EAEA,wBAAqC;AACpC,WAAO;AAAA,EACR;AAAA,EAEA,sBAAmC;AAClC,WAAO;AAAA,EACR;AAAA,EAEA,4BAAyC;AACxC,WAAO;AAAA,EACR;AACD;;;AC7BA,IAAqB,MAArB,cAAiC,MAAM;AAAA,EAYtC,cAAc;AACb,UAAM;AACN,SAAK,mBAAmB,IAAI,MAAY;AACxC,SAAK,kBAAkB,IAAI,MAAY;AACvC,SAAK,sBAAsB,IAAI,MAAY;AAC3C,SAAK,qBAAqB,IAAI,MAAY;AAC1C,SAAK,kBAAkB,aAAK,OAAO;AACnC,SAAK,gBAAgB,aAAK,OAAO;AACjC,SAAK,sBAAsB;AAC3B,SAAK,qBAAqB;AAE1B,SAAK,oBAAoB,aAAK,WAAW,MAAM,MAAM,IAAI,GAAG,aAAK,WAAW,KAAK,KAAK,GAAG,CAAC;AAAA,EAC3F;AAAA,EAEA,YAAY,UAAuB;AAClC,SAAK,iBAAiB,SAAS;AAC/B,aAAS,QAAQ,UAAU;AAC1B,WAAK,iBAAiB,KAAK,IAAI;AAAA,IAChC;AAEA,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEA,WAAW,SAAsB;AAChC,SAAK,gBAAgB,SAAS;AAC9B,aAAS,QAAQ,SAAS;AACzB,WAAK,gBAAgB,KAAK,IAAI;AAAA,IAC/B;AAEA,SAAK,qBAAqB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB,QAAc,QAAc;AAC/C,SAAK,gBAAgB,SAAS;AAC9B,SAAK,gBAAgB,KAAK,aAAK,WAAW,GAAK,GAAK,CAAG,CAAC;AACxD,SAAK,gBAAgB,KAAK,aAAK,WAAW,GAAK,GAAK,CAAG,CAAC;AACxD,SAAK,gBAAgB,KAAK,aAAK,WAAW,GAAK,GAAK,CAAG,CAAC;AAExD,SAAK,iBAAiB,SAAS;AAE/B,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,WAAK,iBAAiB,KAAK,aAAK,OAAO,CAAC;AAAA,IACzC;AAEA,iBAAK,KAAK,KAAK,iBAAiB,CAAC,GAAG,MAAM;AAC1C,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,KAAK,KAAK,iBAAiB,CAAC,GAAG,MAAM;AAE1C,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEA,2BAA2B,YAAyB;AACnD,SAAK,gBAAgB,SAAS;AAC9B,SAAK,gBAAgB,KAAK,aAAK,WAAW,GAAK,GAAK,CAAG,CAAC;AACxD,SAAK,gBAAgB,KAAK,aAAK,WAAW,GAAK,GAAK,CAAG,CAAC;AACxD,SAAK,gBAAgB,KAAK,aAAK,WAAW,GAAK,GAAK,CAAG,CAAC;AAExD,SAAK,iBAAiB,SAAS;AAE/B,QAAI,SAAS,aAAK,WAAW,UAAU,UAAU,QAAQ;AACzD,QAAI,SAAS,aAAK,WAAW,WAAW,WAAW,SAAS;AAE5D,aAAS,SAAS,YAAY;AAC7B,mBAAK,IAAI,QAAQ,QAAQ,KAAK;AAC9B,mBAAK,IAAI,QAAQ,QAAQ,KAAK;AAAA,IAC/B;AAEA,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,WAAK,iBAAiB,KAAK,aAAK,OAAO,CAAC;AAAA,IACzC;AAEA,iBAAK,KAAK,KAAK,iBAAiB,CAAC,GAAG,MAAM;AAC1C,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,IAAI,KAAK,iBAAiB,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAClE,iBAAK,KAAK,KAAK,iBAAiB,CAAC,GAAG,MAAM;AAE1C,SAAK,qBAAqB;AAC1B,SAAK,sBAAsB;AAAA,EAC5B;AAAA,EAEA,kBAAkB;AACjB,SAAK,sBAAsB;AAC3B,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAEA,mBAAmB,QAAc;AAChC,SAAK,kBAAkB;AACvB,SAAK,sBAAsB;AAC3B,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAEA,iBAAiB,QAAoB;AACpC,SAAK,gBAAgB;AACrB,SAAK,sBAAsB;AAC3B,SAAK,qBAAqB;AAAA,EAC3B;AAAA,EAEA,yBAAsC;AACrC,QAAI,KAAK,qBAAqB;AAC7B,WAAK,oBAAoB,SAAS;AAElC,UAAI,kBAAkB,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,eAAe,KAAK,eAAe;AAEtF,iBAAW,kBAAkB,KAAK,kBAAkB;AACnD,aAAK,oBAAoB;AAAA,UACxB,aAAK,cAAc,aAAK,OAAO,GAAG,gBAAgB,eAAe;AAAA,QAClE;AAAA,MACD;AACA,WAAK,sBAAsB;AAAA,IAC5B;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,wBAAqC;AACpC,QAAI,KAAK,oBAAoB;AAC5B,WAAK,mBAAmB,SAAS;AAEjC,iBAAW,kBAAkB,KAAK,iBAAiB;AAClD,aAAK,mBAAmB;AAAA,UACvB,aAAK;AAAA,YACJ,aAAK,OAAO;AAAA,YACZ,aAAK;AAAA,cACJ,aAAK,OAAO;AAAA,cACZ;AAAA,cACA,aAAK,eAAe,aAAK,OAAO,GAAG,KAAK,eAAe;AAAA,YACxD;AAAA,UACD;AAAA,QACD;AAAA,MACD;AAEA,WAAK,qBAAqB;AAAA,IAC3B;AACA,WAAO,KAAK;AAAA,EACb;AAAA,EAEA,sBAAmC;AAClC,WAAO,KAAK,sBAAsB;AAAA,EACnC;AAAA,EAEA,4BAAyC;AACxC,WAAO,KAAK,sBAAsB;AAAA,EACnC;AAAA,EAEA,qBAA2B;AAC1B,WAAO,KAAK;AAAA,EACb;AACD;;;AC5KA,IAAqB,gBAArB,MAAmC;AAAA,EA2B/B,YAAY,WAAuB;AAC/B,SAAK,OAAO;AAClB,SAAK,sBAAsB;AAC3B,SAAK,uBAAuB;AACtB,SAAK,WAAW;AACtB,SAAK,cAAc;AACb,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,WAAW,aAAK,OAAO;AAC5B,SAAK,UAAU,aAAK,OAAO;AAC3B,SAAK,QAAQ,aAAK,OAAO;AACzB,QAAI,aAAa,QAAW;AACxB,WAAK,YAAY,IAAI,UAAU;AAAA,IACnC,OACK;AACD,WAAK,YAAY;AAAA,IACrB;AACA,SAAK,cAAc,IAAI,IAAI;AAC3B,SAAK,YAAY,mBAAmB,KAAK,UAAU,MAAM;AAAA,EAC7D;AACJ;;;AC5CA,IAAqB,eAArB,MAAkC;AAAA,EAK9B,cAAc;AACV,SAAK,UAAU,aAAK,WAAW,GAAK,MAAM,CAAG;AAC7C,SAAK,iBAAiB,IAAI,MAAqB;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB,WAAuB,eAA8C;AACrF,QAAIE,UAAS;AACb,QAAI,iBAAiB,QAAW;AAC5B,MAAAA,UAAS,KAAK,eAAe,KAAK,aAAa;AAAA,IACnD,OACK;AACD,MAAAA,UAAS,KAAK,eAAe,KAAK,IAAI,cAAc,SAAS,CAAC;AAAA,IAClE;AACA,WAAO,KAAK,eAAeA,UAAS,CAAC;AAAA,EACzC;AAAA,EAEA,UAAU,KAAU,cAAsB,UAAkB;AACxD,QAAI,aAAa;AACjB,aAAS,iBAAiB,KAAK,gBAAgB;AAC3C,UAAI,MAAM,mBAAmB,UAAU,KAAK,CAAC,cAAc,WAAW,GAAG,KAAK,IAAI,aAAa,UAAU,CAAC;AAC1G,mBAAa,KAAK,IAAI,YAAY,GAAG;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA,EAEA,OAAO,IAAY;AAEf,aAAS,iBAAiB,KAAK,gBAAgB;AAC3C,oBAAc,UAAU,gBAAgB;AACxC,oBAAc,YAAY,gBAAgB;AAAA,IAC9C;AAEA,aAAS,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,KAAK;AACjD,UAAI,gBAAgB,KAAK,eAAe,CAAC;AACzC,YAAM,cAAc,aAAK,MAAM,cAAc,QAAQ;AAGrD,eAAS,IAAI,IAAI,GAAG,IAAI,KAAK,eAAe,QAAQ,KAAK;AACrD,YAAI,mBAAmB,qBAAqB,CAAC,cAAc,WAAW,GAAG,CAAC,KAAK,eAAe,CAAC,EAAE,WAAW,CAAC,GAAG;AAI5G,cAAI,MAAM,IAAI,MAAkD;AAChE,6BAAmB,gCAAgC,CAAC,cAAc,WAAW,GAAG,CAAC,KAAK,eAAe,CAAC,EAAE,WAAW,GAAG,GAAG;AAEzH,0BAAgB,gBAAgB,KAAK,eAAe,KAAK,eAAe,CAAC,CAAC;AAAA,QAE9E;AAAA,MACJ;AAEA,UAAI,CAAC,cAAc,UAAU;AAEzB,qBAAK,YAAY,cAAc,UAAU,cAAc,UAAU,KAAK,SAAS,EAAE;AACjF,qBAAK,YAAY,cAAc,UAAU,cAAc,UAAU,cAAc,OAAO,KAAK,cAAc,IAAI;AAC7G,qBAAK,YAAY,cAAc,UAAU,cAAc,UAAU,cAAc,SAAS,IAAM,cAAc,IAAI;AAEhH,qBAAK,KAAK,cAAc,KAAK;AAC7B,qBAAK,KAAK,cAAc,OAAO;AAE/B,YAAI,cAAc,aAAK,MAAM,aAAK,OAAO,GAAG,aAAK,IAAI,aAAK,OAAO,GAAG,aAAa,cAAc,QAAQ,GAAG,MAAM,EAAE;AAClH,YAAI,aAAK,IAAI,WAAW,IAAI,MAAO;AAC/B,wBAAc,UAAU,UAAU,WAAW;AAC7C,wBAAc,UAAU,gBAAgB;AAAA,QAC5C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACjFA,IAAqB,MAArB,cAAiC,MAAM;AAAA,EAKtC,cAAc;AACb,UAAM;AACN,SAAK,QAAQ,aAAK,OAAO;AACzB,SAAK,MAAM,aAAK,WAAW,GAAK,GAAK,CAAG;AACxC,SAAK,gBAAgB,aAAK,OAAO;AAAA,EAClC;AAAA,EAEA,SAAS,OAAqB;AAC7B,iBAAK,KAAK,KAAK,OAAO,KAAK;AAAA,EAC5B;AAAA,EAEA,OAAO,KAAmB;AACzB,iBAAK,UAAU,KAAK,KAAK,GAAG;AAAA,EAC7B;AAAA,EAEA,SAAuB;AACtB,WAAO,KAAK,sBAAsB,EAAE,CAAC;AAAA,EACtC;AAAA,EAEA,eAAe,OAAqB,KAAmB;AACtD,iBAAK,KAAK,KAAK,OAAO,KAAK;AAC3B,iBAAK,UAAU,KAAK,KAAK,GAAG;AAAA,EAC7B;AAAA,EAEA,iBAAiB,QAAc;AAC9B,SAAK,gBAAgB;AAAA,EACtB;AAAA,EAEA,yBAAsC;AACrC,WAAO,CAAC,aAAK,cAAc,aAAK,OAAO,GAAG,KAAK,OAAO,KAAK,aAAa,CAAC;AAAA,EAC1E;AAAA,EAEA,wBAAqC;AACpC,QAAI,QAAQ,KAAK,uBAAuB,EAAE,CAAC;AAC3C,QAAI,MAAM,aAAK;AAAA,MACd,aAAK,OAAO;AAAA,MACZ,aAAK,IAAI,aAAK,OAAO,GAAG,KAAK,OAAO,KAAK,GAAG;AAAA,MAC5C,KAAK;AAAA,IACN;AAEA,WAAO,CAAC,aAAK,SAAS,aAAK,OAAO,GAAG,KAAK,KAAK,CAAC;AAAA,EACjD;AAAA,EAEA,sBAAmC;AAClC,WAAO,CAAC;AAAA,EACT;AAAA,EAEA,4BAAyC;AACxC,WAAO,CAAC;AAAA,EACT;AACD;;;ACtDO,IAAO;AAAA,CAAP,CAAOC,kBAAP;AACC,WAAS,OAAO,QAAgB,UAAqB;AAC3D,QAAI,eAAe,aAAK,WAAW,SAAS,CAAC,GAAG,SAAS,CAAC,GAAG,IAAM,CAAG;AACtE,QAAI,iBAAiB,aAAK;AAAA,MACzB,aAAK,OAAO;AAAA,MACZ;AAAA,MACA,aAAK,OAAO,aAAK,OAAO,GAAG,OAAO,oBAAoB,CAAC;AAAA,IACxD;AACA,mBAAe,CAAC,IAAI;AACpB,mBAAe,CAAC,IAAI;AACpB,QAAI,kBAAkB,aAAK;AAAA,MAC1B,aAAK,OAAO;AAAA,MACZ;AAAA,MACA,aAAK,OAAO,aAAK,OAAO,GAAG,OAAO,cAAc,CAAC;AAAA,IAClD;AACA,QAAI,MAAM,aAAK;AAAA,MACd,aAAK,OAAO;AAAA,MACZ,aAAK,WAAW,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,GAAG,gBAAgB,CAAC,CAAC;AAAA,IAC3E;AAEA,QAAI,MAAM,IAAI,IAAI;AAClB,QAAI,OAAO,GAAG;AACd,QAAI,SAAS,aAAK,MAAM,OAAO,YAAY,CAAC,CAAC;AAE7C,WAAO;AAAA,EACR;AAxBO,EAAAA,cAAS;AAAA,GADH;;;ACqBP,IAAI,uBAAuB,KAAK,IAAI;AACpC,IAAI,eAAe,IAAI,aAAa;AACpC,IAAI,YAAY,IAAI,UAAU,YAAY;AAEjD,eAAS,mBAAmB,KAAK;","names":["equals","scale","equals","add","adjoint","clone","copy","create","determinant","equals","exactEquals","frob","fromQuat","fromRotation","fromScaling","fromTranslation","fromValues","identity","invert","mul","multiply","multiplyScalar","multiplyScalarAndAdd","rotate","scale","set","str","sub","subtract","translate","transpose","create","clone","copy","fromValues","set","identity","transpose","invert","adjoint","determinant","multiply","translate","scale","rotate","len","fromTranslation","fromScaling","fromRotation","fromQuat","str","frob","add","subtract","multiplyScalar","multiplyScalarAndAdd","exactEquals","equals","mul","sub","add","clone","copy","create","dot","equals","exactEquals","fromValues","identity","invert","len","length","lerp","mul","multiply","normalize","random","rotateX","rotateY","rotateZ","scale","set","sqrLen","squaredLength","str","add","clone","copy","create","equals","exactEquals","fromValues","mul","multiply","rotateX","rotateY","rotateZ","scale","set","str","sub","subtract","create","clone","fromValues","copy","set","add","subtract","multiply","scale","len","rotateX","rotateY","rotateZ","str","exactEquals","equals","sub","mul","add","ceil","clone","copy","create","cross","dist","distance","div","divide","dot","equals","exactEquals","floor","forEach","fromValues","inverse","len","length","lerp","max","min","mul","multiply","negate","normalize","random","round","scale","scaleAndAdd","set","sqrDist","sqrLen","squaredDistance","squaredLength","str","sub","subtract","transformMat4","transformQuat","zero","create","clone","fromValues","copy","set","add","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","cross","lerp","random","transformMat4","transformQuat","zero","str","exactEquals","equals","sub","mul","div","dist","sqrDist","sqrLen","forEach","create","identity","dot","multiply","rotateX","rotateY","rotateZ","scale","random","invert","str","clone","fromValues","copy","set","add","mul","lerp","length","len","squaredLength","sqrLen","normalize","exactEquals","equals","add","angle","ceil","clone","copy","create","cross","dist","distance","div","divide","dot","equals","exactEquals","floor","forEach","fromValues","inverse","len","length","lerp","max","min","mul","multiply","negate","normalize","random","rotate","round","scale","scaleAndAdd","set","sqrDist","sqrLen","squaredDistance","squaredLength","str","sub","subtract","transformMat3","transformMat4","zero","create","clone","fromValues","copy","set","add","subtract","multiply","divide","ceil","floor","min","max","round","scale","scaleAndAdd","distance","squaredDistance","length","squaredLength","negate","inverse","normalize","len","dot","cross","lerp","random","transformMat3","transformMat4","rotate","angle","zero","str","exactEquals","equals","sub","mul","div","dist","sqrDist","sqrLen","forEach","distance","length","textureStore","length","CollisionSolver","SAT","IntersectionTester","dist","length","MousePicking"]}